# SciTE settings for Lua files
# Lua 5.1 only

# expected per-user overrides
# path of Lua binaries
#lua.directory=

# expected per-project overrides
# search path for `open selected file` functionality
#openpath.$(file.patterns.lua)=

# Lua License aplies. For details and rationale,
# see  http://www.lua.org/license.html

[file patterns]
shbang.lua=lua
file.patterns.lua=*.lua;*.wlua;*.lexe;*.glua;*.gluaw;*.mlua;*.clua;*.rockspec;*.ob;*.ws
source.filters.lua=Lua ($(file.patterns.lua))|$(file.patterns.lua)|
open.suffix.*.lua=.lua

*source.patterns.lua=$(file.patterns.lua);
filter.lua=Lua ( lua )|$(file.patterns.lua)|
*filter.lua=$(filter.lua)

lexer.$(file.patterns.lua)=lua
#import luainspect
#lexer.$(file.patterns.lua)=script_lua

*language.lua=Lu&a|lua||

autocomplete.lua.start.characters=$(chars.alpha)$(chars.numeric)$
autocomplete.lua.fillups=	
#autocomplete.lua.ignorecase=1
autocomplete.lua.choose.single=0

[editor/indentation]
tab.size.$(file.patterns.lua)=3
indent.size.$(file.patterns.lua)=3
statement.indent.$(file.patterns.lua)=5 do else function then
statement.end.$(file.patterns.lua)=5 end
# look up in the source only 5 lines to get current indentation
statement.lookback.$(file.patterns.lua)=5
# simply repeat the indentation of the previous line instead of indenting on some keywords
indent.maintain.$(file.patterns.lua)=1

[editor/calltips]
api.$(file.patterns.lua)= \
$(SciteDefaultHome)/languages/lua.api;\
$(SciteDefaultHome)/user/languages/lua.api;\
$(SciteDefaultHome)/languages/lua.scite.api;\
$(SciteDefaultHome)/user/languages/lua.scite.api

calltip.lua.end.definition=)
calltip.lua.word.characters=.:$(chars.alpha)$(chars.numeric)
calltip.lua.parameters.start=( 
calltip.lua.parameters.end=)
calltip.lua.parameters.separators=,

[editor/abbreviations]
abbreviations.$(file.patterns.lua)=$(SciteDefaultHome)/user/abbreviations/lua.abbrev

[editor/highlighting]
# Comment the line below and uncomment the other two to use luainspect as lexer.
lexer.$(file.patterns.lua)=lua
#import user\luainspect
#lexer.$(file.patterns.lua)=script_lua

# keywords: Lua 5.1 & 5.2
# language keywords
keywords.$(file.patterns.lua)=and break do else elseif end for function goto \
if in local not or repeat return then until while

# standard library functions
keywords2.$(file.patterns.lua)=_G _ENV getfenv getmetatable ipairs loadlib next pairs pcall \
rawequal setfenv setmetatable xpcall load module select \
assert collectgarbage dofile error gcinfo loadfile loadstring load \
print rawget rawset require tonumber tostring type unpack table.unpack
# string, table, math functions
keywords3.$(file.patterns.lua)=string.byte string.char string.dump string.find string.len \
string.lower string.rep string.sub string.upper string.format string.gfind string.gsub \
table.concat table.foreach table.foreachi table.getn table.sort table.insert table.remove table.setn \
math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp \
math.floor math.frexp math.ldexp math.log math.log10 math.max math.min math.mod \
math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan \
string.gmatch string.match string.reverse table.maxn \
math.cosh math.fmod math.modf math.sinh math.tanh
# coroutine, io, os, debug functions
keywords4.$(file.patterns.lua)=coroutine.create coroutine.resume coroutine.status coroutine.wrap \
coroutine.yield coroutine.running io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type \
io.write io.popen os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename os.setlocale \
os.time os.tmpname package.loadlib package.seeall debug.debug debug.getfenv debug.gethook debug.getinfo \
debug.getlocal debug.getmetatable debug.getregistry debug.getupvalue debug.setfenv debug.sethook \
debug.setlocal debug.setmetatable debug.setupvalue debug.traceback
# standard variables
keywords5.$(file.patterns.lua)=self nil true false string table math coroutine io os debug _VERSION math.pi math.huge \
io.stdin io.stdout io.stderr package.cpath package.path package.preload package.loaded package.loaders package.searchers
# keywords6, 7 & 8 are for other libraries
# comments
comment.block.lua=--~
comment.block.at.line.start.lua=1
# braces are only matched in operator style
braces.lua.style=10

# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=$(_colour.style.0)
# Block comment (Lua 5.0)
style.lua.1=$(colour.comment.box),$(font.comment.line)
# Line comment
style.lua.2=$(colour.comment.line),$(font.comment.line)
# Doc comment -- Not used in Lua
style.lua.3=$(colour.comment.doc),$(font.comment.line)
# Number
style.lua.4=$(colour.number)
# Keyword
style.lua.5=$(colour.keyword),$(colour.background)
# (Double quoted) String
style.lua.6=$(colour.string)
# Character (Single quoted string)
style.lua.7=$(colour.char)
# Literal string
style.lua.8=$(colour.string)
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=$(colour.preproc)
# Operators
style.lua.10=$(colour.operator)
# Identifier (everything else...)
style.lua.11=$(colour.identifier)
# End of line where string is not closed
style.lua.12=$(colour.eolstringnotclosed)
# Other keywords
style.lua.13=$(colour.style16),$(colour.background)
style.lua.14=$(colour.style16),$(colour.background)
style.lua.15=$(colour.style16),$(colour.background)
style.lua.16=$(colour.style16),$(colour.background)
style.lua.17=$(colour.userdefinedliterals),$(colour.background)
style.lua.18=$(colour.userdefinedliterals),$(colour.background)
style.lua.19=$(colour.userdefinedliterals),$(colour.background)

[commands]

# compatible with LuaBinaries for Lua 5.1; will work on both platforms.
command.compile.*.lua=luac -o "$(FileName).luc" "$(FileNameExt)" && bin2c "$(FileName).luc"

# Lua 5.1
command.go.*.lua=mylua "$(FileNameExt)"

# Lua 4.0
#command.go.*.lua=Lua-4.0.exe -c -f "$(FileNameExt)"

# Lua 5.1
command.go.*.lua=mylua -e "io.stdout:setvbuf 'no'" "$(FileNameExt)"
command.go.*.mlua=metalua.bat "$(FileNameExt)"
command.go.*.wlua=wlua "$(FileNameExt)"
command.go.subsystem.*.wlua=1

command.build.*.lexe=lua -e "io.stdout:setvbuf 'no'" "$(FileNameExt)"
command.go.*.lexe=wlua "$(lua.directory)\lExecutor.wlua" "$(FileNameExt)"
command.go.subsystem.*.lexe=1

# Lua 4.0
#command.go.*.lua=Lua-4.0.exe -c -f "$(FileNameExt)"

