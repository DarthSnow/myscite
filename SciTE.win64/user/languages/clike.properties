# Define SciTE settings for C++, C, Ch, IDL, Flash (ActionScript 3) files.
# CleanUp Okt 2016, Marcedo@HabmalneFrage.de
# -> extrapolated c#, java and javascript handling for better maintainability.

file.patterns.cpp=*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hpp;*.hxx;*.ipp;*.m;*.mm
file.patterns.rc=*.rc;*.rc2;*.dlg;*.def
file.patterns.idl=*.idl;*.odl

# ---- C-Like Languages
# go (used on google)
file.patterns.go=*.go
# vala (used on gnome gtk+ )
file.patterns.vala=*.vala
# pike ( Macintosh Platform )
file.patterns.pike=*.pike
# swift  ( Macintosh Platform )
file.patterns.swift=*.swift
# actionscript 3 (adobe/flex/haxe) (ECMA4)
file.patterns.flash=*.as;*.asc;*.jsfl
# pln, inc and t = SilkTest (4Test, automated function and regression testing)
file.patterns.test=*.pln;*.inc;*.t
# sma files (SMAll script C-like)
file.patterns.sma=*.sma
# ch (c/cpp scripts)
file.patterns.ch=*.ch;*.chf;*.chs

file.patterns.c.like=$(file.patterns.go);$(file.patterns.vala);$(file.patterns.pike);$(file.patterns.flash);$(file.patterns.sma);$(file.patterns.ch)
*source.patterns.cpp=$(file.patterns.cpp);
*source.patterns.resource=$(file.patterns.rc);
*source.patterns.go=$(file.patterns.go);

*filter.cpp=C/C++ ( c cpp cxx hpp h rc def idl )|$(file.patterns.cpp);$(file.patterns.rc);$(file.patterns.idl)|
*filter.clike=C-Based ( vala go pike swift flash )|$(file.patterns.c.like)|
*language.clike=&C / C++|cpp||

shbang.tcc=cpp
shbang.tinycc=cpp

lexer.$(file.patterns.cpp)=cpp
lexer.$(file.patterns.rc)=cpp
lexer.$(file.patterns.idl)=cpp
# moved c_sharp
lexer.$(file.patterns.test)=cpp
# moved javascript
# moved java
lexer.$(file.patterns.flash)=cpp
lexer.$(file.patterns.vala)=cpp
lexer.$(file.patterns.go)=cpp
lexer.$(file.patterns.pike)=cpp

substyles.cpp.11=5

directives.objective.c=\
@class @defs @protocol @required @optional @end @interface @public @package @protected @private @property @implementation \
@synthesize @dynamic @throw @try @catch @finally @synchronized @autoreleasepool @selector @encode @compatibility_alias
substylewords.11.1.$(file.patterns.cpp)=$(directives.objective.c)
style.cpp.11.1=fore:#222290

keywordclass.cpp.types= \
void bool float char double int long short signed wchar_t UINT_PTR  \
__LINE__ __FILE__ __DATE__ __TIME__ __STDC__ int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t uint64_t \
int_least8_t int_least16_t int_least32_tint_least64_t uint_least16_t uint_least32_t uint_least64_t int_fast8_t \
int_fast16_t int_fast32_t int_fast64_t uint_fast8_t uint_fast16_t uint_fast32_t uint_fast64_t intmax_t uintmax_t intptr_t uintptr_t \
intmax_t uintmax_t wint_t wchar_t wctrans_t wctype_t size_t time_t char16_t char32_t \
NAN WCHAR WORD DWORD ULONG UINT USHORT LONG PVOID TRUE FALSE FILE BOOL BUFSIZ EOF FILENAME_MAX  FENV_ACCESS FE_ALL_EXCEPT FE_DFL_ENV \
FE_DIVBYZERO FE_DOWNWARD FE_INEXACT FE_INVALID FE_OVERFLOW FE_TONEAREST FE_TOWARDZERO FE_UNDERFLOW FE_UPWARD NULL HUGE_VAL HUGE_VALF \
HUGE_VALL INFINITY FOPEN_MAX L_tmpnam TMP_MAX EXIT_FAILURE EXIT_SUCCESS MB_CUR_MAX RAND_MAX CLOCKS_PER_SEC WCHAR_MAX WCHAR_MIN WEOF \
ptrdiff_t wint_t wctrans_t wctype_t ATOMIC_FLAG_INIT ATOMIC_VAR_INIT __declspec _Bool _Complex _Imaginary std Data type

#https://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx
keywordclass.cpp.types.ms= \
APIENTRY ATOM BOOL BOOLEAN BYTE CALLBACK CCHAR CHAR COLORREF CONST DWORD DWORDLONG DWORD_PTR DWORD32 DWORD64 FLOAT HACCEL HALF_PTR \
HANDLE HBITMAP HBRUSH HCOLORSPACE HCONV HCONVLIST HCURSOR HDC HDDEDATA HDESK HDROP HDWP HENHMETAFILE HFILE HFONT HGDIOBJ HGLOBAL \
HHOOK HICON HINSTANCE HKEY HKL HLOCAL HMENU HMETAFILE HMODULE HMONITOR HPALETTE HPEN HRESULT HRGN HRSRC HSZ HWINSTA HWND INT INT_PTR \
INT8 INT16 INT32 INT64 LANGID LCID LCTYPE LGRPID LONG LONGLONG LONG_PTR LONG32 LONG64 LPARAM LPBOOL LPBYTE LPCOLORREF LPCSTR LPCTSTR \
LPCVOID LPCWSTR LPDWORD LPHANDLE LPINT LPLONG LPSTR LPTSTR LPVOID LPWORD LPWSTR LRESULT PBOOL PBOOLEAN PBYTE PCHAR PCSTR PCTSTR PCWSTR \
PDWORD PDWORDLONG PDWORD_PTR PDWORD32 PDWORD64 PFLOAT PHALF_PTR PHANDLE PHKEY PINT PINT_PTR PINT8 PINT16 PINT32 PINT64 PLCID PLONG PLONGLONG \
PLONG_PTR PLONG32 PLONG64 POINTER_32 POINTER_64 POINTER_SIGNED POINTER_UNSIGNED PSHORT PSIZE_T PSSIZE_T PSTR PTBYTE PTCHAR PTSTR PUCHAR PUHALF_PTR \
PUINT PUINT_PTR PUINT8 PUINT16 PUINT32 PUINT64 PULONG PULONGLONG PULONG_PTR PULONG32 PULONG64 PUSHORT PVOID PWCHAR PWORD PWSTR QWORD SC_HANDLE SC_LOCK \
SERVICE_STATUS_HANDLE SHORT SIZE_T SSIZE_T TBYTE TCHAR UCHAR UHALF_PTR UINT UINT_PTR UINT8 UINT16 UINT32 UINT64 ULONG ULONGLONG ULONG_PTR ULONG32 ULONG64 \
UNICODE_STRING USHORT USN VOID WCHAR WINAPI WORD WPARAM 

# isoC99 headers
keywordclass.c99.math=atol atoi atof acos cos cosh sin sinh tan tanh asin atan abs acosh asinh atanh atan2 ceil exp frexp \
ldexp exp2 log log10 modf pow sqrt fabs fmod floor frexp ldiv div rand srand hypot
keywordclass.c99.file=fclose feof ferror fflush ftell fprintf fscanf fsetpos fgetpos fseek fread fesetenv feupdateenv fesetexceptflag fputws \
clearerr  rename rewind setbuf setvbuf tmpfile  fpos_t fopen freopen fwrite
keywordclass.c99.char=printf fgetc fgets fputc fputs getc getchar  putc putchar  ungetc getc getchar  putc putchar  ungetc
keywordclass.c99.string=strtod strtol strtoul memchr memcmp memcpy memmove memset  strncat strchr strcmp strncmp strcoll  \
strcspn strerror strlen strpbrk strrchr strspn strstr strok strxfrm mblen mbstowcs mbtowc wcstombs wctomb toupper tolower
keywordclass.c99.mem=calloc free malloc realloc
keywordclass.c99.env=abort atexit exit getenv system
keywordclass.c99.misc=bsearch qsort asctime clock ctime difftime gmtime localtime mktime strftime time assert clock_t cbrt copysign \
double_t div_t errno erfc erf expm1 fenv_t fexcept_t fpclassify fdim fmax fmin fegetenv feholdexcept fegetexceptflag fgetwc fwprintf \
fwide feclearexcept feraiseexcept fetestexcept fesetround fegetround fputwc fgetws getwchar isfinite isgreater isgreaterequal \
isinf isless islessequal islessgreater isnan isnormal isunordered labs perror log sizeof 

keywordclass.c99=$(keywordclass.c99.math) $(keywordclass.c99.file) $(keywordclass.c99.char) $(keywordclass.c99.string) \
$(keywordclass.c99.mem) $(keywordclass.c99.env) $(keywordclass.c99.misc)

# isoC11 Keywords from cppreference.com
keywordclass.cpp.reserved.isoc11=\
auto break case char const continue default do double else enum extern float int for goto if int long register return short signed sizeof \
static struct switch typedef union unsigned void volatile while _Alignas alignas _Alignof alignof _Atomic _Generic _Noreturn noreturn \
_Static_assert static_assert _Thread_local thread_local inline restrict _Bool _Complex _Imaginary imaginary

# isoCPP98 Keywords from cppreference.com
keywordclass.cpp.reserved.isocpp98=\
and and_eq asm auto bitand bitor break case catch class compl const const_cast continue default delete do dynamic_cast \
else enum explicit export extern false for friend goto if inline mutable namespace new not not_eq operator or or_eq private \
protected public register reinterpret_cast return sizeof static static_cast struct switch template this throw true try typedef \
typeid typename union unsigned using virtual volatile while xor xor_eq concept requires import module \

#CPP98 Headers subset, export from http://www.cpp.com/reference/clibrary/
keywordclass.cpp98= \
decltype constexpr  alignof final noexcept nullptr override static_assert thread_local string wstring \
atol atoi atof asctime acos asin atan abs atan2 assert atexit abort bsearch clock_t clearerr ceil calloc clock div_t div \
difftime errno exp fpos_t fgets fopen freopen fputs fwrite fclose feof ferror fflush fgetc ftell \
fprintf fscanf fsetpos fgetpos fseek fputc fread fputws fmod fabs floor frexp fgetwc fwprintf fwide free fputwc \
fgetws getchar gmtime getwchar isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit \
iswalnum iswalpha iswcntrl iswdigit iswgraph iswlower iswprint iswpunct iswspace iswupper iswxdigit iswctype jmp_buf ldiv_t \
localtime log10 ldexp  labs ldiv localeconv mbstate_t memchr memcmp memcpy memmove memset mblen mbrlen mbsinit modf malloc \
mktime mbstowcs mbsrtowcs mbtowc mbrtowc offsetof perror putchar pow putwchar qsort  rename rewind rand realloc struct \
lconv size_t stderr stdin stdout struct tm strncat  strxfrm   strlen strchr strrchr strcmp \
strcoll strcspn strspn strpbrk strstr strncmp setbuf setvbuf strerror signal strftime system strtod strtol strtoul swscanf sqrt \
setlocale  srand swprintf time_t  tolower toupper tmpfile towlower towupper towctrans ungetc ungetwc va_list vprintf \
vwprintf vfwprintf va_end va_start va_arg wcstombs wcsrtombs wctomb  wmemchr wmemcmp wcstod wcstol wcstoul wcslen wcscmp \
wcscoll wcscspn wcsspn wcspbrk wcsstr wcsncmp wcschr wcsrchr wcsncat wcsxfrm wmemcpy wmemmove wcsftime wmemset adjacent_find \
allocator auto_ptr auto_ptr_ref accumulate adjacent_difference advance basic_filebuf basic_fstream basic_ifstream basic_ofstream \
basic_ostream basic_istringstream basic_ostringstream basic_stringbuf basic_stringstream basic_streambuf binary_search bitset \
bad_exception binary_negate binary_function binder1st binder2nd bidirectional_iterator_tag back_insert_iterator bad_alloc bad_cast \
bad_typeid bind1st bind2nd back_inserter boolalpha cerr cin clog cout copy_backward complex const_mem_fun1_ref_t const_mem_fun1_t \
const_mem_fun_ref_t const_mem_fun_t codecvt_base codecvt_byname collate collate_byname ctype_base ctype_byname char_traits conj \
count count_if deque divides domain_error distance dec equal_range equal_to endl ends forward_iterator_tag front_insert_iterator \
float_denorm_style float_round_style front_inserter find_first_of find_end for_each find_if fixed fill_n greater_equal gslice \
gslice_array get_temporary_buffer generate generate_n has_facet hex ios_base includes inplace_merge iterator iterator_traits \
input_iterator_tag istreambuf_iterator istream_iterator inner_product invalid_argument indirect_array imag iter_swap internal \
lexicographical_compare lower_bound less_equal logical_and logical_not length_error logic_error left map multimap multiset \
make_heap max_element min_element mismatch minus modulus multiplies messages messages_base messages_byname moneypunct \
moneypunct_byname money_base money_get money_put mask_array make_pair next_permutation not_equal_to numeric_limits numpunct \
numpunct_byname num_get num_put nothrow nothrow_t not1 not2 noboolalpha noshowbase noshowpoint noshowpos noskipws nounitbuf \
nouppercase nth_element output_iterator_tag ostreambuf_iterator ostream_iterator out_of_range overflow_error oct operatornew \
operatordelete priority_queue partition partition_copy partial_sort partial_sort_copy pop_heap prev_permutation push_heap plus \
pointer_to_binary_function pointer_to_unary_function ptr_fun partial_sum pair polar replace_copy replace_copy_if \
random_access_iterator_tag reverse_iterator raw_storage_iterator range_error runtime_error rel_ops reverse_copy reverse replace \
replace_if remove_if rotate rotate_copy remove_copy remove_copy_if right resetiosflags random_shuffle return_temporary_buffer \
stack streamoff streampos streamsize search_n set_difference set_intersection set_symmetric_difference set_union sort_heap \
stable_partition stable_sort setfill swap_ranges setbase setprecision setw scientific set_new_handler set_terminate set_unexpected \
transform time_base time_get time_get_byname time_put time_put_byname type_info terminate_handler unique_copy upper_bound \
unary_negate underflow_error uninitialized_copy uncaught_exception unexpected_handler use_facet uninitialized_fill uninitialized_fill_n \
vector valarray wfilebuf wfstream wifstream wofstream wios wstreampos wcerr wcin wclog wcout wiostream wistream wostream \
wistringstream wostringstream wstringbuf wstringstream wstreambuf basic_ios basic_iostream basic_istream

# isoCPP11 adds
keywordclass.cpp.reserved.isocpp11=\
alignas alignof char16_t char32_t constexpr decltype noexcept nullptr static_assert thread_local 

# CPP11 Header (additions, subset +make_unique) export from http://www.cpp.com/reference/clibrary/
keywordclass.cpp11= \
proj condition_variable condition_variable_any cv_status notify_all_at_thread_exit max_align_t nullptr_t rethrow_exception \
throw_with_nested current_exception get_terminate get_unexpected make_exception_ptr nested_exception rethrow_if_nested \
forward_list bind bit_and bit_xor bad_function_call cref function hash is_bind_expression is_placeholder mem_fn placeholders \
reference_wrapper future future_error future_errc future_status future_category launch packaged_task promise shared_future \
initializer_list get_money get_time put_money put_time defaultfloat hexfloat io_errc iostream_category begin make_move_iterator \
wbuffer_convert wstring_convert default_delete unique_ptr allocator_arg_t allocator_traits allocate_shared addressof bad_weak_ptr \
const_pointer_cast declare_no_pointers dynamic_pointer_cast declare_reachable enable_shared_from_this get_pointer_safety \
get_deleter make_shared owner_less pointer_traits pointer_safety shared_ptr static_pointer_cast uses_allocator uninitialized_copy_n \
undeclare_no_pointers undeclare_reachable allocator_traits pointer_traits adopt_lock_t call_once defer_lock_t lock_guard mutex \
once_flag recursive_mutex recursive_timed_mutex try_to_lock_t try_lock unique_lock bad_array_new_length get_new_handler iota \
bernoulli_distribution binomial_distribution cauchy_distribution chi_squared_distribution discrete_distribution default_random_engine \
discard_block_engine exponential_distribution extreme_value_distribution fisher_f_distribution gamma_distribution geometric_distribution \
generate_canonical independent_bits_engine knuth_b lognormal_distribution linear_congruential_engine mersenne_twister_engine \
minstd_rand minstd_rand0 mt19937 mt19937_64 negative_binomial_distribution piecewise_constant_distribution piecewise_linear_distribution \
poisson_distribution random_device ranlux24 ranlux24_base ranlux48 ranlux48_base student_t_distribution shuffle_order_engine \
subtract_with_carry_engine seed_seq uniform_int_distribution uniform_real_distribution weibull_distribution ratio_add ratio_divide \
ratio_equal ratio_greater ratio_greater_equal ratio_less ratio_less_equal ratio_multiply ratio_not_equal ratio_subtract basic_regex \
cmatch csub_match match_results regex_constants regex_error regex_iterator regex_token_iterator regex_traits regex_replace regex_match \
regex_search sub_match ssub_match wcmatch wcsub_match wregex wsmatch wssub_match basic_regex stoi to_string to_wstring u16string \
u32string error_category error_code error_condition generic_category is_error_code_enum is_error_condition_enum make_error_code \
make_error_condition system_error system_category this_thread forward_as_tuple ignore make_tuple tuple tuple_element tuple_size \
tuple_cat tie alignment_of add_const add_cv add_lvalue_reference add_pointer add_rvalue_reference add_volatile aligned_storage \
aligned_union conditional decay extent enable_if false_type has_virtual_destructor integral_constant is_abstract is_arithmetic \
is_array is_assignable is_base_of is_class is_compound is_const is_constructible is_convertible is_copy_assignable is_copy_constructible \
is_default_constructible is_destructible is_empty is_enum is_floating_point is_function is_fundamental is_integral is_literal_type \
is_lvalue_reference is_member_function_pointer is_member_object_pointer is_member_pointer is_move_assignable is_move_constructible \
is_nothrow_assignable is_nothrow_constructible is_nothrow_copy_assignable is_nothrow_copy_constructible is_nothrow_default_constructible \
is_nothrow_destructible is_nothrow_move_assignable is_nothrow_move_constructible is_object is_pod is_pointer is_polymorphic \
is_reference is_rvalue_reference is_same is_scalar is_signed is_standard_layout is_trivial is_trivially_assignable \
is_trivially_constructible is_trivially_copyable is_trivially_copy_assignable is_trivially_copy_constructible \
is_trivially_default_constructible is_trivially_destructible is_trivially_move_assignable is_trivially_move_constructible \
is_union is_unsigned is_void is_volatile make_signed make_unsigned rank remove_all_extents remove_const remove_cv remove_extent \
remove_pointer remove_reference remove_volatile result_of true_type underlying_type is_null_pointer \
type_index unordered_map unordered_multimap unordered_multiset unordered_set declval move_if_noexcept \
piecewise_construct_t bit_or c16rtomb c32rtomb mbrtoc16 mbrtoc32 at_quick_exit alignas make_unique
substylewords.11.2.$(file.patterns.cpp)=$(keywordclass.cpp11)
style.cpp.11.2=$(colour.keyword6)

keywordclass.cpp.limits=is_specialized min max lowest digits digits10 max_digits10 is_signed is_integer is_exact radix epsilon round_error \
min_exponent min_exponent10 max_exponent max_exponent10 has_infinity has_quiet_NaN has_signaling_NaN has_denorm has_denorm_loss \
infinity quiet_NaN signaling_NaN denorm_min is_iec559 is_bounded is_modulo traps tinyness_before round_style 

# Highlight functions marked as "unsafe" by https://github.com/leafsr/gcc-poison/blob/master/poison.h 
keywordclass.gcc.unsafe=strcpy  stpcpy wcpcpy scanf sscanf vscanf fwscanf swscanf wscanf gets puts strcat wcscat wcrtomb wctob sprintf \
vsprintf vfprintf asprintf vasprintf strncpy wcsncpy strtok wcstok strdupa strndupa longjmp siglongjmp setjmp sigsetjmp alloca mallopt remove \
mktemp tmpnam tempname getwd getlogin getpass cuserid rexec rexec.af
substylewords.11.3.$(file.patterns.cpp)=$(keywordclass.gcc.unsafe)
style.cpp.11.3=$(colour.error),underlined

# Highlight special buitin functions https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
keywordclass.c99.builtin=_Exit acoshf acoshl acosh asinhf asinhl asinh atanhf atanhl atanh cabsf cabsl cabs cacosf cacoshf cacoshl cacosh cacosl cacos cargf cargl \
carg casinf casinhf casinhl casinh casinl casin catanf catanhf catanhl catanh catanl catan cbrtf cbrtl cbrt ccosf ccoshf ccoshl ccosh ccosl \
ccos cexpf cexpl cexp cimagf cimagl cimag clogf clogl clog conjf conjl conj copysignf copysignl copysign cpowf cpowl cpow cprojf cprojl cproj \
crealf creall creal csinf csinhf csinhl csinh csinl csin csqrtf csqrtl csqrt ctanf ctanhf ctanhl ctanh ctanl ctan erfcf erfcl erfc erff erfl \
erf exp2f exp2l exp2 expm1f expm1l expm1 fdimf fdiml fdim fmaf fmal fmaxf fmaxl fmax fma fminf fminl fmin hypotf hypotl hypot ilogbf ilogbl \
ilogb imaxabs isblank iswblank lgammaf lgammal lgamma llabs llrintf llrintl llrint llroundf llroundl llround log1pf log1pl log1p log2f log2l \
log2 logbf logbl logb lrintf lrintl lrint lroundf lroundl lround nearbyintf nearbyintl nearbyint nextafterf nextafterl nextafter nexttowardf \
nexttowardl nexttoward remainderf remainderl remainder remquof remquol remquo rintf rintl rint roundf roundl round scalblnf scalblnl scalbln \
scalbnf scalbnl scalbn snprintf tgammaf tgammal tgamma truncf truncl trunc vfscanf vscanf vsnprintf vsscanf \
_exit alloca bcmp bzero dcgettext dgettext dremf dreml drem exp10f exp10l exp10 ffsll ffsl ffs fprintf_unlocked \
fputs_unlocked gammaf gammal gamma gammaf_r gammal_r gamma_r gettext index isascii j0f j0l j0 j1f j1l j1 jnf jnl jn \
lgammaf_r lgammal_r lgamma_r mempcpy pow10f pow10l pow10 printf_unlocked rindex scalbf scalbl scalb signbit signbitf \
signbitl signbitd32 signbitd64 signbitd128 significandf significandl significand sincosf sincosl sincos stpncpy \
strcasecmp strdup strfmon strncasecmp strndup toascii y0f y0l y0 y1f y1l y1 ynf ynl yn
substylewords.11.4.$(file.patterns.cpp)=$(keywordclass.c99.builtin)
style.cpp.11.4=$(colour.keyword),underlined

# todo: class Members. Here: basic_string. Need to find a way to only style them after a -> :: .
#keywordclass.cpp98string=assign get_allocator at front back data c_str begin end rbegin rend empty size length max_size reserve capacity \
#shrink_to_fit clear insert erase push_back pop_back append compare replace substr copy resize swap find rfind find_first_of find_first_not_of find_last_of find_last_not_of npos

keywords.$(file.patterns.cpp)= $(keywordclass.c99) $(keywordclass.cpp.reserved.isoc11) $(keywordclass.cpp.limits) $(keywordclass.cpp.types) $(keywordclass.cpp.types.ms)
keywords2.$(file.patterns.cpp)=$(keywordclass.cpp98) $(keywordclass.cpp.reserved.isocpp98) $(keywordclass.cpp.reserved.isocpp11) 

# keywords3 is for doc comment keywords-, highlighted in style 17
#CPP doxygen ///@author
file.patterns.doxygen.langs=$(file.patterns.cpp);$(file.patterns.java)
keywordclass.doxygen=a addindex addtogroup anchor arg attention \
author b brief bug c class code date def defgroup deprecated dontinclude \
e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example \
exception f$ f[ f] file fn hideinitializer htmlinclude htmlonly if image include \
ingroup internal invariant interface latexonly li line link mainpage name namespace \
nosubgrouping note overload p page par param param[in] param[out] post pre ref \
relates remarks return retval sa section see showinitializer since skip skipline \
struct subsection test throw throws todo typedef union until var verbatim \
verbinclude version warning weakgroup $ @ \ & < > # { }
keywords3.$(file.patterns.doxygen.langs)=$(keywordclass.doxygen)

# -keywords5 is for preprocessor definitions- and will cause inactive code
# to be greyed out. This setting is a space separated list of definitions
# where a definition may be of the form NAME=VALUE or simply NAME.
# keywords5.$(file.patterns.cpp)=_MSC_VER SCI_NAMESPACE GTK_MAJOR_VERSION=2

word.characters.$(file.patterns.cpp)=,$(chars.alpha)$(chars.numeric)_#

# The position where ctrl-q inserts the comment char (Edit-> BlockComment - ctrl-q)
comment.block.at.line.start.cpp=1
comment.block.cpp=//~
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/
comment.box.start.cpp=/*
comment.box.middle.cpp= *
comment.box.end.cpp= */

# : for jQuery Selectors
autocomplete.cpp.start.characters=$(chars.alpha)$(chars.numeric)$:
autocomplete.cpp.fillups=
# .ignorecase for javascript
autocomplete.cpp.ignorecase=1
autocomplete.cpp.choose.single=0

#------ \t\n makes a calltip multiline
calltip.cpp.use.escapes=1
calltip.cpp.word.characters=$(chars.alpha)$(chars.numeric)_:
calltip.cpp.ignorecase=1
calltip.cpp.end.definition=)
calltip.cpp.parameters.start=@ (
calltip.cpp.parameters.separators=,
calltip.cpp.parameters.end=@)

api.$(file.patterns.cpp)=\
$(SciteDefaultHome)/user/languages/cpp_withdoc_05_2017.api;\
$(SciteDefaultHome)/user/languages/cpp11_withdoc_05_2017.api;
#$(SciteDefaultHome)/user/languages/c.luac.api;\


# Folds
#fold.cpp.syntax.based=0
#fold.comment=0
#fold.cpp.comment.multiline=0
#fold.cpp.comment.explicit=0
#defaults for fold.cpp.explicit.start=//{ and fold.cpp.explicit.end=//}
#  can be replaced by defining custom strings, e.g. //[ and //]
#fold.cpp.explicit.start=//[
#fold.cpp.explicit.end=//]
#if fold strings are set to something like /*{{{ and /*}}} (Origami/WinF style fold strings), enable
#  fold.cpp.explicit.anywhere, allowing explicit fold points being anywhere, not just in line comments
#fold.cpp.explicit.anywhere=1
#fold.preprocessor=1
#fold.compact=1
fold.at.else=1

file.patterns.c.except.cpp=$(file.patterns.idl);$(file.patterns.flash);$(file.patterns.java);$(file.patterns.ch)
statement.indent.$(file.patterns.c.except.cpp)=5 case default do else for if while
statement.indent.$(file.patterns.cpp)=5 case default do else for if private protected public while
statement.end.$(file.patterns.c.like)=10 ;
statement.lookback.$(file.patterns.c.like)=20
block.start.$(file.patterns.c.like)=10 {
block.end.$(file.patterns.c.like)=10 }

#styling.within.preprocessor=1
preprocessor.symbol.$(file.patterns.cpp)=#
preprocessor.start.$(file.patterns.cpp)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cpp)=else elif
preprocessor.end.$(file.patterns.cpp)=endif

keywordclass.ch=\
auto array bool break case char class complex ComplexInf ComplexNaN const continue \
default delete do double else enum export extern float for foreach goto if Inf inline int \
long namespace NaN new NULL private public register restrict return short signed sizeof \
static string_t struct switch this typedef union unsigned using void volatile wchar_t while __declspec
keywords.$(file.patterns.ch)=$(keywordclass.ch)
word.chars.ch=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.ch)=$(word.chars.cxx)
comment.block.ch=//~
#comment.block.at.line.start.ch=1
comment.stream.start.ch=/*
comment.stream.end.ch=*/
comment.box.start.ch=/*
comment.box.middle.ch= *
comment.box.end.ch= */
preprocessor.symbol.$(file.patterns.ch)=#
preprocessor.start.$(file.patterns.ch)=if ifdef ifndef
preprocessor.middle.$(file.patterns.ch)=else elif
preprocessor.end.$(file.patterns.ch)=endif

# April 2016 Arjunea / update go keywords
keywordclass.go.types=bool byte int8 uint8 rune string int16 uint16 int32 uint32 uint64 int64 \ 
float32 float64 uint int uintptr complex64 complex128 struct type chan
keywordclass.go.func=complex const real continue defer go goto fallthrough import interface \ 
len map package if falseif else return select switch case default for var range func fallthough \
break append cap close copy delete error imag make new panic print println recover defer
keywordclass.go.const=nil true false 
keywords.$(file.patterns.go)=$(keywordclass.go.types) $(keywordclass.go.func) $(keywordclass.go.const) 

keywordclass.rc= \
ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON \
BEGIN BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS \
COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX DISCARDABLE \
EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE LISTBOX LTEXT \
MENU MENUEX MENUITEM MESSAGETABLE POPUP PUSHBUTTON RADIOBUTTON \
RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 STRINGTABLE STYLE TEXTINCLUDE \
VALUE VERSION VERSIONINFO VIRTKEY
keywords.$(file.patterns.rc)=$(keywordclass.rc)

keywordclass.idl= \
aggregatable allocate appobject arrays async async_uuid auto_handle \
bindable boolean broadcast byte byte_count call_as callback char coclass code comm_status \
const context_handle context_handle_noserialize context_handle_serialize control cpp_quote custom \
decode default defaultbind defaultcollelem defaultvalue defaultvtable dispinterface displaybind dllname \
double dual enable_allocate encode endpoint entry enum error_status_t explicit_handle \
fault_status first_is float handle_t heap helpcontext helpfile helpstring helpstringcontext helpstringdll \
hidden hyper id idempotent ignore iid_as iid_is immediatebind implicit_handle import importlib in include \
in_line int __int64 __int3264 interface last_is lcid length_is library licensed local long max_is maybe message \
methods midl_pragma midl_user_allocate midl_user_free min_is module ms_union ncacn_at_dsp ncacn_dnet_nsp \
ncacn_http ncacn_ip_tcp ncacn_nb_ipx ncacn_nb_nb ncacn_nb_tcp ncacn_np ncacn_spx ncacn_vns_spp \
ncadg_ip_udp ncadg_ipx ncadg_mq ncalrpc nocode nonbrowsable noncreatable nonextensible notify \
object odl oleautomation optimize optional out out_of_line pipe pointer_default pragma properties propget \
propput propputref ptr public range readonly ref represent_as requestedit restricted retval shape short \
signed size_is small source strict_context_handle string struct switch switch_is switch_type \
transmit_as typedef uidefault union unique unsigned user_marshal usesgetlasterror uuid \
v1_enum vararg version void wchar_t wire_marshal

keywordclass.msidl=handle
keywordclass.xpidl=attribute native noscript scriptable shared wstring inout
keywords.$(file.patterns.idl)=$(keywordclass.idl) $(keywordclass.xpidl)

# moved java.

# After 10 Years..Update Oktober2016 - Actionscript 3.
keywordclass.flash=class extends implements import interface new case do while else if for in switch throw get set function \
var try catch finally while with default break continue delete return each const namespace package include use is as instanceof \
typeof add and dynamic eq false ge gt Infinity interface intrinsic le lt NaN ne not null or private public static super this true typeof \
undefined void private public internal native override protected AS3 final

keywordclass2.flash=void Null ArgumentError arguments Array Boolean Class Date DefinitionError Error EvalError Function int Math Namespace \
Number Object QName RangeError ReferenceError RegExp SecurityError String SyntaxError TypeError uint URIError \
VerifyError XML XMLList Accessibility AccessibilityProperties ActionScriptVersion AVM1Movie Bitmap BitmapData \
BitmapDataChannel BlendMode CapsStyle DisplayObject DisplayObjectContainer FrameLabel GradientType Graphics \
IBitmapDrawable InteractiveObject InterpolationMethod JointStyle LineScaleMode Loader LoaderInfo MorphShape MovieClip \
PixelSnapping Scene Shape SimpleButton SpreadMethod Sprite Stage StageAlign StageDisplayState StageQuality StageScaleMode \
SWFVersion EOFError IllegalOperationError InvalidSWFError IOError MemoryError ScriptTimeoutError StackOverflowError \
ActivityEvent AsyncErrorEvent ContextMenuEvent DataEvent ErrorEvent Event EventDispatcher EventPhase FocusEvent \
FullScreenEvent HTTPStatusEvent IEventDispatcher IMEEvent IOErrorEvent KeyboardEvent MouseEvent NetStatusEvent ProgressEvent \
SecurityErrorEvent StatusEvent SyncEvent TextEvent TimerEvent ExternalInterface BevelFilter BitmapFilter \
BitmapFilterQuality BitmapFilterType BlurFilter ColorMatrixFilter ConvolutionFilter DisplacementMapFilter \
DisplacementMapFilterMode DropShadowFilter GlowFilter GradientBevelFilter GradientGlowFilter ColorTransform Matrix \
Point Rectangle Transform Camera ID3Info Microphone Sound SoundChannel SoundLoaderContext SoundMixer SoundTransform \
Video FileFilter FileReference FileReferenceList IDynamicPropertyOutput IDynamicPropertyWriter LocalConnection \
NetConnection NetStream ObjectEncoding Responder SharedObject SharedObjectFlushStatus Socket URLLoader \
URLLoaderDataFormat URLRequest URLRequestHeader URLRequestMethod URLStream URLVariables XMLSocket \
PrintJob PrintJobOptions PrintJobOrientation ApplicationDomain Capabilities IME IMEConversionMode LoaderContext \
Security SecurityDomain SecurityPanel System AntiAliasType CSMSettings Font FontStyle FontType GridFitType \
StaticText StyleSheet TextColorType TextDisplayMode TextField TextFieldAutoSize TextFieldType TextFormat \
TextFormatAlign TextLineMetrics TextRenderer TextSnapshot ContextMenu ContextMenuBuiltInItems ContextMenuItem \
Keyboard KeyLocation Mouse ByteArray Dictionary Endian IDataInput IDataOutput IExternalizable Proxy Timer \
XMLDocument XMLNode XMLNodeType author copy default deprecated eventType example exampleText exception haxe \
inheritDoc internal link mtasc mxmlc param private return see serial serialData serialField since throws usage version langversion \
playerversion productversion

keywords.$(file.patterns.flash)=$(keywordclass.flash)
keywords2.$(file.patterns.flash)=$(keywordclass2.flash)

keywordclass.vala=if else switch case default break continue return yield for foreach in \
do while try catch finally throw

keywordclass2.vala=namespace interface class struct enum delegate signal errordomain \
construct get set value base const static var dynamic weak unowned virtual abstract \
override public protected private extern throws requires ensures yields out ref lock \
using true false null delete generic new this typeof sizeof as owned int string char bool

keywords.$(file.patterns.vala)=$(keywordclass.vala)
keywords2.$(file.patterns.vala)=$(keywordclass2.vala)

keywordclass.pike=constant enum if do for while else foreach case switch break continue \
return typeof catch class lambda import inherit static void int string float mixed object \
function program array mapping multiset
keywords.$(file.patterns.pike)=$(keywordclass.pike)

keywordclass.swift.declarations=class deinit enum extension func import init \
internal let operator private protocol public static struct subscript typealias var
keywordclass.swift.statements=break case continue default do else fallthrough \
for if in return switch where while

keywordclass.swift.expressions=as dynamicType false is nil self Self super \
true __COLUMN__ __FILE__ __FUNCTION__ __LINE__
# The contextual keywords are only keywords in particular contexts
keywordclass.swift.contextual=associativity convenience dynamic didSet final get \
infix inout lazy left mutating none nonmutating optional override postfix \
precedence prefix Protocol required right set Type unowned weak willSet

keywords.$(file.patterns.swift)=$(keywordclass.swift.declarations) \
$(keywordclass.swift.statements) $(keywordclass.swift.expressions) \
$(keywordclass.swift.contextual)

# Markers
# keywords6.$(file.patterns.c.like)=FIXME TODO XXX HACK UnresolvedMergeConflict UNDONE

#styling.within.preprocessor=1
lexer.cpp.allow.dollars=1
#lexer.cpp.track.preprocessor=1
#lexer.cpp.update.preprocessor=1

# For C# leave lexer.cpp.verbatim.strings.allow.escapes as 0 but change to 1 for Objective C
#lexer.cpp.verbatim.strings.allow.escapes=1
#lexer.cpp.triplequoted.strings=1
#lexer.cpp.hashquoted.strings=1
#lexer.cpp.backquoted.strings=1
#lexer.cpp.escape.sequence=1
#lexer.cpp.update.preprocessor=1
#lexer.cpp.escape.sequence=1

# C++ styles

# Default
style.cpp.32=$(font.default)
# White space
style.cpp.0=$(whitespace.fore),$(whitespace.back)
# Comment: /* */.
style.cpp.1=$(colour.comment.box),$(font.comment.box)
# Line Comment: //.
style.cpp.2=$(colour.comment.line),$(font.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(colour.comment.doc),$(font.comment.doc)
# Number
style.cpp.4=$(colour.number)
# Keyword used ??
style.cpp.5=$(colour.keyword)
# Identifier (everything else...) used ?
style.cpp.11=$(colour.identifier)
# Style 16 for keywords 2
style.cpp.16=$(colour.keyword2)
# Double quoted string
style.cpp.6=$(colour.string)
# Single quoted string
style.cpp.7=$(colour.char)
# UUIDs (only in IDL)
style.cpp.8=$(colour.idl)
# Preprocessor
style.cpp.9=$(colour.preproc)
# Operators
style.cpp.10=$(colour.operator)
# End of line where string is not closed
style.cpp.12=$(colour.eolstringnotclosed)
# Verbatim strings for C#
style.cpp.13=$(colour.strverbatimcnet)
# Regular expressions for JavaScript
style.cpp.14=$(colour.regexjavascript)
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(colour.doccommenttripledash)
# Comment keyword
style.cpp.17=$(colour.commentkeyword)
# Comment keyword error
style.cpp.18=$(colour.commentkeyworderr)
# Global class (Keywords4 for cpp)
style.cpp.19=$(colour.globalclass)
# Raw strings for C++0x
style.cpp.20=$(colour.cpprawstring)
# Triple-quoted strings for Vala
style.cpp.21=$(colour.valatriplequotedstring)
# Hash-quoted strings for Pike
style.cpp.22=$(colour.pikehashqoutedstring)
# Preprocessor stream comment
style.cpp.23=$(colour.preprocstreamcomment)
# Preprocessor stream doc comment
style.cpp.24=$(colour.preprocstreamdoccomment)
# User defined literals
style.cpp.25=$(colour.userdefinedliterals)
# Task Marker
style.cpp.26=$(colour.taskmarker)
# Escape sequence
style.cpp.27=$(colour.escapeseq)

# Substyles can be used for extra lists of highlighted identifiers and doc comment keywords
# Identifiers
#substyles.cpp.11=2
#substylewords.11.1.$(file.patterns.cpp)=std map string vector
#style.cpp.11.1=fore:#EE00AA
#style.cpp.75.1=$(style.cpp.75),fore:#BB6666
# Doc comment keywords
#substyles.cpp.17=1
#style.cpp.17.1=$(style.cpp.17),fore:#00AAEE
#style.cpp.81.1=$(style.cpp.81),fore:#6699AA
#substylewords.17.1.$(file.patterns.cpp)=check

# Braces are only matched in operator style
braces.cpp.style=10
ccopts=-pedantic -Os
cc=g++ $(ccopts)
ccc=gcc $(ccopts)

#~--- Commands
make.command=mingw32-make
command.compile.*.c=cmd /c $(ccc)  *.c -o $(FileName).o
command.build.*.c=cmd /c $(ccc) -c *.c -o $(FileName).o && g++ -o "$(FileName).exe" *.o -s $(libs)
command.build.*.h=cmd /c $(ccc) -c *.c -o $(FileName).o && g++ -o "$(FileName).exe" *.o -s $(libs)
command.clean.*.c=del /Q $(FileName).o $(FileName).exe >NUL
command.clean.*.h=del /Q $(FileName).o $(FileName).exe >NUL
command.go.*.c=cmd /c $(ccc) -c *.c -o $(FileName).o && g++ -o "$(FileName).exe" *.o -s $(libs) && $(FileName).exe
# To make the Go command both compile (if needed) and execute, use this setting:
#command.go.needs.*.c=gcc $(ccopts) -std=c99 $(FileNameExt) -o $(FileName)

command.compile.$(file.patterns.cpp)=$(cc)
command.build.$(file.patterns.cpp)=$(make.command)
command.clean.$(file.patterns.cpp)=$(make.command) clean
command.go.$(file.patterns.cpp)=./$(FileName)
command.go.needs.$(file.patterns.cpp)=g++ $(ccopts) $(FileNameExt) -o $(FileName)

if PLAT_WIN
	command.compile.*.rc=windres $(FileNameExt) $(FileName).o
	command.build.*.rc=$(make.command)
	command.help.$(file.patterns.cpp)=$(CurrentWord)!G:\Program Files\Microsoft Visual Studio\MSDN98\98VSa\1033\MSDNVS6A.COL
	command.help.subsystem.$(file.patterns.cpp)=4
# When maintaining old Win16 programs...
#command.help.$(file.patterns.cpp)=$(CurrentWord)!I:\msvc\help\win31wh.hlp
#command.help.subsystem.$(file.patterns.cpp)=5

if PLAT_GTK
	command.help.$(file.patterns.cpp)=man $(CurrentWord) | col -b

if PLAT_WIN
	command.build.*.cs=csc /t:winexe $(FileNameExt) /r:system.dll,system.drawing.dll
	command.go.*.cs=$(FileName)
	command.go.subsystem.*.cs=0
if PLAT_GTK
	command.build.*.cs=mcs /t:winexe $(FileNameExt) /r:System,System.Drawing
	command.go.*.cs=mono $(FileName).exe
	command.go.subsystem.*.cs=1

# ch
command.compile.*.ch=ch -n $(FileNameExt)
command.build.*.ch=ch -n  $(FileNameExt)
command.go.*.ch=ch -u $(FileNameExt)

# Actionscript
command.compile.*.as=mtasc -strict $(FileNameExt)
command.build.*.as=mtasc -strict *.as

# Vala
command.build.$(file.patterns.vala)=valac $(FileNameExt)
command.go.*.vala=./$(FileName)

# GO - can also be 6g for 64-bit systems!
command.compile.*.go=8g $(FileNameExt)
command.build.*.go=$(make.command)
command.go.*.go=./$(FileName)

# GO Code formatter
#command.name.0.*.go=gofmt
#command.0.*.go=gofmt -w $(FilePath)
#command.mode.0.*.go=filter:yes,savebefore:yes

# -- Define regexp for sidbar functions
routines.regex.c=(static\s+)?(\w+\s+)?\w+[\s\*]+\w+\s*\(((\s*\w+\s+\w+\s*)(,)?)*\)
routines.regex.h=$(routines.regex.c)
routines.regex.cpp=(static\s+)?(\w+\s+)?\w+[\s\*]+(\w+::)?\w+\s*\([\w\s\*\[\],]*\)
routines.regex.hpp=$(routines.regex.cpp)
