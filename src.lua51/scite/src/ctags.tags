!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AbandonAutomaticSave	SciTEBuffers.cxx	/^void Buffer::AbandonAutomaticSave() {$/;"	f	class:Buffer	signature:()
AbandonAutomaticSave	SciTEIO.cxx	/^void SciTEBase::AbandonAutomaticSave() {$/;"	f	class:SciTEBase	signature:()
AbsolutePath	FilePath.cxx	/^FilePath FilePath::AbsolutePath() const {$/;"	f	class:FilePath	signature:() const
Activate	SciTEIO.cxx	/^void SciTEBase::Activate(bool activeApp) {$/;"	f	class:SciTEBase	signature:(bool activeApp)
ActivateBuffer	Extender.h	/^	virtual bool ActivateBuffer(int) { return false; }$/;"	f	class:Extension	access:public	signature:(int)
ActivateBuffer	LuaExtension.cxx	/^bool LuaExtension::ActivateBuffer(int index) {$/;"	f	class:LuaExtension	signature:(int index)
ActivateBuffer	MultiplexExtension.cxx	/^bool MultiplexExtension::ActivateBuffer(int index) {$/;"	f	class:MultiplexExtension	signature:(int index)
Add	Containers.h	/^	int Add(ARG_TYPE newElement) {$/;"	f	class:TArray	access:public	signature:(ARG_TYPE newElement)
Add	SciTEBuffers.cxx	/^int BufferList::Add() {$/;"	f	class:BufferList	signature:()
AddCommand	JobQueue.cxx	/^void JobQueue::AddCommand(const std::string &command, const FilePath &directory, JobSubsystem jobType, const std::string &input, int flags) {$/;"	f	class:JobQueue	signature:(const std::string &command, const FilePath &directory, JobSubsystem jobType, const std::string &input, int flags)
AddCommand	SciTEBase.cxx	/^void SciTEBase::AddCommand(const std::string &cmd, const std::string &dir, JobSubsystem jobType, const std::string &input, int flags) {$/;"	f	class:SciTEBase	signature:(const std::string &cmd, const std::string &dir, JobSubsystem jobType, const std::string &input, int flags)
AddFileToBuffer	SciTEBuffers.cxx	/^bool SciTEBase::AddFileToBuffer(const BufferState &bufferState) {$/;"	f	class:SciTEBase	signature:(const BufferState &bufferState)
AddFileToStack	SciTEBuffers.cxx	/^void SciTEBase::AddFileToStack(const FilePath &file, SelectedRange selection, int scrollPos) {$/;"	f	class:SciTEBase	signature:(const FilePath &file, SelectedRange selection, int scrollPos)
AddFuture	SciTEBuffers.cxx	/^void BufferList::AddFuture(int index, Buffer::FutureDo fd) {$/;"	f	class:BufferList	signature:(int index, Buffer::FutureDo fd)
AddHead	Containers.h	/^	T_POSITION AddHead(ARG_TYPE newElement) {$/;"	f	class:TList	access:public	signature:(ARG_TYPE newElement)
AddSelection	SciTEBase.h	/^	enum AddSelection { addNext, addEach };$/;"	g	class:SciTEBase	access:protected
AddStyledText	Credits.cxx	/^static void AddStyledText(GUI::ScintillaWindow &wsci, const char *s, int attr) {$/;"	f	file:	signature:(GUI::ScintillaWindow &wsci, const char *s, int attr)
AddTail	Containers.h	/^	T_POSITION AddTail(ARG_TYPE newElement) {$/;"	f	class:TList	access:public	signature:(ARG_TYPE newElement)
AfterName	SciTEBase.cxx	/^static GUI::gui_char AfterName(const GUI::gui_char *s) {$/;"	f	file:	signature:(const GUI::gui_char *s)
Allocate	SciTEBuffers.cxx	/^void BufferList::Allocate(int maxSize) {$/;"	f	class:BufferList	signature:(int maxSize)
AppendIfNotPresent	StringHelpers.h	/^	void AppendIfNotPresent(const std::string &s) {$/;"	f	class:EntryMemory	access:public	signature:(const std::string &s)
AppendList	StringHelpers.h	/^	void AppendList(const std::string &s, char sep = '|') {$/;"	f	class:EntryMemory	access:public	signature:(const std::string &s, char sep = Ã)
ArrayFromStringList	StringList.cxx	/^static std::vector<char *> ArrayFromStringList(char *stringList, bool onlyLineEnds = false) {$/;"	f	file:	signature:(char *stringList, bool onlyLineEnds = false)
AsInternal	FilePath.cxx	/^const GUI::gui_char *FilePath::AsInternal() const {$/;"	f	class:FilePath	signature:() const
AsUTF8	FilePath.cxx	/^std::string FilePath::AsUTF8() const {$/;"	f	class:FilePath	signature:() const
AsVector	StringHelpers.h	/^	std::vector<std::string>AsVector() {$/;"	f	class:EntryMemory	access:public	signature:()
AskMacroList	SciTEBase.cxx	/^void SciTEBase::AskMacroList() {$/;"	f	class:SciTEBase	signature:()
AssignKey	SciTEBase.cxx	/^void SciTEBase::AssignKey(int key, int mods, int cmd) {$/;"	f	class:SciTEBase	signature:(int key, int mods, int cmd)
Association	Containers.h	/^	struct Association {$/;"	s	class:TMap	access:protected
At	StringHelpers.h	/^	std::string At(int n) const {$/;"	f	class:EntryMemory	access:public	signature:(int n) const
AtLineEnd	LuaExtension.cxx	/^	static int AtLineEnd(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
AtLineStart	LuaExtension.cxx	/^	static int AtLineStart(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
AutomaticIndentation	SciTEBase.cxx	/^void SciTEBase::AutomaticIndentation(char ch) {$/;"	f	class:SciTEBase	signature:(char ch)
BEFORE_START_T_POSITION	Containers.h	6;"	d
BackAsLong	StyleDefinition.cxx	/^long StyleDefinition::BackAsLong() const {$/;"	f	class:StyleDefinition	signature:() const
BackgroundActivities	SciTEBase.h	/^struct BackgroundActivities {$/;"	s
BaseName	FilePath.cxx	/^FilePath FilePath::BaseName() const {$/;"	f	class:FilePath	signature:() const
BookmarkAdd	SciTEBase.cxx	/^void SciTEBase::BookmarkAdd(int lineno) {$/;"	f	class:SciTEBase	signature:(int lineno)
BookmarkDelete	SciTEBase.cxx	/^void SciTEBase::BookmarkDelete(int lineno) {$/;"	f	class:SciTEBase	signature:(int lineno)
BookmarkNext	SciTEBase.cxx	/^void SciTEBase::BookmarkNext(bool forwardScan, bool select) {$/;"	f	class:SciTEBase	signature:(bool forwardScan, bool select)
BookmarkPresent	SciTEBase.cxx	/^bool SciTEBase::BookmarkPresent(int lineno) {$/;"	f	class:SciTEBase	signature:(int lineno)
BookmarkSelectAll	SciTEBase.cxx	/^void SciTEBase::BookmarkSelectAll() {$/;"	f	class:SciTEBase	signature:()
BookmarkToggle	SciTEBase.cxx	/^void SciTEBase::BookmarkToggle(int lineno) {$/;"	f	class:SciTEBase	signature:(int lineno)
BraceMatch	SciTEBase.cxx	/^void SciTEBase::BraceMatch(bool editor) {$/;"	f	class:SciTEBase	signature:(bool editor)
Buffer	SciTEBase.h	/^	Buffer() :$/;"	f	class:Buffer	access:public	signature:()
Buffer	SciTEBase.h	/^class Buffer : public RecentFile {$/;"	c	inherits:RecentFile
BufferContainsNull	SciTEIO.cxx	/^	bool BufferContainsNull() {$/;"	f	class:BufferedFile	access:public	signature:()
BufferContainsNull	SciTEIO.cxx	/^	bool BufferContainsNull() {$/;"	f	class:FileReader	access:public	signature:()
BufferList	SciTEBase.h	/^class BufferList {$/;"	c
BufferList	SciTEBuffers.cxx	/^BufferList::BufferList() : current(0), stackcurrent(0), stack(0), buffers(0), length(0), lengthVisible(0), initialised(false) {}$/;"	f	class:BufferList	signature:()
BufferState	SciTEBase.h	/^struct BufferState : public RecentFile {$/;"	s	inherits:RecentFile
BufferedFile	SciTEIO.cxx	/^	explicit BufferedFile(const FilePath &fPath) {$/;"	f	class:BufferedFile	access:public	signature:(const FilePath &fPath)
BufferedFile	SciTEIO.cxx	/^class BufferedFile {$/;"	c	file:
BuffersMenu	SciTEBuffers.cxx	/^void SciTEBase::BuffersMenu() {$/;"	f	class:SciTEBase	signature:()
CHARZ	ExportTEX.cxx	59;"	d	file:
CONTAINERS_H	Containers.h	2;"	d
COPYRIGHT_DATES	SciTE.h	14;"	d
COPYRIGHT_YEARS	SciTE.h	15;"	d
CSI	SciTEBuffers.cxx	1852;"	d	file:
CalculateColumnWidths	StripDefinition.h	/^	void CalculateColumnWidths(int widthToAllocate) {$/;"	f	class:StripDefinition	access:public	signature:(int widthToAllocate)
Call	GUI.h	/^	int Call(unsigned int msg, uptr_t wParam=0, sptr_t lParam=0) {$/;"	f	class:GUI::ScintillaWindow	access:public	signature:(unsigned int msg, uptr_t wParam=0, sptr_t lParam=0)
CallChildren	SciTEBase.cxx	/^void SciTEBase::CallChildren(unsigned int msg, uptr_t wParam, sptr_t lParam) {$/;"	f	class:SciTEBase	signature:(unsigned int msg, uptr_t wParam, sptr_t lParam)
CallFocused	SciTEBase.cxx	/^int SciTEBase::CallFocused(unsigned int msg, uptr_t wParam, sptr_t lParam) {$/;"	f	class:SciTEBase	signature:(unsigned int msg, uptr_t wParam, sptr_t lParam)
CallFocusedElseDefault	SciTEBase.cxx	/^int SciTEBase::CallFocusedElseDefault(int defaultValue, unsigned int msg, uptr_t wParam, sptr_t lParam) {$/;"	f	class:SciTEBase	signature:(int defaultValue, unsigned int msg, uptr_t wParam, sptr_t lParam)
CallNamedFunction	LuaExtension.cxx	/^static bool CallNamedFunction(const char *name) {$/;"	f	file:	signature:(const char *name)
CallNamedFunction	LuaExtension.cxx	/^static bool CallNamedFunction(const char *name, const char *arg) {$/;"	f	file:	signature:(const char *name, const char *arg)
CallNamedFunction	LuaExtension.cxx	/^static bool CallNamedFunction(const char *name, int numberArg, const char *stringArg) {$/;"	f	file:	signature:(const char *name, int numberArg, const char *stringArg)
CallNamedFunction	LuaExtension.cxx	/^static bool CallNamedFunction(const char *name, int numberArg, int numberArg2) {$/;"	f	file:	signature:(const char *name, int numberArg, int numberArg2)
CallPane	SciTEBase.cxx	/^sptr_t SciTEBase::CallPane(int destination, unsigned int msg, uptr_t wParam, sptr_t lParam) {$/;"	f	class:SciTEBase	signature:(int destination, unsigned int msg, uptr_t wParam, sptr_t lParam)
CallPointer	GUI.h	/^	int CallPointer(unsigned int msg, uptr_t wParam, void *s) {$/;"	f	class:GUI::ScintillaWindow	access:public	signature:(unsigned int msg, uptr_t wParam, void *s)
CallReturnPointer	GUI.h	/^	sptr_t CallReturnPointer(unsigned int msg, uptr_t wParam=0, sptr_t lParam=0) {$/;"	f	class:GUI::ScintillaWindow	access:public	signature:(unsigned int msg, uptr_t wParam=0, sptr_t lParam=0)
CallString	GUI.h	/^	int CallString(unsigned int msg, uptr_t wParam, const char *s) {$/;"	f	class:GUI::ScintillaWindow	access:public	signature:(unsigned int msg, uptr_t wParam, const char *s)
CanCall	GUI.h	/^	bool CanCall() const {$/;"	f	class:GUI::ScintillaWindow	access:public	signature:() const
CanMakeRoom	SciTEBuffers.cxx	/^bool SciTEBase::CanMakeRoom(bool maySaveIfDirty) {$/;"	f	class:SciTEBase	signature:(bool maySaveIfDirty)
Cancel	FileWorker.cxx	/^void FileLoader::Cancel() {$/;"	f	class:FileLoader	signature:()
Cancel	FileWorker.cxx	/^void FileStorer::Cancel() {$/;"	f	class:FileStorer	signature:()
Cancel	FileWorker.h	/^	virtual void Cancel() {$/;"	f	struct:FileWorker	access:public	signature:()
Cancel	Worker.h	/^	virtual void Cancel() {$/;"	f	struct:Worker	access:public	signature:()
CancelLoad	SciTEBuffers.cxx	/^void Buffer::CancelLoad() {$/;"	f	class:Buffer	signature:()
Cancelled	JobQueue.h	/^	long Cancelled() {$/;"	f	class:JobQueue	access:public	signature:()
Cancelling	Worker.h	/^	bool Cancelling() const {$/;"	f	struct:Worker	access:public	signature:() const
ChangeState	LuaExtension.cxx	/^	static int ChangeState(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
CharAdded	SciTEBase.cxx	/^void SciTEBase::CharAdded(int utf32) {$/;"	f	class:SciTEBase	signature:(int utf32)
CharAddedOutput	SciTEBase.cxx	/^void SciTEBase::CharAddedOutput(int ch) {$/;"	f	class:SciTEBase	signature:(int ch)
CharAt	LuaExtension.cxx	/^	static int CharAt(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
CheckMenus	SciTEBase.cxx	/^void SciTEBase::CheckMenus() {$/;"	f	class:SciTEBase	signature:()
CheckMenusClipboard	SciTEBase.cxx	/^void SciTEBase::CheckMenusClipboard() {$/;"	f	class:SciTEBase	signature:()
CheckReload	SciTEIO.cxx	/^void SciTEBase::CheckReload() {$/;"	f	class:SciTEBase	signature:()
CheckStartupScript	LuaExtension.cxx	/^static bool CheckStartupScript() {$/;"	f	file:	signature:()
Chomp	SciTEBuffers.cxx	/^static void Chomp(std::string &s, int ch) {$/;"	f	file:	signature:(std::string &s, int ch)
Clear	JobQueue.h	/^	void Clear() {$/;"	f	class:Job	access:public	signature:()
Clear	LuaExtension.cxx	/^bool LuaExtension::Clear() {$/;"	f	class:LuaExtension	signature:()
Clear	MultiplexExtension.cxx	/^bool MultiplexExtension::Clear() {$/;"	f	class:MultiplexExtension	signature:()
Clear	PropSetFile.cxx	/^void PropSetFile::Clear() {$/;"	f	class:PropSetFile	signature:()
Clear	StringList.cxx	/^void StringList::Clear() {$/;"	f	class:StringList	signature:()
ClearBeforeExecute	JobQueue.h	/^	bool ClearBeforeExecute() const {$/;"	f	class:JobQueue	access:public	signature:() const
ClearDocument	SciTEBuffers.cxx	/^void SciTEBase::ClearDocument() {$/;"	f	class:SciTEBase	signature:()
ClearJobs	JobQueue.cxx	/^void JobQueue::ClearJobs() {$/;"	f	class:JobQueue	signature:()
Close	SciTEBuffers.cxx	/^void SciTEBase::Close(bool updateUI, bool loadingSession, bool makingRoomForNew) {$/;"	f	class:SciTEBase	signature:(bool updateUI, bool loadingSession, bool makingRoomForNew)
CloseAllBuffers	SciTEBuffers.cxx	/^void SciTEBase::CloseAllBuffers(bool loadingSession) {$/;"	f	class:SciTEBase	signature:(bool loadingSession)
CloseFind	SciTEBase.h	/^	enum class CloseFind { closePrevent, closeAlways, closeOnMatch } closeFind;$/;"	c	class:Searcher	access:public
CloseTab	SciTEBuffers.cxx	/^void SciTEBase::CloseTab(int tab) {$/;"	f	class:SciTEBase	signature:(int tab)
CmpString	StringList.cxx	/^static bool CmpString(const char *a, const char *b) {$/;"	f	file:	signature:(const char *a, const char *b)
CmpStringNoCase	StringList.cxx	/^static bool CmpStringNoCase(const char *a, const char *b) {$/;"	f	file:	signature:(const char *a, const char *b)
CodingCookieValue	Cookie.cxx	/^UniMode CodingCookieValue(const char *buf, size_t length) {$/;"	f	signature:(const char *buf, size_t length)
Colour	StyleDefinition.h	/^typedef long Colour;$/;"	t
ColourFromString	StyleDefinition.cxx	/^Colour ColourFromString(const std::string &s) {$/;"	f	signature:(const std::string &s)
ColourOfProperty	SciTEProps.cxx	/^Colour ColourOfProperty(const PropSetFile &props, const char *key, Colour colourDefault) {$/;"	f	signature:(const PropSetFile &props, const char *key, Colour colourDefault)
ColourRGB	StyleDefinition.h	/^inline Colour ColourRGB(unsigned int red, unsigned int green, unsigned int blue) {$/;"	f	signature:(unsigned int red, unsigned int green, unsigned int blue)
ColourTo	StyleWriter.cxx	/^void StyleWriter::ColourTo(unsigned int pos, int chAttr) {$/;"	f	class:StyleWriter	signature:(unsigned int pos, int chAttr)
Colourize	LuaExtension.cxx	/^	void Colourize() {$/;"	f	struct:StylingContext	access:public	signature:()
ColumnWidth	StripDefinition.h	/^	ColumnWidth() : widthDesired(0), widthAllocated(0), isResizeable(false) {$/;"	f	struct:ColumnWidth	access:public	signature:()
ColumnWidth	StripDefinition.h	/^struct ColumnWidth {$/;"	s
ComboMemory	StringHelpers.h	/^typedef EntryMemory < 10 > ComboMemory;$/;"	t
CommandExecute	FilePath.cxx	/^std::string CommandExecute(const GUI::gui_char *command, const GUI::gui_char *directoryForRun) {$/;"	f	signature:(const GUI::gui_char *command, const GUI::gui_char *directoryForRun)
CommitStackSelection	SciTEBuffers.cxx	/^void BufferList::CommitStackSelection() {$/;"	f	class:BufferList	signature:()
CompareNCaseInsensitive	StringList.cxx	/^static int CompareNCaseInsensitive(const char *a, const char *b, size_t len) {$/;"	f	file:	signature:(const char *a, const char *b, size_t len)
CompareNoCase	StringHelpers.cxx	/^int CompareNoCase(const char *a, const char *b) {$/;"	f	signature:(const char *a, const char *b)
CompareString	StringList.cxx	/^	explicit CompareString(size_t searchLen_) : searchLen(searchLen_) {}$/;"	f	struct:__anon30::CompareString	access:public	signature:(size_t searchLen_)
CompareString	StringList.cxx	/^struct CompareString {$/;"	s	namespace:__anon30	file:
CompareStringInsensitive	StringList.cxx	/^	explicit CompareStringInsensitive(size_t searchLen_) : searchLen(searchLen_) {}$/;"	f	struct:__anon30::CompareStringInsensitive	access:public	signature:(size_t searchLen_)
CompareStringInsensitive	StringList.cxx	/^struct CompareStringInsensitive {$/;"	s	namespace:__anon30	file:
Complete	MatchMarker.cxx	/^bool MatchMarker::Complete() const {$/;"	f	class:MatchMarker	signature:() const
CompleteLoading	SciTEBuffers.cxx	/^void Buffer::CompleteLoading() {$/;"	f	class:Buffer	signature:()
CompleteOpen	SciTEIO.cxx	/^void SciTEBase::CompleteOpen(OpenCompletion oc) {$/;"	f	class:SciTEBase	signature:(OpenCompletion oc)
CompleteStoring	SciTEBuffers.cxx	/^void Buffer::CompleteStoring() {$/;"	f	class:Buffer	signature:()
Contains	GUI.h	/^	bool Contains(Point pt) const {$/;"	f	class:GUI::Rectangle	access:public	signature:(Point pt) const
Contains	StringHelpers.cxx	/^bool Contains(std::string const &s, char ch) {$/;"	f	signature:(std::string const &s, char ch)
Context	LuaExtension.cxx	/^	static StylingContext *Context(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
ContextMenu	SciTEBase.cxx	/^void SciTEBase::ContextMenu(GUI::ScintillaWindow &wSource, GUI::Point pt, GUI::Window wCmd) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &wSource, GUI::Point pt, GUI::Window wCmd)
Continue	MatchMarker.cxx	/^void MatchMarker::Continue() {$/;"	f	class:MatchMarker	signature:()
ContinueCallTip	SciTEBase.cxx	/^void SciTEBase::ContinueCallTip() {$/;"	f	class:SciTEBase	signature:()
ContinueMacroList	SciTEBase.cxx	/^void SciTEBase::ContinueMacroList(const char *stext) {$/;"	f	class:SciTEBase	signature:(const char *stext)
ControlIDOfCommand	SciTEBase.cxx	/^int ControlIDOfCommand(unsigned long wParam) {$/;"	f	signature:(unsigned long wParam)
ConvertIndentation	SciTEBase.cxx	/^void SciTEBase::ConvertIndentation(int tabSize, int useTabs) {$/;"	f	class:SciTEBase	signature:(int tabSize, int useTabs)
CookieValue	Cookie.cxx	/^static UniMode CookieValue(const std::string &s) {$/;"	f	file:	signature:(const std::string &s)
CopyAsRTF	SciTEBase.h	/^	virtual void CopyAsRTF() {}$/;"	f	class:SciTEBase	access:protected	signature:()
CopyPath	SciTEBase.h	/^	virtual void CopyPath() {}$/;"	f	class:SciTEBase	access:protected	signature:()
CountBackgroundActivities	SciTEBuffers.cxx	/^BackgroundActivities BufferList::CountBackgroundActivities() const {$/;"	f	class:BufferList	signature:() const
CountLineEnds	SciTEIO.cxx	/^void SciTEBase::CountLineEnds(int &linesCR, int &linesLF, int &linesCRLF) {$/;"	f	class:SciTEBase	signature:(int &linesCR, int &linesLF, int &linesCRLF)
CreateBuffers	SciTEBuffers.cxx	/^void SciTEBase::CreateBuffers() {$/;"	f	class:SciTEBase	signature:()
CreateIndentation	SciTEBase.cxx	/^static std::string CreateIndentation(int indent, int tabSize, bool insertSpaces) {$/;"	f	file:	signature:(int indent, int tabSize, bool insertSpaces)
Created	GUI.h	/^	bool Created() const {$/;"	f	class:GUI::Window	access:public	signature:() const
Current	LuaExtension.cxx	/^	static int Current(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
Current	SciTEBuffers.cxx	/^int BufferList::Current() const {$/;"	f	class:BufferList	signature:() const
CurrentBuffer	SciTEBase.h	/^	Buffer *CurrentBuffer() {$/;"	f	class:SciTEBase	access:protected	signature:()
CurrentBuffer	SciTEBuffers.cxx	/^Buffer *BufferList::CurrentBuffer() {$/;"	f	class:BufferList	signature:()
CurrentBufferConst	SciTEBase.h	/^	const Buffer *CurrentBufferConst() const {$/;"	f	class:SciTEBase	access:protected	signature:() const
CurrentBufferConst	SciTEBuffers.cxx	/^const Buffer *BufferList::CurrentBufferConst() const {$/;"	f	class:BufferList	signature:() const
CurrentWordHighlight	SciTEBase.h	/^	CurrentWordHighlight() {$/;"	f	struct:CurrentWordHighlight	access:public	signature:()
CurrentWordHighlight	SciTEBase.h	/^struct CurrentWordHighlight {$/;"	s
DecodeMessage	SciTEBuffers.cxx	/^static int DecodeMessage(const char *cdoc, std::string &sourcePath, int format, int &column) {$/;"	f	file:	signature:(const char *cdoc, std::string &sourcePath, int format, int &column)
DefineMarker	SciTEProps.cxx	/^void SciTEBase::DefineMarker(int marker, int markerType, Colour fore, Colour back, Colour backSelected) {$/;"	f	class:SciTEBase	signature:(int marker, int markerType, Colour fore, Colour back, Colour backSelected)
DeleteFileStackMenu	SciTEBuffers.cxx	/^void SciTEBase::DeleteFileStackMenu() {$/;"	f	class:SciTEBase	signature:()
Directory	FilePath.cxx	/^FilePath FilePath::Directory() const {$/;"	f	class:FilePath	signature:() const
DiscoverEOLSetting	SciTEIO.cxx	/^void SciTEBase::DiscoverEOLSetting() {$/;"	f	class:SciTEBase	signature:()
DiscoverIndentSetting	SciTEIO.cxx	/^void SciTEBase::DiscoverIndentSetting() {$/;"	f	class:SciTEBase	signature:()
DiscoverLanguage	SciTEIO.cxx	/^std::string SciTEBase::DiscoverLanguage() {$/;"	f	class:SciTEBase	signature:()
DisplayAround	SciTEBuffers.cxx	/^void SciTEBase::DisplayAround(const RecentFile &rf) {$/;"	f	class:SciTEBase	signature:(const RecentFile &rf)
DoMenuCommand	SciTEBase.cxx	/^void SciTEBase::DoMenuCommand(int cmdID) {$/;"	f	class:SciTEBase	signature:(int cmdID)
DoReplaceAll	SciTEBase.cxx	/^int SciTEBase::DoReplaceAll(bool inSelection) {$/;"	f	class:SciTEBase	signature:(bool inSelection)
DocumentModified	SciTEBuffers.cxx	/^void Buffer::DocumentModified() {$/;"	f	class:Buffer	signature:()
Duration	FileWorker.cxx	/^double FileWorker::Duration() {$/;"	f	class:FileWorker	signature:()
ELEMENTS	GUI.h	13;"	d
EXTENDER_H	Extender.h	9;"	d
ElapsedTime	GUI.h	/^class ElapsedTime {$/;"	c	namespace:GUI
ElementAt	Containers.h	/^	TYPE& ElementAt(int nIndex) {$/;"	f	class:TArray	access:public	signature:(int nIndex)
EliminateDuplicateWords	SciTEBase.cxx	/^void SciTEBase::EliminateDuplicateWords(std::string &words) {$/;"	f	class:SciTEBase	signature:(std::string &words)
EncodeString	SciTEBase.cxx	/^std::string SciTEBase::EncodeString(const std::string &s) {$/;"	f	class:SciTEBase	signature:(const std::string &s)
EndMatches	FilePath.cxx	/^static bool EndMatches(GUI::gui_string const &s, GUI::gui_string const &end) {$/;"	f	file:	signature:(GUI::gui_string const &s, GUI::gui_string const &end)
EndStackedTabbing	SciTEBuffers.cxx	/^void SciTEBase::EndStackedTabbing() {$/;"	f	class:SciTEBase	signature:()
EndStyling	LuaExtension.cxx	/^	static int EndStyling(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
EndsWith	StringHelpers.cxx	/^bool EndsWith(GUI::gui_string const &s, GUI::gui_string const &end) {$/;"	f	signature:(GUI::gui_string const &s, GUI::gui_string const &end)
EnsureAllChildrenVisible	SciTEBase.cxx	/^void SciTEBase::EnsureAllChildrenVisible(int line, int level) {$/;"	f	class:SciTEBase	signature:(int line, int level)
EnsureData	SciTEIO.cxx	/^	void EnsureData() {$/;"	f	class:BufferedFile	file:	access:private	signature:()
EnsureFinalNewLine	SciTEIO.cxx	/^void SciTEBase::EnsureFinalNewLine() {$/;"	f	class:SciTEBase	signature:()
EnsureRangeVisible	SciTEBase.cxx	/^void SciTEBase::EnsureRangeVisible(GUI::ScintillaWindow &win, int posStart, int posEnd, bool enforcePolicy) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, int posStart, int posEnd, bool enforcePolicy)
EntryMemory	StringHelpers.h	/^class EntryMemory {$/;"	c
EnumProperties	SciTEBase.cxx	/^void SciTEBase::EnumProperties(const char *propkind) {$/;"	f	class:SciTEBase	signature:(const char *propkind)
EqualCaseInsensitive	StringHelpers.cxx	/^bool EqualCaseInsensitive(const char *a, const char *b) {$/;"	f	signature:(const char *a, const char *b)
EscapeFilePathsForMenu	SciTEBuffers.cxx	/^static void EscapeFilePathsForMenu(GUI::gui_string &path) {$/;"	f	file:	signature:(GUI::gui_string &path)
Evaluate	PropSetFile.cxx	/^std::string PropSetFile::Evaluate(const char *key) const {$/;"	f	class:PropSetFile	signature:(const char *key) const
Execute	FileWorker.cxx	/^void FileLoader::Execute() {$/;"	f	class:FileLoader	signature:()
Execute	FileWorker.cxx	/^void FileStorer::Execute() {$/;"	f	class:FileStorer	signature:()
Execute	SciTEBase.cxx	/^void SciTEBase::Execute() {$/;"	f	class:SciTEBase	signature:()
Execute	Worker.h	/^	virtual void Execute() {}$/;"	f	struct:Worker	access:public	signature:()
ExecuteMacroCommand	SciTEBase.cxx	/^void SciTEBase::ExecuteMacroCommand(const char *command) {$/;"	f	class:SciTEBase	signature:(const char *command)
Exhausted	SciTEIO.cxx	/^	bool Exhausted() const {$/;"	f	class:BufferedFile	access:public	signature:() const
Exists	FilePath.cxx	/^bool FilePath::Exists() const {$/;"	f	class:FilePath	signature:() const
Exists	PropSetFile.cxx	/^bool PropSetFile::Exists(const char *key) const {$/;"	f	class:PropSetFile	signature:(const char *key) const
Exists	SciTEIO.cxx	/^bool SciTEBase::Exists(const GUI::gui_char *dir, const GUI::gui_char *path, FilePath *resultPath) {$/;"	f	class:SciTEBase	signature:(const GUI::gui_char *dir, const GUI::gui_char *path, FilePath *resultPath)
Expand	PropSetFile.cxx	/^std::string PropSetFile::Expand(const std::string &withVars, int maxExpands) const {$/;"	f	class:PropSetFile	signature:(const std::string &withVars, int maxExpands) const
ExpandAllInPlace	PropSetFile.cxx	/^static int ExpandAllInPlace(const PropSetFile &props, std::string &withVars, int maxExpands, const VarChain &blankVars = VarChain()) {$/;"	f	file:	signature:(const PropSetFile &props, std::string &withVars, int maxExpands, const VarChain &blankVars = VarChain())
ExpandFolds	SciTEBase.cxx	/^void SciTEBase::ExpandFolds(int line, bool expand, int level) {$/;"	f	class:SciTEBase	signature:(int line, bool expand, int level)
Extension	Extender.h	/^class Extension {$/;"	c
Extension	FilePath.cxx	/^FilePath FilePath::Extension() const {$/;"	f	class:FilePath	signature:() const
ExtensionAPI	Extender.h	/^class ExtensionAPI {$/;"	c
ExtensionFileName	SciTEProps.cxx	/^std::string SciTEBase::ExtensionFileName() const {$/;"	f	class:SciTEBase	signature:() const
ExtractLine	Cookie.cxx	/^std::string ExtractLine(const char *buf, size_t length) {$/;"	f	signature:(const char *buf, size_t length)
FailedSaveMessageBox	SciTEBase.cxx	/^void SciTEBase::FailedSaveMessageBox(const FilePath &filePathSaving) {$/;"	f	class:SciTEBase	signature:(const FilePath &filePathSaving)
FileLoader	FileWorker.cxx	/^FileLoader::FileLoader(WorkerListener *pListener_, ILoader *pLoader_, const FilePath &path_, size_t size_, FILE *fp_) :$/;"	f	class:FileLoader	signature:(WorkerListener *pListener_, ILoader *pLoader_, const FilePath &path_, size_t size_, FILE *fp_)
FileLoader	FileWorker.h	/^class FileLoader : public FileWorker {$/;"	c	inherits:FileWorker
FileNameExt	SciTEBase.h	/^	FilePath FileNameExt() const {$/;"	f	class:SciTEBase	access:protected	signature:() const
FilePath	FilePath.cxx	/^FilePath::FilePath(FilePath const &directory, FilePath const &name) {$/;"	f	class:FilePath	signature:(FilePath const &directory, FilePath const &name)
FilePath	FilePath.cxx	/^FilePath::FilePath(const GUI::gui_char *fileName_) : fileName(fileName_ ? fileName_ : GUI_TEXT("")) {}$/;"	f	class:FilePath	signature:(const GUI::gui_char *fileName_)
FilePath	FilePath.cxx	/^FilePath::FilePath(const GUI::gui_string &fileName_) : fileName(fileName_) {}$/;"	f	class:FilePath	signature:(const GUI::gui_string &fileName_)
FilePath	FilePath.h	/^class FilePath {$/;"	c
FilePathSet	FilePath.h	/^typedef std::vector<FilePath> FilePathSet;$/;"	t
FileReader	SciTEIO.cxx	/^	FileReader(const FilePath &fPath, bool caseSensitive_) {$/;"	f	class:FileReader	access:public	signature:(const FilePath &fPath, bool caseSensitive_)
FileReader	SciTEIO.cxx	/^class FileReader {$/;"	c	file:
FileStorer	FileWorker.cxx	/^FileStorer::FileStorer(WorkerListener *pListener_, const char *documentBytes_, const FilePath &path_,$/;"	f	class:FileStorer	signature:(WorkerListener *pListener_, const char *documentBytes_, const FilePath &path_, size_t size_, FILE *fp_, UniMode unicodeMode_, bool visibleProgress_)
FileStorer	FileWorker.h	/^class FileStorer : public FileWorker {$/;"	c	inherits:FileWorker
FileWorker	FileWorker.cxx	/^FileWorker::FileWorker(WorkerListener *pListener_, const FilePath &path_, size_t size_, FILE *fp_) :$/;"	f	class:FileWorker	signature:(WorkerListener *pListener_, const FilePath &path_, size_t size_, FILE *fp_)
FileWorker	FileWorker.h	/^struct FileWorker : public Worker {$/;"	s	inherits:Worker
Fill	StyleWriter.cxx	/^void TextReader::Fill(int position) {$/;"	f	class:TextReader	signature:(int position)
FillFunctionDefinition	SciTEBase.cxx	/^void SciTEBase::FillFunctionDefinition(int pos \/*= -1*\/) {$/;"	f	class:SciTEBase	signature:(int pos )
FilterFromString	PropSetFile.cxx	/^static std::set<std::string> FilterFromString(const std::string &values) {$/;"	f	file:	signature:(const std::string &values)
Finalise	LuaExtension.cxx	/^bool LuaExtension::Finalise() {$/;"	f	class:LuaExtension	signature:()
Finalise	MultiplexExtension.cxx	/^bool MultiplexExtension::Finalise() {$/;"	f	class:MultiplexExtension	signature:()
Finalise	SciTEBase.cxx	/^void SciTEBase::Finalise() {$/;"	f	class:SciTEBase	signature:()
Find	Containers.h	/^	T_POSITION Find(ARG_TYPE searchValue, T_POSITION startAfter = (T_POSITION)0) const {$/;"	f	class:TList	access:public	signature:(ARG_TYPE searchValue, T_POSITION startAfter = (T_POSITION)0) const
FindCaseInsensitive	ExportRTF.cxx	/^static size_t FindCaseInsensitive(const std::vector<std::string> &values, const std::string &s) {$/;"	f	file:	signature:(const std::vector<std::string> &values, const std::string &s)
FindConstant	IFaceTable.cxx	/^int IFaceTable::FindConstant(const char *name) {$/;"	f	class:IFaceTable	signature:(const char *name)
FindControl	StripDefinition.h	/^	UserControl *FindControl(int control) {$/;"	f	class:StripDefinition	access:public	signature:(int control)
FindFunction	IFaceTable.cxx	/^int IFaceTable::FindFunction(const char *name) {$/;"	f	class:IFaceTable	signature:(const char *name)
FindFunctionByConstantName	IFaceTable.cxx	/^int IFaceTable::FindFunctionByConstantName(const char *name) {$/;"	f	class:IFaceTable	signature:(const char *name)
FindHasText	SciTEBase.cxx	/^bool SciTEBase::FindHasText() const {$/;"	f	class:SciTEBase	signature:() const
FindInTarget	SciTEBase.cxx	/^int SciTEBase::FindInTarget(std::string findWhatText, int startPosition, int endPosition) {$/;"	f	class:SciTEBase	signature:(std::string findWhatText, int startPosition, int endPosition)
FindIndex	Containers.h	/^	T_POSITION FindIndex(int nIndex) const {$/;"	f	class:TList	access:public	signature:(int nIndex) const
FindLanguageProperty	SciTEProps.cxx	/^std::string SciTEBase::FindLanguageProperty(const char *pattern, const char *defaultValue) {$/;"	f	class:SciTEBase	signature:(const char *pattern, const char *defaultValue)
FindMatchingBracePosition	SciTEBase.cxx	/^bool SciTEBase::FindMatchingBracePosition(bool editor, int &braceAtCaret, int &braceOpposite, bool sloppy) {$/;"	f	class:SciTEBase	signature:(bool editor, int &braceAtCaret, int &braceOpposite, bool sloppy)
FindMatchingPreprocCondPosition	SciTEBase.cxx	/^bool SciTEBase::FindMatchingPreprocCondPosition($/;"	f	class:SciTEBase	signature:( bool isForward, int &mppcAtCaret, int &mppcMatch)
FindMatchingPreprocessorCondition	SciTEBase.cxx	/^bool SciTEBase::FindMatchingPreprocessorCondition($/;"	f	class:SciTEBase	signature:( int &curLine, int direction, int condEnd1, int condEnd2)
FindNext	SciTEBase.cxx	/^int SciTEBase::FindNext(bool reverseDirection, bool showWarnings, bool allowRegExp) {$/;"	f	class:SciTEBase	signature:(bool reverseDirection, bool showWarnings, bool allowRegExp)
FindOpenXmlTag	SciTEBase.cxx	/^std::string SciTEBase::FindOpenXmlTag(const char sel[], int nSize) {$/;"	f	class:SciTEBase	signature:(const char sel[], int nSize)
FindProperty	IFaceTable.cxx	/^int IFaceTable::FindProperty(const char *name) {$/;"	f	class:IFaceTable	signature:(const char *name)
FindReplaceAdvanced	SciTEBase.cxx	/^bool SciTEBase::FindReplaceAdvanced() const {$/;"	f	class:SciTEBase	signature:() const
FinishedFuture	SciTEBuffers.cxx	/^void BufferList::FinishedFuture(int index, Buffer::FutureDo fd) {$/;"	f	class:BufferList	signature:(int index, Buffer::FutureDo fd)
FinishedJob	Worker.h	/^	bool FinishedJob() const {$/;"	f	struct:Worker	access:public	signature:() const
FixName	FilePath.cxx	/^void FilePath::FixName() {$/;"	f	class:FilePath	signature:()
FlagFromCmd	SciTEBase.cxx	/^bool &Searcher::FlagFromCmd(int cmd) {$/;"	f	class:Searcher	signature:(int cmd)
Flush	StyleWriter.cxx	/^void StyleWriter::Flush() {$/;"	f	class:StyleWriter	signature:()
FoldAll	SciTEBase.cxx	/^void SciTEBase::FoldAll() {$/;"	f	class:SciTEBase	signature:()
FoldChanged	SciTEBase.cxx	/^void SciTEBase::FoldChanged(int line, int levelNow, int levelPrev) {$/;"	f	class:SciTEBase	signature:(int line, int levelNow, int levelPrev)
ForeAsLong	StyleDefinition.cxx	/^long StyleDefinition::ForeAsLong() const {$/;"	f	class:StyleDefinition	signature:() const
Forward	LuaExtension.cxx	/^	static int Forward(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
Forward	LuaExtension.cxx	/^	void Forward() {$/;"	f	struct:StylingContext	access:public	signature:()
ForwardPropertyToEditor	SciTEProps.cxx	/^void SciTEBase::ForwardPropertyToEditor(const char *key) {$/;"	f	class:SciTEBase	signature:(const char *key)
ForwardSetState	LuaExtension.cxx	/^	static int ForwardSetState(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
FractionalSize	StyleDefinition.cxx	/^int StyleDefinition::FractionalSize() const {$/;"	f	class:StyleDefinition	signature:() const
FreeAssoc	Containers.h	/^	void FreeAssoc(Association* pAssoc) {$/;"	f	class:TMap	access:protected	signature:(Association* pAssoc)
FreeNode	Containers.h	/^	void FreeNode(Node*pNode) {$/;"	f	class:TList	access:protected	signature:(Node*pNode)
FutureDo	SciTEBase.h	/^	enum FutureDo { fdNone=0, fdFinishSave=1 } futureDo;$/;"	g	class:Buffer	access:public
GUI	GUI.h	/^namespace GUI {$/;"	n
GUI_H	GUI.h	11;"	d
GUI_TEXT	GUI.h	57;"	d
GUI_TEXT	GUI.h	66;"	d
GenericPropertiesFile	PropSetFile.cxx	/^static bool GenericPropertiesFile(const FilePath &filename) {$/;"	f	file:	signature:(const FilePath &filename)
GetAbbrevPropertiesFileName	SciTEProps.cxx	/^FilePath SciTEBase::GetAbbrevPropertiesFileName() {$/;"	f	class:SciTEBase	signature:()
GetAssocAt	Containers.h	/^	Association* GetAssocAt(ARG_KEY key, unsigned int& nHash) {$/;"	f	class:TMap	access:protected	signature:(ARG_KEY key, unsigned int& nHash)
GetAt	Containers.h	/^	TYPE GetAt(T_POSITION position) const {$/;"	f	class:TList	access:public	signature:(T_POSITION position) const
GetAt	Containers.h	/^	TYPE GetAt(int nIndex) const {$/;"	f	class:TArray	access:public	signature:(int nIndex) const
GetAt	Containers.h	/^	TYPE& GetAt(T_POSITION position) {$/;"	f	class:TList	access:public	signature:(T_POSITION position)
GetCTag	SciTEBase.cxx	/^std::string SciTEBase::GetCTag() {$/;"	f	class:SciTEBase	signature:()
GetCaretInLine	SciTEBase.cxx	/^int SciTEBase::GetCaretInLine() {$/;"	f	class:SciTEBase	signature:()
GetClientRectangle	SciTEBase.cxx	/^GUI::Rectangle SciTEBase::GetClientRectangle() {$/;"	f	class:SciTEBase	signature:()
GetConstantName	IFaceTable.cxx	/^int IFaceTable::GetConstantName(int value, char *nameOut, unsigned nameBufferLen, const char *prefix) {$/;"	f	class:IFaceTable	signature:(int value, char *nameOut, unsigned nameBufferLen, const char *prefix)
GetCount	Containers.h	/^	int GetCount() const {$/;"	f	class:TList	access:public	signature:() const
GetCount	Containers.h	/^	int GetCount() const {$/;"	f	class:TMap	access:public	signature:() const
GetCurrentLine	SciTEBase.cxx	/^std::string SciTEBase::GetCurrentLine() {$/;"	f	class:SciTEBase	signature:()
GetCurrentLineNumber	SciTEBase.cxx	/^int SciTEBase::GetCurrentLineNumber() {$/;"	f	class:SciTEBase	signature:()
GetCurrentScrollPosition	SciTEBase.cxx	/^int SciTEBase::GetCurrentScrollPosition() {$/;"	f	class:SciTEBase	signature:()
GetDefaultPropertiesFileName	SciTEProps.cxx	/^FilePath SciTEBase::GetDefaultPropertiesFileName() {$/;"	f	class:SciTEBase	signature:()
GetDirectoryPropertiesFileName	SciTEProps.cxx	/^FilePath SciTEBase::GetDirectoryPropertiesFileName() {$/;"	f	class:SciTEBase	signature:()
GetDocumentAt	SciTEBuffers.cxx	/^sptr_t SciTEBase::GetDocumentAt(int index) {$/;"	f	class:SciTEBase	signature:(int index)
GetDocumentByName	SciTEBuffers.cxx	/^int BufferList::GetDocumentByName(const FilePath &filename, bool excludeCurrent) {$/;"	f	class:BufferList	signature:(const FilePath &filename, bool excludeCurrent)
GetDocumentByWorker	SciTEBuffers.cxx	/^int BufferList::GetDocumentByWorker(const FileWorker *pFileWorker) const {$/;"	f	class:BufferList	signature:(const FileWorker *pFileWorker) const
GetExpandedString	PropSetFile.cxx	/^std::string PropSetFile::GetExpandedString(const char *key) const {$/;"	f	class:PropSetFile	signature:(const char *key) const
GetFileLength	FilePath.cxx	/^long long FilePath::GetFileLength() const {$/;"	f	class:FilePath	signature:() const
GetFileNameProperty	SciTEProps.cxx	/^std::string SciTEBase::GetFileNameProperty(const char *name) {$/;"	f	class:SciTEBase	signature:(const char *name)
GetFilePosition	SciTEBuffers.cxx	/^RecentFile SciTEBase::GetFilePosition() {$/;"	f	class:SciTEBase	signature:()
GetFirst	PropSetFile.cxx	/^bool PropSetFile::GetFirst(const char *&key, const char *&val) {$/;"	f	class:PropSetFile	signature:(const char *&key, const char *&val)
GetFullLine	PropSetFile.cxx	/^static bool GetFullLine(const char *&fpc, size_t &lenData, char *s, size_t len) {$/;"	f	file:	signature:(const char *&fpc, size_t &lenData, char *s, size_t len)
GetHashTableSize	Containers.h	/^	unsigned int GetHashTableSize() const { $/;"	f	class:TMap	access:public	signature:() const
GetHead	Containers.h	/^	TYPE GetHead() const {$/;"	f	class:TList	access:public	signature:() const
GetHead	Containers.h	/^	TYPE& GetHead() {$/;"	f	class:TList	access:public	signature:()
GetHeadPosition	Containers.h	/^	T_POSITION GetHeadPosition() const { $/;"	f	class:TList	access:public	signature:() const
GetHexaDigit	StringHelpers.cxx	/^static int GetHexaDigit(char ch) {$/;"	f	file:	signature:(char ch)
GetID	GUI.h	/^	MenuID GetID() const {$/;"	f	class:GUI::Menu	access:public	signature:() const
GetID	GUI.h	/^	WindowID GetID() const {$/;"	f	class:GUI::Window	access:public	signature:() const
GetID	SciTEBase.h	/^	GUI::WindowID GetID() const { return wSciTE.GetID(); }$/;"	f	class:SciTEBase	access:public	signature:() const
GetIndentState	SciTEBase.cxx	/^IndentationStatus SciTEBase::GetIndentState(int line) {$/;"	f	class:SciTEBase	signature:(int line)
GetInstance	SciTEBase.cxx	/^uptr_t SciTEBase::GetInstance() {$/;"	f	class:SciTEBase	signature:()
GetInt	PropSetFile.cxx	/^int PropSetFile::GetInt(const char *key, int defaultValue) const {$/;"	f	class:PropSetFile	signature:(const char *key, int defaultValue) const
GetLine	SciTEBase.cxx	/^std::string SciTEBase::GetLine(GUI::ScintillaWindow &win, int line) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, int line)
GetLine	SciTEBase.cxx	/^void SciTEBase::GetLine(char *text, int sizeText, int line) {$/;"	f	class:SciTEBase	signature:(char *text, int sizeText, int line)
GetLine	StyleWriter.cxx	/^int TextReader::GetLine(int position) {$/;"	f	class:TextReader	signature:(int position)
GetLineIndentPosition	SciTEBase.cxx	/^int SciTEBase::GetLineIndentPosition(int line) {$/;"	f	class:SciTEBase	signature:(int line)
GetLineIndentation	SciTEBase.cxx	/^int SciTEBase::GetLineIndentation(int line) {$/;"	f	class:SciTEBase	signature:(int line)
GetLineLength	SciTEBase.cxx	/^int SciTEBase::GetLineLength(int line) {$/;"	f	class:SciTEBase	signature:(int line)
GetLinePartsInStyle	SciTEBase.cxx	/^std::vector<std::string> SciTEBase::GetLinePartsInStyle(int line, const StyleAndWords &saw) {$/;"	f	class:SciTEBase	signature:(int line, const StyleAndWords &saw)
GetLineState	StyleWriter.cxx	/^int TextReader::GetLineState(int line) {$/;"	f	class:TextReader	signature:(int line)
GetLocalPropertiesFileName	SciTEProps.cxx	/^FilePath SciTEBase::GetLocalPropertiesFileName() {$/;"	f	class:SciTEBase	signature:()
GetLongLong	PropSetFile.cxx	/^long long PropSetFile::GetLongLong(const char *key, long long defaultValue) const {$/;"	f	class:PropSetFile	signature:(const char *key, long long defaultValue) const
GetMatch	StringList.cxx	/^	std::string GetMatch(std::vector<char *>::iterator start, std::vector<char *>::iterator end, const char *wordStart, const std::string &wordCharacters, int wordIndex, Compare comp) {$/;"	f	namespace:__anon30	signature:(std::vector<char *>::iterator start, std::vector<char *>::iterator end, const char *wordStart, const std::string &wordCharacters, int wordIndex, Compare comp)
GetMatches	StringList.cxx	/^static std::string GetMatches(std::vector<char *>::iterator start, std::vector<char *>::iterator end, const char *wordStart, char otherSeparator, bool exactLen, Compare comp) {$/;"	f	file:	signature:(std::vector<char *>::iterator start, std::vector<char *>::iterator end, const char *wordStart, char otherSeparator, bool exactLen, Compare comp)
GetMenuCommandAsInt	SciTEProps.cxx	/^int SciTEBase::GetMenuCommandAsInt(std::string commandName) {$/;"	f	class:SciTEBase	signature:(std::string commandName)
GetNearestWord	StringList.cxx	/^std::string StringList::GetNearestWord(const char *wordStart, size_t searchLen, bool ignoreCase, const std::string &wordCharacters, int wordIndex) {$/;"	f	class:StringList	signature:(const char *wordStart, size_t searchLen, bool ignoreCase, const std::string &wordCharacters, int wordIndex)
GetNearestWords	SciTEBase.cxx	/^std::string SciTEBase::GetNearestWords(const char *wordStart, size_t searchLen,$/;"	f	class:SciTEBase	signature:(const char *wordStart, size_t searchLen, const char *separators, bool ignoreCase , bool exactLen )
GetNearestWords	StringList.cxx	/^std::string StringList::GetNearestWords($/;"	f	class:StringList	signature:( const char *wordStart, size_t searchLen, bool ignoreCase, char otherSeparator , bool exactLen )
GetNewExpandString	PropSetFile.cxx	/^std::string PropSetFile::GetNewExpandString(const char *keybase, const char *filename) {$/;"	f	class:PropSetFile	signature:(const char *keybase, const char *filename)
GetNext	Containers.h	/^	TYPE GetNext(T_POSITION& rPosition) const { \/\/ return *Position++$/;"	f	class:TList	access:public	signature:(T_POSITION& rPosition) const
GetNext	Containers.h	/^	TYPE& GetNext(T_POSITION& rPosition) { \/\/ return *Position++$/;"	f	class:TList	access:public	signature:(T_POSITION& rPosition)
GetNext	PropSetFile.cxx	/^bool PropSetFile::GetNext(const char *&key, const char *&val) {$/;"	f	class:PropSetFile	signature:(const char *&key, const char *&val)
GetNextAssoc	Containers.h	/^	void GetNextAssoc(T_POSITION& rNextPosition, KEY& rKey, VALUE& rValue) const {$/;"	f	class:TMap	access:public	signature:(T_POSITION& rNextPosition, KEY& rKey, VALUE& rValue) const
GetNextChar	LuaExtension.cxx	/^	void GetNextChar() {$/;"	f	struct:StylingContext	access:public	signature:()
GetNextPropItem	SciTEProps.cxx	/^const char *SciTEBase::GetNextPropItem($/;"	f	class:SciTEBase	signature:( const char *pStart, char *pPropItem, int maxLen)
GetPrev	Containers.h	/^	TYPE GetPrev(T_POSITION& rPosition) const { \/\/ return *Position--$/;"	f	class:TList	access:public	signature:(T_POSITION& rPosition) const
GetPrev	Containers.h	/^	TYPE& GetPrev(T_POSITION& rPosition) { \/\/ return *Position--$/;"	f	class:TList	access:public	signature:(T_POSITION& rPosition)
GetPropertyInt	LuaExtension.cxx	/^static int GetPropertyInt(const char *propName) {$/;"	f	file:	signature:(const char *propName)
GetRTFNextControl	ExportRTF.cxx	/^static void GetRTFNextControl(const char **style, char *control) {$/;"	f	file:	signature:(const char **style, char *control)
GetRTFStyleChange	ExportRTF.cxx	/^static std::string GetRTFStyleChange(const char *last, const char *current) { \/\/ \\f0\\fs20\\cf0\\highlight0\\b0\\i0$/;"	f	file:	signature:(const char *last, const char *current)
GetRange	SciTEBase.cxx	/^void SciTEBase::GetRange(GUI::ScintillaWindow &win, int start, int end, char *text) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, int start, int end, char *text)
GetRangeInUIEncoding	SciTEBase.cxx	/^std::string SciTEBase::GetRangeInUIEncoding(GUI::ScintillaWindow &win, int selStart, int selEnd) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, int selStart, int selEnd)
GetRangeString	SciTEBase.cxx	/^std::string SciTEBase::GetRangeString(GUI::ScintillaWindow &win, int selStart, int selEnd) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, int selStart, int selEnd)
GetSelectedRange	SciTEBase.cxx	/^SelectedRange SciTEBase::GetSelectedRange() {$/;"	f	class:SciTEBase	signature:()
GetSelection	SciTEBase.cxx	/^Sci_CharacterRange SciTEBase::GetSelection() {$/;"	f	class:SciTEBase	signature:()
GetSize	Containers.h	/^	int GetSize() const {$/;"	f	class:TArray	access:public	signature:() const
GetStartPosition	Containers.h	/^	T_POSITION GetStartPosition() const { $/;"	f	class:TMap	access:public	signature:() const
GetStartSegment	StyleWriter.h	/^	unsigned int GetStartSegment() const { return startSeg; }$/;"	f	class:StyleWriter	access:public	signature:() const
GetString	PropSetFile.cxx	/^std::string PropSetFile::GetString(const char *key) const {$/;"	f	class:PropSetFile	signature:(const char *key) const
GetStyleAndWords	SciTEBase.cxx	/^StyleAndWords SciTEBase::GetStyleAndWords(const char *base) {$/;"	f	class:SciTEBase	signature:(const char *base)
GetTail	Containers.h	/^	TYPE GetTail() const {$/;"	f	class:TList	access:public	signature:() const
GetTail	Containers.h	/^	TYPE& GetTail() {$/;"	f	class:TList	access:public	signature:()
GetTailPosition	Containers.h	/^	T_POSITION GetTailPosition() const {$/;"	f	class:TList	access:public	signature:() const
GetTranslationToAbout	SciTEBase.cxx	/^std::string SciTEBase::GetTranslationToAbout(const char * const propname, bool retainIfNotFound) {$/;"	f	class:SciTEBase	signature:(const char * const propname, bool retainIfNotFound)
GetUserPropertiesFileName	SciTEProps.cxx	/^FilePath SciTEBase::GetUserPropertiesFileName() {$/;"	f	class:SciTEBase	signature:()
GetVisible	SciTEBuffers.cxx	/^bool BufferList::GetVisible(int index) const {$/;"	f	class:BufferList	signature:(int index) const
GetWild	PropSetFile.cxx	/^std::string PropSetFile::GetWild(const char *keybase, const char *filename) {$/;"	f	class:PropSetFile	signature:(const char *keybase, const char *filename)
GetWildUsingStart	PropSetFile.cxx	/^std::string PropSetFile::GetWildUsingStart(const PropSetFile &psStart, const char *keybase, const char *filename) {$/;"	f	class:PropSetFile	signature:(const PropSetFile &psStart, const char *keybase, const char *filename)
GetWorkingDirectory	FilePath.cxx	/^FilePath FilePath::GetWorkingDirectory() {$/;"	f	class:FilePath	signature:()
GetterFunction	IFaceTable.h	/^	IFaceFunction GetterFunction() const {$/;"	f	struct:IFaceProperty	access:public	signature:() const
GoMatchingBrace	SciTEBase.cxx	/^void SciTEBase::GoMatchingBrace(bool select) {$/;"	f	class:SciTEBase	signature:(bool select)
GoMatchingPreprocCond	SciTEBase.cxx	/^void SciTEBase::GoMatchingPreprocCond(int direction, bool select) {$/;"	f	class:SciTEBase	signature:(int direction, bool select)
GoMessage	SciTEBuffers.cxx	/^void SciTEBase::GoMessage(int dir) {$/;"	f	class:SciTEBase	signature:(int dir)
GotoLineEnsureVisible	SciTEBase.cxx	/^void SciTEBase::GotoLineEnsureVisible(int line) {$/;"	f	class:SciTEBase	signature:(int line)
GrepFlags	SciTEBase.h	/^	enum GrepFlags {$/;"	g	class:SciTEBase	access:protected
GrepIntoDirectory	SciTEIO.cxx	/^bool SciTEBase::GrepIntoDirectory(const FilePath &directory) {$/;"	f	class:SciTEBase	signature:(const FilePath &directory)
GrepRecursive	SciTEIO.cxx	/^void SciTEBase::GrepRecursive(GrepFlags gf, const FilePath &baseDir, const char *searchString, const GUI::gui_char *fileTypes) {$/;"	f	class:SciTEBase	signature:(GrepFlags gf, const FilePath &baseDir, const char *searchString, const GUI::gui_char *fileTypes)
HackColour	Credits.cxx	/^	void HackColour(int &n) {$/;"	f	class:__anon1::RandomColour	file:	access:private	signature:(int &n)
HandleXml	SciTEBase.cxx	/^bool SciTEBase::HandleXml(char ch) {$/;"	f	class:SciTEBase	signature:(char ch)
HasCommandToRun	JobQueue.h	/^	bool HasCommandToRun() const {$/;"	f	class:JobQueue	access:public	signature:() const
HasNamedFunction	LuaExtension.cxx	/^static bool HasNamedFunction(const char *name) {$/;"	f	file:	signature:(const char *name)
HashKey	Containers.h	/^	unsigned int HashKey(ARG_KEY key) {$/;"	f	class:TMap	access:protected	signature:(ARG_KEY key)
Height	GUI.h	/^	int Height() const { return bottom - top; }$/;"	f	class:GUI::Rectangle	access:public	signature:() const
HideMatch	SciTEBase.cxx	/^void SciTEBase::HideMatch() {$/;"	f	class:SciTEBase	signature:()
HighlightCurrentWord	SciTEBase.cxx	/^void SciTEBase::HighlightCurrentWord(bool highlight) {$/;"	f	class:SciTEBase	signature:(bool highlight)
IDABBREV	SciTE.h	260;"	d
IDABOUTSCINTILLA	SciTE.h	232;"	d
IDBM_20_AROUND	SciTE.h	298;"	d
IDBM_20_BACKSLASH	SciTE.h	297;"	d
IDBM_20_CASE	SciTE.h	295;"	d
IDBM_20_REGEX	SciTE.h	296;"	d
IDBM_20_UP	SciTE.h	299;"	d
IDBM_20_WORD	SciTE.h	294;"	d
IDBM_24_AROUND	SciTE.h	305;"	d
IDBM_24_BACKSLASH	SciTE.h	304;"	d
IDBM_24_CASE	SciTE.h	302;"	d
IDBM_24_REGEX	SciTE.h	303;"	d
IDBM_24_UP	SciTE.h	306;"	d
IDBM_24_WORD	SciTE.h	301;"	d
IDBM_32_AROUND	SciTE.h	312;"	d
IDBM_32_BACKSLASH	SciTE.h	311;"	d
IDBM_32_CASE	SciTE.h	309;"	d
IDBM_32_REGEX	SciTE.h	310;"	d
IDBM_32_UP	SciTE.h	313;"	d
IDBM_32_WORD	SciTE.h	308;"	d
IDBM_AROUND	SciTE.h	290;"	d
IDBM_BACKSLASH	SciTE.h	289;"	d
IDBM_CASE	SciTE.h	287;"	d
IDBM_REGEX	SciTE.h	288;"	d
IDBM_UP	SciTE.h	291;"	d
IDBM_WORD	SciTE.h	286;"	d
IDBROWSE	SciTE.h	258;"	d
IDCMD	SciTE.h	255;"	d
IDCONVERT	SciTE.h	272;"	d
IDCURRLINE	SciTE.h	236;"	d
IDCURRLINECHAR	SciTE.h	266;"	d
IDC_DRAGDROP	SciTE.h	285;"	d
IDC_EDIT1	SciTE.h	113;"	d
IDC_INCFINDBTNOK	SciTE.h	112;"	d
IDC_INCFINDTEXT	SciTE.h	111;"	d
IDC_SHIFTTAB	SciTE.h	228;"	d
IDC_STATIC	SciTE.h	114;"	d
IDC_TABCLOSE	SciTE.h	227;"	d
IDDIRECTIONDOWN	SciTE.h	247;"	d
IDDIRECTIONUP	SciTE.h	246;"	d
IDDIRECTORY	SciTE.h	235;"	d
IDDOTDOT	SciTE.h	269;"	d
IDD_BUFFERS	SciTE.h	279;"	d
IDD_FIND	SciTE.h	277;"	d
IDD_FIND_ADV	SciTE.h	280;"	d
IDD_REPLACE	SciTE.h	278;"	d
IDD_REPLACE_ADV	SciTE.h	281;"	d
IDEXTEND	SciTE.h	238;"	d
IDFILES	SciTE.h	234;"	d
IDFINDINSTYLE	SciTE.h	270;"	d
IDFINDSTYLE	SciTE.h	271;"	d
IDFINDWHAT	SciTE.h	233;"	d
IDGOLINE	SciTE.h	231;"	d
IDGOLINECHAR	SciTE.h	265;"	d
IDINDENTSIZE	SciTE.h	240;"	d
IDLASTLINE	SciTE.h	237;"	d
IDMARKALL	SciTE.h	263;"	d
IDMATCHCASE	SciTE.h	245;"	d
IDM_ABBREV	SciTE.h	97;"	d
IDM_ABOUT	SciTE.h	221;"	d
IDM_ACTIVATE	SciTE.h	138;"	d
IDM_ALLOWACCESS	SciTE.h	42;"	d
IDM_BLOCK_COMMENT	SciTE.h	98;"	d
IDM_BOOKMARK_CLEARALL	SciTE.h	82;"	d
IDM_BOOKMARK_NEXT	SciTE.h	79;"	d
IDM_BOOKMARK_NEXT_SELECT	SciTE.h	83;"	d
IDM_BOOKMARK_PREV	SciTE.h	81;"	d
IDM_BOOKMARK_PREV_SELECT	SciTE.h	84;"	d
IDM_BOOKMARK_SELECT_ALL	SciTE.h	85;"	d
IDM_BOOKMARK_TOGGLE	SciTE.h	80;"	d
IDM_BOX_COMMENT	SciTE.h	101;"	d
IDM_BUFFER	SciTE.h	21;"	d
IDM_BUFFERSEP	SciTE.h	191;"	d
IDM_BUILD	SciTE.h	124;"	d
IDM_CLEAN	SciTE.h	130;"	d
IDM_CLEAR	SciTE.h	66;"	d
IDM_CLEAROUTPUT	SciTE.h	164;"	d
IDM_CLOSE	SciTE.h	31;"	d
IDM_CLOSEALL	SciTE.h	189;"	d
IDM_COMPILE	SciTE.h	123;"	d
IDM_COMPLETE	SciTE.h	89;"	d
IDM_COMPLETEWORD	SciTE.h	90;"	d
IDM_COPY	SciTE.h	64;"	d
IDM_COPYASRTF	SciTE.h	100;"	d
IDM_COPYPATH	SciTE.h	41;"	d
IDM_CUT	SciTE.h	63;"	d
IDM_DBG	SciTE.h	207;"	d
IDM_DBG_BP	SciTE.h	209;"	d
IDM_DBG_BT	SciTE.h	217;"	d
IDM_DBG_END	SciTE.h	213;"	d
IDM_DBG_INSPECT	SciTE.h	214;"	d
IDM_DBG_LOC	SciTE.h	216;"	d
IDM_DBG_RUN	SciTE.h	208;"	d
IDM_DBG_STEPOUT	SciTE.h	212;"	d
IDM_DBG_STEPOV	SciTE.h	211;"	d
IDM_DBG_STEPSI	SciTE.h	210;"	d
IDM_DBG_WATCH	SciTE.h	215;"	d
IDM_DEBUG	SciTE.h	24;"	d
IDM_DIRECTIONDOWN	SciTE.h	203;"	d
IDM_DIRECTIONUP	SciTE.h	202;"	d
IDM_DUPLICATE	SciTE.h	105;"	d
IDM_ENCODING_DEFAULT	SciTE.h	50;"	d
IDM_ENCODING_UCOOKIE	SciTE.h	54;"	d
IDM_ENCODING_UCS2BE	SciTE.h	51;"	d
IDM_ENCODING_UCS2LE	SciTE.h	52;"	d
IDM_ENCODING_UTF8	SciTE.h	53;"	d
IDM_ENTERSELECTION	SciTE.h	107;"	d
IDM_EOL_CONVERT	SciTE.h	170;"	d
IDM_EOL_CR	SciTE.h	168;"	d
IDM_EOL_CRLF	SciTE.h	167;"	d
IDM_EOL_LF	SciTE.h	169;"	d
IDM_EXPAND	SciTE.h	91;"	d
IDM_EXPAND_ENSURECHILDRENVISIBLE	SciTE.h	94;"	d
IDM_FILER	SciTE.h	37;"	d
IDM_FIND	SciTE.h	69;"	d
IDM_FINDINFILES	SciTE.h	74;"	d
IDM_FINDNEXT	SciTE.h	70;"	d
IDM_FINDNEXTBACK	SciTE.h	71;"	d
IDM_FINDNEXTBACKSEL	SciTE.h	73;"	d
IDM_FINDNEXTSEL	SciTE.h	72;"	d
IDM_FINISHEDEXECUTE	SciTE.h	127;"	d
IDM_FOLDMARGIN	SciTE.h	152;"	d
IDM_FULLSCREEN	SciTE.h	226;"	d
IDM_GO	SciTE.h	125;"	d
IDM_GOTO	SciTE.h	78;"	d
IDM_HELP	SciTE.h	220;"	d
IDM_HELP_SCITE	SciTE.h	222;"	d
IDM_IMPORT	SciTE.h	22;"	d
IDM_INCSEARCH	SciTE.h	106;"	d
IDM_INS_ABBREV	SciTE.h	102;"	d
IDM_JOIN	SciTE.h	103;"	d
IDM_LANGUAGE	SciTE.h	23;"	d
IDM_LINENUMBERMARGIN	SciTE.h	153;"	d
IDM_LINEREVERSE	SciTE.h	77;"	d
IDM_LOADSESSION	SciTE.h	47;"	d
IDM_LWRCASE	SciTE.h	96;"	d
IDM_MACROLIST	SciTE.h	136;"	d
IDM_MACROPLAY	SciTE.h	135;"	d
IDM_MACRORECORD	SciTE.h	133;"	d
IDM_MACROSTOPRECORD	SciTE.h	134;"	d
IDM_MACRO_SEP	SciTE.h	132;"	d
IDM_MATCHBRACE	SciTE.h	86;"	d
IDM_MATCHCASE	SciTE.h	198;"	d
IDM_MONOFONT	SciTE.h	174;"	d
IDM_MOVETABLEFT	SciTE.h	195;"	d
IDM_MOVETABRIGHT	SciTE.h	194;"	d
IDM_MRUFILE	SciTE.h	19;"	d
IDM_MRU_SEP	SciTE.h	43;"	d
IDM_MRU_SUB	SciTE.h	44;"	d
IDM_NEW	SciTE.h	27;"	d
IDM_NEXTFILE	SciTE.h	188;"	d
IDM_NEXTFILESTACK	SciTE.h	193;"	d
IDM_NEXTMATCHPPC	SciTE.h	119;"	d
IDM_NEXTMSG	SciTE.h	128;"	d
IDM_ONTOP	SciTE.h	225;"	d
IDM_OPEN	SciTE.h	28;"	d
IDM_OPENABBREVPROPERTIES	SciTE.h	179;"	d
IDM_OPENDIRECTORYPROPERTIES	SciTE.h	181;"	d
IDM_OPENFILESHERE	SciTE.h	159;"	d
IDM_OPENGLOBALPROPERTIES	SciTE.h	178;"	d
IDM_OPENLOCALPROPERTIES	SciTE.h	176;"	d
IDM_OPENLUAEXTERNALFILE	SciTE.h	180;"	d
IDM_OPENSELECTED	SciTE.h	29;"	d
IDM_OPENUSERPROPERTIES	SciTE.h	177;"	d
IDM_PASTE	SciTE.h	65;"	d
IDM_PASTEANDDOWN	SciTE.h	68;"	d
IDM_PREVFILE	SciTE.h	187;"	d
IDM_PREVFILESTACK	SciTE.h	192;"	d
IDM_PREVMATCHPPC	SciTE.h	117;"	d
IDM_PREVMSG	SciTE.h	129;"	d
IDM_PRINT	SciTE.h	46;"	d
IDM_PRINTSETUP	SciTE.h	45;"	d
IDM_QUIT	SciTE.h	49;"	d
IDM_READONLY	SciTE.h	162;"	d
IDM_REDO	SciTE.h	62;"	d
IDM_REGEXP	SciTE.h	199;"	d
IDM_REPLACE	SciTE.h	75;"	d
IDM_REVERT	SciTE.h	30;"	d
IDM_RUNWIN	SciTE.h	141;"	d
IDM_SAVE	SciTE.h	32;"	d
IDM_SAVEACOPY	SciTE.h	39;"	d
IDM_SAVEALL	SciTE.h	190;"	d
IDM_SAVEAS	SciTE.h	33;"	d
IDM_SAVEASHTML	SciTE.h	34;"	d
IDM_SAVEASPDF	SciTE.h	36;"	d
IDM_SAVEASRTF	SciTE.h	35;"	d
IDM_SAVEASTEX	SciTE.h	38;"	d
IDM_SAVEASXML	SciTE.h	40;"	d
IDM_SAVESESSION	SciTE.h	48;"	d
IDM_SELECTALL	SciTE.h	67;"	d
IDM_SELECTIONADDEACH	SciTE.h	109;"	d
IDM_SELECTIONADDNEXT	SciTE.h	108;"	d
IDM_SELECTION_FOR_FIND	SciTE.h	76;"	d
IDM_SELECTTOBRACE	SciTE.h	87;"	d
IDM_SELECTTONEXTMATCHPPC	SciTE.h	120;"	d
IDM_SELECTTOPREVMATCHPPC	SciTE.h	118;"	d
IDM_SELMARGIN	SciTE.h	151;"	d
IDM_SHOWCALLTIP	SciTE.h	88;"	d
IDM_SPLIT	SciTE.h	104;"	d
IDM_SPLITVERTICAL	SciTE.h	147;"	d
IDM_SRCWIN	SciTE.h	140;"	d
IDM_STATUSWIN	SciTE.h	143;"	d
IDM_STOPEXECUTE	SciTE.h	126;"	d
IDM_STREAM_COMMENT	SciTE.h	99;"	d
IDM_SWITCHPANE	SciTE.h	165;"	d
IDM_TABSIZE	SciTE.h	172;"	d
IDM_TABWIN	SciTE.h	144;"	d
IDM_TOGGLEOUTPUT	SciTE.h	155;"	d
IDM_TOGGLEPARAMETERS	SciTE.h	158;"	d
IDM_TOGGLE_FOLDALL	SciTE.h	92;"	d
IDM_TOGGLE_FOLDRECURSIVE	SciTE.h	93;"	d
IDM_TOOLS	SciTE.h	20;"	d
IDM_TOOLWIN	SciTE.h	142;"	d
IDM_UNDO	SciTE.h	61;"	d
IDM_UNSLASH	SciTE.h	201;"	d
IDM_UPRCASE	SciTE.h	95;"	d
IDM_VIEWEOL	SciTE.h	149;"	d
IDM_VIEWGUIDES	SciTE.h	150;"	d
IDM_VIEWSPACE	SciTE.h	148;"	d
IDM_VIEWSTATUSBAR	SciTE.h	157;"	d
IDM_VIEWTABBAR	SciTE.h	156;"	d
IDM_VIEWTOOLBAR	SciTE.h	154;"	d
IDM_WHOLEWORD	SciTE.h	197;"	d
IDM_WRAP	SciTE.h	160;"	d
IDM_WRAPAROUND	SciTE.h	200;"	d
IDM_WRAPOUTPUT	SciTE.h	161;"	d
IDPARAMSTART	SciTE.h	274;"	d
IDREGEXP	SciTE.h	251;"	d
IDREPLACE	SciTE.h	248;"	d
IDREPLACEALL	SciTE.h	249;"	d
IDREPLACEINBUF	SciTE.h	262;"	d
IDREPLACEINSEL	SciTE.h	250;"	d
IDREPLACEWITH	SciTE.h	243;"	d
IDREPLDONE	SciTE.h	267;"	d
IDR_BUTTONS	SciTE.h	293;"	d
IDR_CLOSEFILE	SciTE.h	284;"	d
IDR_CLOSEFILE24	SciTE.h	292;"	d
IDTABSIZE	SciTE.h	239;"	d
IDUNSLASH	SciTE.h	254;"	d
IDUSETABS	SciTE.h	241;"	d
IDWHOLEWORD	SciTE.h	244;"	d
IDWRAP	SciTE.h	252;"	d
IFACETABLE_H	IFaceTable.h	9;"	d
IFaceConstant	IFaceTable.h	/^struct IFaceConstant {$/;"	s
IFaceFunction	IFaceTable.h	/^struct IFaceFunction {$/;"	s
IFaceFunctionIsScriptable	LuaExtension.cxx	/^inline bool IFaceFunctionIsScriptable(const IFaceFunction &f) {$/;"	f	signature:(const IFaceFunction &f)
IFaceObject	IFaceTable.h	/^struct IFaceObject {$/;"	s
IFaceProperty	IFaceTable.h	/^struct IFaceProperty {$/;"	s
IFacePropertyBinding	LuaExtension.cxx	/^struct IFacePropertyBinding {$/;"	s	file:
IFacePropertyIsScriptable	LuaExtension.cxx	/^inline bool IFacePropertyIsScriptable(const IFaceProperty &p) {$/;"	f	signature:(const IFaceProperty &p)
IFaceTable	IFaceTable.h	/^class IFaceTable {$/;"	c
IFaceType	IFaceTable.h	/^enum IFaceType {$/;"	g
IFaceTypeIsNumeric	LuaExtension.cxx	/^inline bool IFaceTypeIsNumeric(IFaceType t) {$/;"	f	signature:(IFaceType t)
IFaceTypeIsScriptable	LuaExtension.cxx	/^inline bool IFaceTypeIsScriptable(IFaceType t, int index) {$/;"	f	signature:(IFaceType t, int index)
ILocalize	StringHelpers.h	/^class ILocalize {$/;"	c
IMPORT_START	SciTE.h	57;"	d
Import	PropSetFile.cxx	/^void PropSetFile::Import(const FilePath &filename, const FilePath &directoryForImports, const ImportFilter &filter,$/;"	f	class:PropSetFile	signature:(const FilePath &filename, const FilePath &directoryForImports, const ImportFilter &filter, FilePathSet *imports, size_t depth)
ImportFilter	PropSetFile.h	/^class ImportFilter {$/;"	c
ImportMenu	SciTEProps.cxx	/^void SciTEBase::ImportMenu(int pos) {$/;"	f	class:SciTEBase	signature:(int pos)
IncrementProgress	Worker.h	/^	void IncrementProgress(size_t increment) {$/;"	f	struct:Worker	access:public	signature:(size_t increment)
IncrementSearchMode	SciTEBase.cxx	/^int SciTEBase::IncrementSearchMode() {$/;"	f	class:SciTEBase	signature:()
IndentOfBlock	SciTEBase.cxx	/^int SciTEBase::IndentOfBlock(int line) {$/;"	f	class:SciTEBase	signature:(int line)
IndentationStatus	SciTEBase.h	/^enum IndentationStatus {$/;"	g
IndexPropKey	SciTEBuffers.cxx	/^static std::string IndexPropKey(const char *bufPrefix, int bufIndex, const char *bufAppendix) {$/;"	f	file:	signature:(const char *bufPrefix, int bufIndex, const char *bufAppendix)
IndicatorDefinition	StyleDefinition.cxx	/^IndicatorDefinition::IndicatorDefinition(const char *definition) :$/;"	f	class:IndicatorDefinition	signature:(const char *definition)
IndicatorDefinition	StyleDefinition.h	/^struct IndicatorDefinition {$/;"	s
Init	FilePath.cxx	/^void FilePath::Init() {$/;"	f	class:FilePath	signature:()
Init	SciTEBase.h	/^	void Init() {$/;"	f	class:Buffer	access:public	signature:()
Init	SciTEBase.h	/^	void Init() {$/;"	f	class:RecentFile	access:public	signature:()
InitBuffer	Extender.h	/^	virtual bool InitBuffer(int) { return false; }$/;"	f	class:Extension	access:public	signature:(int)
InitBuffer	LuaExtension.cxx	/^bool LuaExtension::InitBuffer(int index) {$/;"	f	class:LuaExtension	signature:(int index)
InitBuffer	MultiplexExtension.cxx	/^bool MultiplexExtension::InitBuffer(int index) {$/;"	f	class:MultiplexExtension	signature:(int index)
InitGlobalScope	LuaExtension.cxx	/^static bool InitGlobalScope(bool checkProperties, bool forceReload = false) {$/;"	f	file:	signature:(bool checkProperties, bool forceReload = false)
InitHashTable	Containers.h	/^	void InitHashTable(unsigned int hashSize, bool bAllocNow = true) {$/;"	f	class:TMap	access:public	signature:(unsigned int hashSize, bool bAllocNow = true)
Initialise	LuaExtension.cxx	/^bool LuaExtension::Initialise(ExtensionAPI *host_) {$/;"	f	class:LuaExtension	signature:(ExtensionAPI *host_)
Initialise	MultiplexExtension.cxx	/^bool MultiplexExtension::Initialise(ExtensionAPI *host_) {$/;"	f	class:MultiplexExtension	signature:(ExtensionAPI *host_)
InitialiseBuffers	SciTEBuffers.cxx	/^void SciTEBase::InitialiseBuffers() {$/;"	f	class:SciTEBase	signature:()
Insert	SciTEBase.cxx	/^void SciTEBase::Insert(Pane p, int pos, const char *s) {$/;"	f	class:SciTEBase	signature:(Pane p, int pos, const char *s)
Insert	StringHelpers.h	/^	void Insert(const std::string &s) {$/;"	f	class:EntryMemory	access:public	signature:(const std::string &s)
InsertAfter	Containers.h	/^	T_POSITION InsertAfter(T_POSITION position, ARG_TYPE newElement) {$/;"	f	class:TList	access:public	signature:(T_POSITION position, ARG_TYPE newElement)
InsertAt	Containers.h	/^	void InsertAt(int nIndex, ARG_TYPE newElement, int nCount = 1) {$/;"	f	class:TArray	access:public	signature:(int nIndex, ARG_TYPE newElement, int nCount = 1)
InsertBefore	Containers.h	/^	T_POSITION InsertBefore(T_POSITION position, ARG_TYPE newElement) {$/;"	f	class:TList	access:public	signature:(T_POSITION position, ARG_TYPE newElement)
InsertFindInMemory	SciTEBase.cxx	/^void Searcher::InsertFindInMemory() {$/;"	f	class:Searcher	signature:()
Instance	LuaExtension.cxx	/^LuaExtension &LuaExtension::Instance() {$/;"	f	class:LuaExtension	signature:()
IntFromHexByte	StyleDefinition.cxx	/^int IntFromHexByte(const char *hexByte) {$/;"	f	signature:(const char *hexByte)
IntFromHexDigit	StyleDefinition.cxx	/^int IntFromHexDigit(int ch) {$/;"	f	signature:(int ch)
InternalGrep	SciTEIO.cxx	/^void SciTEBase::InternalGrep(GrepFlags gf, const GUI::gui_char *directory, const GUI::gui_char *fileTypes, const char *search, sptr_t &originalEnd) {$/;"	f	class:SciTEBase	signature:(GrepFlags gf, const GUI::gui_char *directory, const GUI::gui_char *fileTypes, const char *search, sptr_t &originalEnd)
InternalIsLeadByte	StyleWriter.cxx	/^bool TextReader::InternalIsLeadByte(char ch) const {$/;"	f	class:TextReader	signature:(char ch) const
IsASCII	StringHelpers.h	/^inline bool IsASCII(int ch) {$/;"	f	signature:(int ch)
IsASpace	PropSetFile.cxx	/^inline bool IsASpace(unsigned int ch) {$/;"	f	signature:(unsigned int ch)
IsASpace	StringList.cxx	/^static inline bool IsASpace(unsigned int ch) {$/;"	f	file:	signature:(unsigned int ch)
IsAbsolute	FilePath.cxx	/^bool FilePath::IsAbsolute() const {$/;"	f	class:FilePath	signature:() const
IsAlphabetic	SciTEBase.cxx	/^inline bool IsAlphabetic(unsigned int ch) {$/;"	f	signature:(unsigned int ch)
IsBold	StyleDefinition.cxx	/^bool StyleDefinition::IsBold() const {$/;"	f	class:StyleDefinition	signature:() const
IsBrace	SciTEBase.cxx	/^static bool IsBrace(char ch) {$/;"	f	file:	signature:(char ch)
IsBufferAvailable	SciTEBuffers.cxx	/^bool SciTEBase::IsBufferAvailable() const {$/;"	f	class:SciTEBase	signature:() const
IsCommentLine	PropSetFile.cxx	/^static bool IsCommentLine(const char *line) {$/;"	f	file:	signature:(const char *line)
IsDirectory	FilePath.cxx	/^bool FilePath::IsDirectory() const {$/;"	f	class:FilePath	signature:() const
IsEmpty	Containers.h	/^	bool IsEmpty() const {$/;"	f	class:TList	access:public	signature:() const
IsEmpty	Containers.h	/^	bool IsEmpty() const {$/;"	f	class:TMap	access:public	signature:() const
IsEmpty	SciTEBase.h	/^	bool IsEmpty() const { return words.length() == 0; }$/;"	f	struct:StyleAndWords	access:public	signature:() const
IsExecuting	JobQueue.h	/^	bool IsExecuting() const {$/;"	f	class:JobQueue	access:public	signature:() const
IsLeadByte	StyleWriter.h	/^	bool IsLeadByte(char ch) const {$/;"	f	class:TextReader	access:public	signature:(char ch) const
IsLinePreprocessorCondition	SciTEBase.cxx	/^int SciTEBase::IsLinePreprocessorCondition(char *line) {$/;"	f	class:SciTEBase	signature:(char *line)
IsLoading	FileWorker.h	/^	virtual bool IsLoading() const {$/;"	f	class:FileLoader	access:public	signature:() const
IsLoading	FileWorker.h	/^	virtual bool IsLoading() const {$/;"	f	class:FileStorer	access:public	signature:() const
IsOctalDigit	StringHelpers.cxx	/^static bool IsOctalDigit(char ch) {$/;"	f	file:	signature:(char ch)
IsPropertiesFile	PropSetFile.cxx	/^bool IsPropertiesFile(const FilePath &filename) {$/;"	f	signature:(const FilePath &filename)
IsRoot	FilePath.cxx	/^bool FilePath::IsRoot() const {$/;"	f	class:FilePath	signature:() const
IsSet	FilePath.cxx	/^bool FilePath::IsSet() const {$/;"	f	class:FilePath	signature:() const
IsSingleChar	SciTEBase.h	/^	bool IsSingleChar() const { return words.length() == 1; }$/;"	f	struct:StyleAndWords	access:public	signature:() const
IsSpaceOrTab	PropSetFile.cxx	/^static bool IsSpaceOrTab(char ch) {$/;"	f	file:	signature:(char ch)
IsStdinBlocked	SciTEIO.cxx	/^bool SciTEBase::IsStdinBlocked() {$/;"	f	class:SciTEBase	signature:()
IsSwitchCharacter	SciTEBase.cxx	/^static bool IsSwitchCharacter(GUI::gui_char ch) {$/;"	f	file:	signature:(GUI::gui_char ch)
IsUTF8TrailByte	FileWorker.cxx	/^static bool IsUTF8TrailByte(int ch) {$/;"	f	file:	signature:(int ch)
IsUntitled	FilePath.cxx	/^bool FilePath::IsUntitled() const {$/;"	f	class:FilePath	signature:() const
IsValid	PropSetFile.cxx	/^bool ImportFilter::IsValid(const std::string &name) const {$/;"	f	class:ImportFilter	signature:(const std::string &name) const
IsWordCharacter	SciTEIO.cxx	/^static bool IsWordCharacter(int ch) {$/;"	f	file:	signature:(int ch)
JOBQUEUE_H	JobQueue.h	12;"	d
Job	JobQueue.h	/^	Job() {$/;"	f	class:Job	access:public	signature:()
Job	JobQueue.h	/^	Job(const std::string &command_, const FilePath &directory_, JobSubsystem jobType_, const std::string &input_, int flags_)$/;"	f	class:Job	access:public	signature:(const std::string &command_, const FilePath &directory_, JobSubsystem jobType_, const std::string &input_, int flags_)
Job	JobQueue.h	/^class Job {$/;"	c
JobFlags	JobQueue.h	/^enum JobFlags {$/;"	g
JobMode	JobQueue.cxx	/^JobMode::JobMode(PropSetFile &props, int item, const char *fileNameExt) : jobType(jobCLI), saveBefore(0), isFilter(false), flags(0) {$/;"	f	class:JobMode	signature:(PropSetFile &props, int item, const char *fileNameExt)
JobMode	JobQueue.h	/^struct JobMode {$/;"	s
JobQueue	JobQueue.h	/^	JobQueue() {$/;"	f	class:JobQueue	access:public	signature:()
JobQueue	JobQueue.h	/^class JobQueue {$/;"	c
JobSubsystem	JobQueue.h	/^enum JobSubsystem {$/;"	g
LUA_GLOBALSINDEX	LuaExtension.cxx	36;"	d	file:
LanguageMenuItem	SciTEBase.h	/^class LanguageMenuItem {$/;"	c
Length	StringHelpers.h	/^	int Length() const {$/;"	f	class:EntryMemory	access:public	signature:() const
Length	StringList.h	/^	size_t Length() const { return words.size(); }$/;"	f	class:StringList	access:public	signature:() const
Length	StyleWriter.cxx	/^int TextReader::Length() {$/;"	f	class:TextReader	signature:()
LengthDocument	SciTEBase.cxx	/^int SciTEBase::LengthDocument() {$/;"	f	class:SciTEBase	signature:()
LengthWord	StringList.cxx	/^static size_t LengthWord(const char *word, char otherSeparator) {$/;"	f	file:	signature:(const char *word, char otherSeparator)
LevelAt	LuaExtension.cxx	/^	static int LevelAt(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
LevelAt	StyleWriter.cxx	/^int TextReader::LevelAt(int line) {$/;"	f	class:TextReader	signature:(int line)
LevelNumber	SciTEBase.cxx	/^static int LevelNumber(int level) {$/;"	f	file:	signature:(int level)
Line	LuaExtension.cxx	/^	static int Line(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
LineEndString	SciTEBase.cxx	/^static const char *LineEndString(int eolMode) {$/;"	f	file:	signature:(int eolMode)
LineNumber	SciTEIO.cxx	/^	int LineNumber() const {$/;"	f	class:FileReader	access:public	signature:() const
LineRange	MatchMarker.h	/^	LineRange(int lineStart_, int lineEnd_) : lineStart(lineStart_), lineEnd(lineEnd_) {}$/;"	f	struct:LineRange	access:public	signature:(int lineStart_, int lineEnd_)
LineRange	MatchMarker.h	/^struct LineRange {$/;"	s
LineStart	StyleWriter.cxx	/^int TextReader::LineStart(int line) {$/;"	f	class:TextReader	signature:(int line)
LineState	LuaExtension.cxx	/^	static int LineState(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
LinesBreak	MatchMarker.cxx	/^std::vector<LineRange> LinesBreak(GUI::ScintillaWindow *pSci) {$/;"	f	signature:(GUI::ScintillaWindow *pSci)
LinesFromString	SciTEBuffers.cxx	/^std::vector<int> LinesFromString(const std::string &s) {$/;"	f	namespace:__anon28	signature:(const std::string &s)
List	FilePath.cxx	/^void FilePath::List(FilePathSet &directories, FilePathSet &files) const {$/;"	f	class:FilePath	signature:(FilePathSet &directories, FilePathSet &files) const
ListFromString	StringHelpers.h	/^inline std::vector<GUI::gui_string> ListFromString(const GUI::gui_string &args) {$/;"	f	signature:(const GUI::gui_string &args)
Load	LuaExtension.cxx	/^bool LuaExtension::Load(const char *filename) {$/;"	f	class:LuaExtension	signature:(const char *filename)
Load	MultiplexExtension.cxx	/^bool MultiplexExtension::Load(const char *filename) {$/;"	f	class:MultiplexExtension	signature:(const char *filename)
LoadSessionDialog	SciTEBase.h	/^	virtual void LoadSessionDialog() {}$/;"	f	class:SciTEBase	access:protected	signature:()
LoadSessionFile	SciTEBuffers.cxx	/^void SciTEBase::LoadSessionFile(const GUI::gui_char *sessionName) {$/;"	f	class:SciTEBase	signature:(const GUI::gui_char *sessionName)
LocaliseMessage	SciTEProps.cxx	/^GUI::gui_string SciTEBase::LocaliseMessage(const char *s, const GUI::gui_char *param0, const GUI::gui_char *param1, const GUI::gui_char *param2) {$/;"	f	class:SciTEBase	signature:(const char *s, const GUI::gui_char *param0, const GUI::gui_char *param1, const GUI::gui_char *param2)
Localization	SciTEBase.h	/^	Localization() : PropSetFile(true), read(false) {$/;"	f	class:Localization	access:public	signature:()
Localization	SciTEBase.h	/^class Localization : public PropSetFile, public ILocalize {$/;"	c	inherits:PropSetFile,ILocalize
Lock	Mutex.h	/^	explicit Lock(Mutex *mute_) : mute(mute_) {$/;"	f	class:Lock	access:public	signature:(Mutex *mute_)
Lock	Mutex.h	/^class Lock {$/;"	c
LongFromTwoShorts	SciTEBase.h	/^inline long LongFromTwoShorts(short a,short b) {$/;"	f	signature:(short a,short b)
Lookup	Containers.h	/^	bool Lookup(ARG_KEY key, VALUE& rValue) {$/;"	f	class:TMap	access:public	signature:(ARG_KEY key, VALUE& rValue)
LowerCaseAZ	StringHelpers.cxx	/^void LowerCaseAZ(std::string &s) {$/;"	f	signature:(std::string &s)
LowerCaseAZChar	StringHelpers.cxx	/^static char LowerCaseAZChar(char c) {$/;"	f	file:	signature:(char c)
Lowercase	FilePath.cxx	/^static void Lowercase(GUI::gui_string &s) {$/;"	f	file:	signature:(GUI::gui_string &s)
LuaExtension	LuaExtension.cxx	/^LuaExtension::LuaExtension() {}$/;"	f	class:LuaExtension	signature:()
LuaExtension	LuaExtension.h	/^class LuaExtension : public Extension {$/;"	c	inherits:Extension
LuaPanicFunction	LuaExtension.cxx	/^static int LuaPanicFunction(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
MAX_PATH	FilePath.h	18;"	d
MAX_PATH	FilePath.h	20;"	d
MAX_STYLEDEF	ExportRTF.cxx	72;"	d	file:
MRU_START	SciTE.h	56;"	d
MULTIPLEXEXTENSION_H	MultiplexExtension.h	9;"	d
MUTEX_H	Mutex.h	12;"	d
MaintainIndentation	SciTEBase.cxx	/^void SciTEBase::MaintainIndentation(char ch) {$/;"	f	class:SciTEBase	signature:(char ch)
MakeLongPath	FilePath.cxx	/^static bool MakeLongPath(const GUI::gui_char* shortPath, GUI::gui_string &longPath) {$/;"	f	file:	signature:(const GUI::gui_char* shortPath, GUI::gui_string &longPath)
MakeUpperCase	StringHelpers.h	/^inline char MakeUpperCase(char ch) {$/;"	f	signature:(char ch)
MarginClick	SciTEBase.cxx	/^bool SciTEBase::MarginClick(int position, int modifiers) {$/;"	f	class:SciTEBase	signature:(int position, int modifiers)
MarkAll	SciTEBase.cxx	/^void SciTEBase::MarkAll(MarkPurpose purpose) {$/;"	f	class:SciTEBase	signature:(MarkPurpose purpose)
MarkPurpose	SciTEBase.h	/^	enum MarkPurpose { markWithBookMarks, markIncremental };$/;"	g	class:Searcher	access:public
Match	LuaExtension.cxx	/^	bool Match(const char *s) {$/;"	f	struct:StylingContext	access:public	signature:(const char *s)
Match	LuaExtension.cxx	/^	static int Match(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
Match	StyleWriter.cxx	/^bool TextReader::Match(int pos, const char *s) {$/;"	f	class:TextReader	signature:(int pos, const char *s)
MatchMarker	MatchMarker.cxx	/^MatchMarker::MatchMarker() : $/;"	f	class:MatchMarker	signature:()
MatchMarker	MatchMarker.h	/^class MatchMarker {$/;"	c
MatchWild	PropSetFile.cxx	/^static bool MatchWild(const char *pattern, size_t lenPattern, const char *fileName, bool caseSensitive) {$/;"	f	file:	signature:(const char *pattern, size_t lenPattern, const char *fileName, bool caseSensitive)
Matches	FilePath.cxx	/^bool FilePath::Matches(const GUI::gui_char *pattern) const {$/;"	f	class:FilePath	signature:(const GUI::gui_char *pattern) const
Maximum	SciTEBase.h	/^inline int Maximum(int a, int b) {$/;"	f	signature:(int a, int b)
Menu	GUI.h	/^	Menu() : mid(0) {$/;"	f	class:GUI::Menu	access:public	signature:()
Menu	GUI.h	/^class Menu {$/;"	c	namespace:GUI
MenuCommand	SciTEBase.cxx	/^void SciTEBase::MenuCommand(int cmdID, int source) {$/;"	f	class:SciTEBase	signature:(int cmdID, int source)
MenuID	GUI.h	/^typedef void *MenuID;$/;"	t	namespace:GUI
MessageBoxChoice	SciTEBase.h	/^	enum MessageBoxChoice {$/;"	g	class:SciTEBase	access:protected
MessageBoxStyle	SciTEBase.h	/^	typedef int MessageBoxStyle;$/;"	t	class:SciTEBase	access:protected
Minimum	SciTEBase.h	/^inline int Minimum(int a, int b) {$/;"	f	signature:(int a, int b)
ModifiedTime	FilePath.cxx	/^time_t FilePath::ModifiedTime() const {$/;"	f	class:FilePath	signature:() const
More	LuaExtension.cxx	/^	static int More(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
MoveBack	SciTEBase.cxx	/^void SciTEBase::MoveBack() {$/;"	f	class:SciTEBase	signature:()
MoveSplit	SciTEBase.cxx	/^void SciTEBase::MoveSplit(GUI::Point ptNewDrag) {$/;"	f	class:SciTEBase	signature:(GUI::Point ptNewDrag)
MoveTabLeft	SciTEBuffers.cxx	/^void SciTEBase::MoveTabLeft() {$/;"	f	class:SciTEBase	signature:()
MoveTabRight	SciTEBuffers.cxx	/^void SciTEBase::MoveTabRight() {$/;"	f	class:SciTEBase	signature:()
MoveToStackTop	SciTEBuffers.cxx	/^void BufferList::MoveToStackTop(int index) {$/;"	f	class:BufferList	signature:(int index)
MultiplexExtension	MultiplexExtension.cxx	/^MultiplexExtension::MultiplexExtension(): host(nullptr) {}$/;"	f	class:MultiplexExtension	signature:()
MultiplexExtension	MultiplexExtension.h	/^class MultiplexExtension: public Extension {$/;"	c	inherits:Extension
Mutex	Mutex.h	/^class Mutex {$/;"	c
Name	FilePath.cxx	/^FilePath FilePath::Name() const {$/;"	f	class:FilePath	signature:() const
NeedsOnClose	Extender.h	/^	virtual bool NeedsOnClose() { return true; }$/;"	f	class:Extension	access:public	signature:()
NeedsOnClose	LuaExtension.cxx	/^bool LuaExtension::NeedsOnClose() {$/;"	f	class:LuaExtension	signature:()
NeedsOnClose	MultiplexExtension.cxx	/^bool MultiplexExtension::NeedsOnClose() {$/;"	f	class:MultiplexExtension	signature:()
NeedsSave	SciTEBuffers.cxx	/^bool Buffer::NeedsSave(int delayBeforeSave) const {$/;"	f	class:Buffer	signature:(int delayBeforeSave) const
New	SciTEBuffers.cxx	/^void SciTEBase::New() {$/;"	f	class:SciTEBase	signature:()
NewAssoc	Containers.h	/^	Association* NewAssoc() {$/;"	f	class:TMap	access:protected	signature:()
NewLineInOutput	SciTEBase.cxx	/^void SciTEBase::NewLineInOutput() {$/;"	f	class:SciTEBase	signature:()
NewNode	Containers.h	/^	Node* NewNode(Node* pPrev, Node* pNext) {$/;"	f	class:TList	access:protected	signature:(Node* pPrev, Node* pNext)
Next	Credits.cxx	/^	void Next() {$/;"	f	class:__anon1::RandomColour	access:public	signature:()
Next	LuaExtension.cxx	/^	static int Next(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
Next	SciTEBuffers.cxx	/^void SciTEBase::Next() {$/;"	f	class:SciTEBase	signature:()
Next	SciTEIO.cxx	/^	const char *Next() {$/;"	f	class:FileReader	access:public	signature:()
NextByte	SciTEIO.cxx	/^	int NextByte() {$/;"	f	class:BufferedFile	access:public	signature:()
NextInStack	SciTEBuffers.cxx	/^void SciTEBase::NextInStack() {$/;"	f	class:SciTEBase	signature:()
NextRandom	Credits.cxx	/^	int NextRandom() {$/;"	f	class:__anon1::RandomColour	file:	access:private	signature:()
Node	Containers.h	/^	struct Node	{$/;"	s	class:TList	access:protected
NormaliseSplit	SciTEBase.cxx	/^int SciTEBase::NormaliseSplit(int splitPos) {$/;"	f	class:SciTEBase	signature:(int splitPos)
NormalizePath	FilePath.cxx	/^FilePath FilePath::NormalizePath() const {$/;"	f	class:FilePath	signature:() const
Notify	SciTEBase.cxx	/^void SciTEBase::Notify(SCNotification *notification) {$/;"	f	class:SciTEBase	signature:(SCNotification *notification)
OnBeforeSave	Extender.h	/^	virtual bool OnBeforeSave(const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(const char *)
OnBeforeSave	LuaExtension.cxx	/^bool LuaExtension::OnBeforeSave(const char *filename) {$/;"	f	class:LuaExtension	signature:(const char *filename)
OnBeforeSave	MultiplexExtension.cxx	/^bool MultiplexExtension::OnBeforeSave(const char *filename) {$/;"	f	class:MultiplexExtension	signature:(const char *filename)
OnChar	Extender.h	/^	virtual bool OnChar(char) { return false; }$/;"	f	class:Extension	access:public	signature:(char)
OnChar	LuaExtension.cxx	/^bool LuaExtension::OnChar(char ch) {$/;"	f	class:LuaExtension	signature:(char ch)
OnChar	MultiplexExtension.cxx	/^bool MultiplexExtension::OnChar(char c) {$/;"	f	class:MultiplexExtension	signature:(char c)
OnClick	Extender.h	/^	virtual bool OnClick(int) { return false; }$/;"	f	class:Extension	access:public	signature:(int)
OnClick	LuaExtension.cxx	/^bool LuaExtension::OnClick(int modifiers) {$/;"	f	class:LuaExtension	signature:(int modifiers)
OnClick	MultiplexExtension.cxx	/^bool MultiplexExtension::OnClick(int modifiers) {$/;"	f	class:MultiplexExtension	signature:(int modifiers)
OnClose	Extender.h	/^	virtual bool OnClose(const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(const char *)
OnClose	LuaExtension.cxx	/^bool LuaExtension::OnClose(const char *filename) {$/;"	f	class:LuaExtension	signature:(const char *filename)
OnClose	MultiplexExtension.cxx	/^bool MultiplexExtension::OnClose(const char *filename) {$/;"	f	class:MultiplexExtension	signature:(const char *filename)
OnDoubleClick	Extender.h	/^	virtual bool OnDoubleClick() { return false; }$/;"	f	class:Extension	access:public	signature:()
OnDoubleClick	LuaExtension.cxx	/^bool LuaExtension::OnDoubleClick() {$/;"	f	class:LuaExtension	signature:()
OnDoubleClick	MultiplexExtension.cxx	/^bool MultiplexExtension::OnDoubleClick() {$/;"	f	class:MultiplexExtension	signature:()
OnDwellStart	Extender.h	/^	virtual bool OnDwellStart(int, const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(int, const char *)
OnDwellStart	LuaExtension.cxx	/^bool LuaExtension::OnDwellStart(int pos, const char *word) {$/;"	f	class:LuaExtension	signature:(int pos, const char *word)
OnDwellStart	MultiplexExtension.cxx	/^bool MultiplexExtension::OnDwellStart(int pos, const char *word) {$/;"	f	class:MultiplexExtension	signature:(int pos, const char *word)
OnExecute	Extender.h	/^	virtual bool OnExecute(const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(const char *)
OnExecute	LuaExtension.cxx	/^bool LuaExtension::OnExecute(const char *s) {$/;"	f	class:LuaExtension	signature:(const char *s)
OnExecute	MultiplexExtension.cxx	/^bool MultiplexExtension::OnExecute(const char *cmd) {$/;"	f	class:MultiplexExtension	signature:(const char *cmd)
OnIdle	SciTEBase.cxx	/^void SciTEBase::OnIdle() {$/;"	f	class:SciTEBase	signature:()
OnKey	Extender.h	/^	virtual bool OnKey(int, int) { return false; }$/;"	f	class:Extension	access:public	signature:(int, int)
OnKey	LuaExtension.cxx	/^bool LuaExtension::OnKey(int keyval, int modifiers) {$/;"	f	class:LuaExtension	signature:(int keyval, int modifiers)
OnKey	MultiplexExtension.cxx	/^bool MultiplexExtension::OnKey(int keyval, int modifiers) {$/;"	f	class:MultiplexExtension	signature:(int keyval, int modifiers)
OnMacro	Extender.h	/^	virtual bool OnMacro(const char *, const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(const char *, const char *)
OnMacro	MultiplexExtension.cxx	/^bool MultiplexExtension::OnMacro(const char *p, const char *q) {$/;"	f	class:MultiplexExtension	signature:(const char *p, const char *q)
OnMarginClick	Extender.h	/^	virtual bool OnMarginClick() { return false; }$/;"	f	class:Extension	access:public	signature:()
OnMarginClick	LuaExtension.cxx	/^bool LuaExtension::OnMarginClick() {$/;"	f	class:LuaExtension	signature:()
OnMarginClick	MultiplexExtension.cxx	/^bool MultiplexExtension::OnMarginClick() {$/;"	f	class:MultiplexExtension	signature:()
OnOpen	Extender.h	/^	virtual bool OnOpen(const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(const char *)
OnOpen	LuaExtension.cxx	/^bool LuaExtension::OnOpen(const char *filename) {$/;"	f	class:LuaExtension	signature:(const char *filename)
OnOpen	MultiplexExtension.cxx	/^bool MultiplexExtension::OnOpen(const char *filename) {$/;"	f	class:MultiplexExtension	signature:(const char *filename)
OnSave	Extender.h	/^	virtual bool OnSave(const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(const char *)
OnSave	LuaExtension.cxx	/^bool LuaExtension::OnSave(const char *filename) {$/;"	f	class:LuaExtension	signature:(const char *filename)
OnSave	MultiplexExtension.cxx	/^bool MultiplexExtension::OnSave(const char *filename) {$/;"	f	class:MultiplexExtension	signature:(const char *filename)
OnSavePointLeft	Extender.h	/^	virtual bool OnSavePointLeft() { return false; }$/;"	f	class:Extension	access:public	signature:()
OnSavePointLeft	LuaExtension.cxx	/^bool LuaExtension::OnSavePointLeft() {$/;"	f	class:LuaExtension	signature:()
OnSavePointLeft	MultiplexExtension.cxx	/^bool MultiplexExtension::OnSavePointLeft() {$/;"	f	class:MultiplexExtension	signature:()
OnSavePointReached	Extender.h	/^	virtual bool OnSavePointReached() { return false; }$/;"	f	class:Extension	access:public	signature:()
OnSavePointReached	LuaExtension.cxx	/^bool LuaExtension::OnSavePointReached() {$/;"	f	class:LuaExtension	signature:()
OnSavePointReached	MultiplexExtension.cxx	/^bool MultiplexExtension::OnSavePointReached() {$/;"	f	class:MultiplexExtension	signature:()
OnStyle	Extender.h	/^	virtual bool OnStyle(unsigned int, int, int, StyleWriter *) {$/;"	f	class:Extension	access:public	signature:(unsigned int, int, int, StyleWriter *)
OnStyle	LuaExtension.cxx	/^bool LuaExtension::OnStyle(unsigned int startPos, int lengthDoc, int initStyle, StyleWriter *styler) {$/;"	f	class:LuaExtension	signature:(unsigned int startPos, int lengthDoc, int initStyle, StyleWriter *styler)
OnStyle	MultiplexExtension.cxx	/^bool MultiplexExtension::OnStyle(unsigned int p, int q, int r, StyleWriter *s) {$/;"	f	class:MultiplexExtension	signature:(unsigned int p, int q, int r, StyleWriter *s)
OnSwitchFile	Extender.h	/^	virtual bool OnSwitchFile(const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(const char *)
OnSwitchFile	LuaExtension.cxx	/^bool LuaExtension::OnSwitchFile(const char *filename) {$/;"	f	class:LuaExtension	signature:(const char *filename)
OnSwitchFile	MultiplexExtension.cxx	/^bool MultiplexExtension::OnSwitchFile(const char *filename) {$/;"	f	class:MultiplexExtension	signature:(const char *filename)
OnTimer	SciTEBase.cxx	/^void SciTEBase::OnTimer() {$/;"	f	class:SciTEBase	signature:()
OnUpdateUI	Extender.h	/^	virtual bool OnUpdateUI() { return false; }$/;"	f	class:Extension	access:public	signature:()
OnUpdateUI	LuaExtension.cxx	/^bool LuaExtension::OnUpdateUI() {$/;"	f	class:LuaExtension	signature:()
OnUpdateUI	MultiplexExtension.cxx	/^bool MultiplexExtension::OnUpdateUI() {$/;"	f	class:MultiplexExtension	signature:()
OnUserListSelection	Extender.h	/^	virtual bool OnUserListSelection(int, const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(int, const char *)
OnUserListSelection	LuaExtension.cxx	/^bool LuaExtension::OnUserListSelection(int listType, const char *selection) {$/;"	f	class:LuaExtension	signature:(int listType, const char *selection)
OnUserListSelection	MultiplexExtension.cxx	/^bool MultiplexExtension::OnUserListSelection(int listType, const char *selection) {$/;"	f	class:MultiplexExtension	signature:(int listType, const char *selection)
OnUserStrip	Extender.h	/^	virtual bool OnUserStrip(int \/* control *\/, int \/* change *\/) { return false; }$/;"	f	class:Extension	access:public	signature:(int , int )
OnUserStrip	LuaExtension.cxx	/^bool LuaExtension::OnUserStrip(int control, int change) {$/;"	f	class:LuaExtension	signature:(int control, int change)
OnUserStrip	MultiplexExtension.cxx	/^bool MultiplexExtension::OnUserStrip(int control, int change) {$/;"	f	class:MultiplexExtension	signature:(int control, int change)
Open	FilePath.cxx	/^FILE *FilePath::Open(const GUI::gui_char *mode) const {$/;"	f	class:FilePath	signature:(const GUI::gui_char *mode) const
Open	SciTEIO.cxx	/^bool SciTEBase::Open(const FilePath &file, OpenFlags of) {$/;"	f	class:SciTEBase	signature:(const FilePath &file, OpenFlags of)
OpenCompletion	SciTEBase.h	/^	enum OpenCompletion { ocSynchronous, ocCompleteCurrent, ocCompleteSwitch };$/;"	g	class:SciTEBase	access:protected
OpenCurrentFile	SciTEIO.cxx	/^void SciTEBase::OpenCurrentFile(long long fileSize, bool suppressMessage, bool asynchronous) {$/;"	f	class:SciTEBase	signature:(long long fileSize, bool suppressMessage, bool asynchronous)
OpenFilesFromStdin	SciTEIO.cxx	/^void SciTEBase::OpenFilesFromStdin() {$/;"	f	class:SciTEBase	signature:()
OpenFlags	SciTEBase.h	/^	enum OpenFlags {$/;"	g	class:SciTEBase	access:protected
OpenFromStdin	SciTEIO.cxx	/^void SciTEBase::OpenFromStdin(bool UseOutputPane) {$/;"	f	class:SciTEBase	signature:(bool UseOutputPane)
OpenProperties	SciTEProps.cxx	/^void SciTEBase::OpenProperties(int propsFile) {$/;"	f	class:SciTEBase	signature:(int propsFile)
OpenSelected	SciTEIO.cxx	/^bool SciTEBase::OpenSelected() {$/;"	f	class:SciTEBase	signature:()
OpenUriList	SciTEBase.h	/^	virtual void OpenUriList(const char *) {}$/;"	f	class:SciTEBase	access:protected	signature:(const char *)
Original	SciTEIO.cxx	/^	const char *Original() const {$/;"	f	class:FileReader	access:public	signature:() const
OutputAppendString	SciTEBase.cxx	/^void SciTEBase::OutputAppendString(const char *s, int len) {$/;"	f	class:SciTEBase	signature:(const char *s, int len)
OutputAppendStringSynchronised	SciTEBase.cxx	/^void SciTEBase::OutputAppendStringSynchronised(const char *s, int len) {$/;"	f	class:SciTEBase	signature:(const char *s, int len)
PDFStyle	ExportPDF.cxx	/^struct PDFStyle {$/;"	s	file:
PDF_ENCODING	ExportPDF.cxx	67;"	d	file:
PDF_FONTSIZE_DEFAULT	ExportPDF.cxx	62;"	d	file:
PDF_FONT_DEFAULT	ExportPDF.cxx	61;"	d	file:
PDF_HEIGHT_DEFAULT	ExportPDF.cxx	64;"	d	file:
PDF_MARGIN_DEFAULT	ExportPDF.cxx	66;"	d	file:
PDF_SPACING_DEFAULT	ExportPDF.cxx	63;"	d	file:
PDF_TAB_DEFAULT	ExportPDF.cxx	60;"	d	file:
PDF_WIDTH_DEFAULT	ExportPDF.cxx	65;"	d	file:
PDFfontAscenders	ExportPDF.cxx	/^static short PDFfontAscenders[] =  { 629, 718, 699 };$/;"	v	file:
PDFfontDescenders	ExportPDF.cxx	/^static short PDFfontDescenders[] = { 157, 207, 217 };$/;"	v	file:
PDFfontNames	ExportPDF.cxx	/^static const char *PDFfontNames[] = {$/;"	v	file:
PDFfontWidths	ExportPDF.cxx	/^static short PDFfontWidths[] =     { 600,   0,   0 };$/;"	v	file:
PROPERTIES_EXTENSION	PropSetFile.h	66;"	d
PROPSETFILE_H	PropSetFile.h	9;"	d
Pane	Extender.h	/^	enum Pane { paneEditor=1, paneOutput=2, paneFindOutput=3 };$/;"	g	class:ExtensionAPI	access:public
PaneMatchObject	LuaExtension.cxx	/^struct PaneMatchObject {$/;"	s	file:
ParseIndicatorDefinition	StyleDefinition.cxx	/^bool IndicatorDefinition::ParseIndicatorDefinition(const char *definition) {$/;"	f	class:IndicatorDefinition	signature:(const char *definition)
ParseStyleDefinition	StyleDefinition.cxx	/^bool StyleDefinition::ParseStyleDefinition(const char *definition) {$/;"	f	class:StyleDefinition	signature:(const char *definition)
Perform	SciTEBase.cxx	/^void SciTEBase::Perform(const char *actionList) {$/;"	f	class:SciTEBase	signature:(const char *actionList)
PerformDeferredTasks	SciTEIO.cxx	/^void SciTEBase::PerformDeferredTasks() {$/;"	f	class:SciTEBase	signature:()
PerformInsertAbbreviation	SciTEBase.cxx	/^bool SciTEBase::PerformInsertAbbreviation() {$/;"	f	class:SciTEBase	signature:()
PerformOne	SciTEBase.cxx	/^void SciTEBase::PerformOne(char *action) {$/;"	f	class:SciTEBase	signature:(char *action)
Point	GUI.h	/^	explicit Point(int x_=0, int y_=0) : x(x_), y(y_) {$/;"	f	class:GUI::Point	access:public	signature:(int x_=0, int y_=0)
Point	GUI.h	/^class Point {$/;"	c	namespace:GUI
PopStack	SciTEBuffers.cxx	/^void BufferList::PopStack() {$/;"	f	class:BufferList	signature:()
Position	LuaExtension.cxx	/^	static int Position(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
PreOpenCheck	SciTEIO.cxx	/^bool SciTEBase::PreOpenCheck(const GUI::gui_char *) {$/;"	f	class:SciTEBase	signature:(const GUI::gui_char *)
PreProcKind	SciTEBase.h	/^	enum PreProcKind { ppcNone, ppcStart, ppcMiddle, ppcEnd, ppcDummy };	\/\/\/< Indicate the kind of preprocessor condition line$/;"	g	class:SciTEBase	access:protected
PrepareBufferForSave	SciTEIO.cxx	/^bool SciTEBase::PrepareBufferForSave(const FilePath &saveName) {$/;"	f	class:SciTEBase	signature:(const FilePath &saveName)
Prev	SciTEBuffers.cxx	/^void SciTEBase::Prev() {$/;"	f	class:SciTEBase	signature:()
PrevInStack	SciTEBuffers.cxx	/^void SciTEBase::PrevInStack() {$/;"	f	class:SciTEBase	signature:()
Previous	LuaExtension.cxx	/^	static int Previous(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
Print	SciTEBase.h	/^	virtual void Print(bool) {}$/;"	f	class:SciTEBase	access:protected	signature:(bool)
PrintSetup	SciTEBase.h	/^	virtual void PrintSetup() {}$/;"	f	class:SciTEBase	access:protected	signature:()
ProcessCommandLine	SciTEBase.cxx	/^bool SciTEBase::ProcessCommandLine(GUI::gui_string &args, int phase) {$/;"	f	class:SciTEBase	signature:(GUI::gui_string &args, int phase)
ProgressMade	Worker.h	/^	size_t ProgressMade() const {$/;"	f	struct:Worker	access:public	signature:() const
PropSetFile	PropSetFile.cxx	/^PropSetFile::PropSetFile(bool lowerKeys_) : lowerKeys(lowerKeys_), superPS(0) {$/;"	f	class:PropSetFile	signature:(bool lowerKeys_)
PropSetFile	PropSetFile.cxx	/^PropSetFile::PropSetFile(const PropSetFile &copy) : lowerKeys(copy.lowerKeys), props(copy.props), superPS(copy.superPS) {$/;"	f	class:PropSetFile	signature:(const PropSetFile &copy)
PropSetFile	PropSetFile.h	/^class PropSetFile {$/;"	c
Property	SciTEBase.cxx	/^std::string SciTEBase::Property(const char *key) {$/;"	f	class:SciTEBase	signature:(const char *key)
PropertyFromDirector	SciTEBase.cxx	/^void SciTEBase::PropertyFromDirector(const char *arg) {$/;"	f	class:SciTEBase	signature:(const char *arg)
PropertyToDirector	SciTEBase.cxx	/^void SciTEBase::PropertyToDirector(const char *arg) {$/;"	f	class:SciTEBase	signature:(const char *arg)
PublishGlobalBufferData	LuaExtension.cxx	/^static void PublishGlobalBufferData() {$/;"	f	file:	signature:()
PushMethod	LuaExtension.cxx	/^	void PushMethod(lua_State *L, lua_CFunction fn, const char *name) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L, lua_CFunction fn, const char *name)
RTF_BODYCLOSE	ExportRTF.cxx	54;"	d	file:
RTF_BODYOPEN	ExportRTF.cxx	53;"	d	file:
RTF_BOLD_OFF	ExportRTF.cxx	61;"	d	file:
RTF_BOLD_ON	ExportRTF.cxx	60;"	d	file:
RTF_COLOR	ExportRTF.cxx	74;"	d	file:
RTF_COLORDEFCLOSE	ExportRTF.cxx	51;"	d	file:
RTF_COLORDEFOPEN	ExportRTF.cxx	50;"	d	file:
RTF_EOLN	ExportRTF.cxx	69;"	d	file:
RTF_FONTDEFCLOSE	ExportRTF.cxx	49;"	d	file:
RTF_FONTDEFOPEN	ExportRTF.cxx	48;"	d	file:
RTF_FONTFACE	ExportRTF.cxx	73;"	d	file:
RTF_HEADERCLOSE	ExportRTF.cxx	52;"	d	file:
RTF_HEADEROPEN	ExportRTF.cxx	47;"	d	file:
RTF_ITALIC_OFF	ExportRTF.cxx	63;"	d	file:
RTF_ITALIC_ON	ExportRTF.cxx	62;"	d	file:
RTF_SETBACKGROUND	ExportRTF.cxx	59;"	d	file:
RTF_SETCOLOR	ExportRTF.cxx	58;"	d	file:
RTF_SETFONTFACE	ExportRTF.cxx	56;"	d	file:
RTF_SETFONTSIZE	ExportRTF.cxx	57;"	d	file:
RTF_STRIKE_OFF	ExportRTF.cxx	67;"	d	file:
RTF_STRIKE_ON	ExportRTF.cxx	66;"	d	file:
RTF_TAB	ExportRTF.cxx	70;"	d	file:
RTF_UNDERLINE_OFF	ExportRTF.cxx	65;"	d	file:
RTF_UNDERLINE_ON	ExportRTF.cxx	64;"	d	file:
R_OK	FilePath.cxx	443;"	d	file:
RandomColour	Credits.cxx	/^	RandomColour() :$/;"	f	class:__anon1::RandomColour	access:public	signature:()
RandomColour	Credits.cxx	/^class RandomColour {$/;"	c	namespace:__anon1	file:
Range	SciTEBase.cxx	/^char *SciTEBase::Range(Pane p, int start, int end) {$/;"	f	class:SciTEBase	signature:(Pane p, int start, int end)
RangeExtend	SciTEBase.cxx	/^void SciTEBase::RangeExtend($/;"	f	class:SciTEBase	signature:( GUI::ScintillaWindow &wCurrent, int &selStart, int &selEnd, bool (SciTEBase::*ischarforsel)(char ch))
RangeExtendAndGrab	SciTEBase.cxx	/^std::string SciTEBase::RangeExtendAndGrab($/;"	f	class:SciTEBase	signature:( GUI::ScintillaWindow &wCurrent, int &selStart, int &selEnd, bool (SciTEBase::*ischarforsel)(char ch), bool stripEol )
RangeIsAllWhitespace	SciTEBase.cxx	/^bool SciTEBase::RangeIsAllWhitespace(int start, int end) {$/;"	f	class:SciTEBase	signature:(int start, int end)
Read	FilePath.cxx	/^std::vector<char> FilePath::Read() const {$/;"	f	class:FilePath	signature:() const
Read	PropSetFile.cxx	/^bool PropSetFile::Read(const FilePath &filename, const FilePath &directoryForImports,$/;"	f	class:PropSetFile	signature:(const FilePath &filename, const FilePath &directoryForImports, const ImportFilter &filter, FilePathSet *imports, size_t depth)
ReadAPI	SciTEProps.cxx	/^void SciTEBase::ReadAPI(const std::string &fileNameForExtension) {$/;"	f	class:SciTEBase	signature:(const std::string &fileNameForExtension)
ReadAbbrevPropFile	SciTEProps.cxx	/^void SciTEBase::ReadAbbrevPropFile() {$/;"	f	class:SciTEBase	signature:()
ReadDirectoryPropFile	SciTEProps.cxx	/^void SciTEBase::ReadDirectoryPropFile() {$/;"	f	class:SciTEBase	signature:()
ReadEmbeddedProperties	SciTEProps.cxx	/^void SciTEBase::ReadEmbeddedProperties() {$/;"	f	class:SciTEBase	signature:()
ReadEnvironment	SciTEProps.cxx	/^void SciTEBase::ReadEnvironment() {$/;"	f	class:SciTEBase	signature:()
ReadFontProperties	SciTEProps.cxx	/^void SciTEBase::ReadFontProperties() {$/;"	f	class:SciTEBase	signature:()
ReadFromMemory	PropSetFile.cxx	/^void PropSetFile::ReadFromMemory(const char *data, size_t len, const FilePath &directoryForImports,$/;"	f	class:PropSetFile	signature:(const char *data, size_t len, const FilePath &directoryForImports, const ImportFilter &filter, FilePathSet *imports, size_t depth)
ReadGlobalPropFile	SciTEProps.cxx	/^void SciTEBase::ReadGlobalPropFile() {$/;"	f	class:SciTEBase	signature:()
ReadLine	PropSetFile.cxx	/^PropSetFile::ReadLineState PropSetFile::ReadLine(const char *lineBuffer, ReadLineState rls, const FilePath &directoryForImports,$/;"	f	class:PropSetFile	signature:(const char *lineBuffer, ReadLineState rls, const FilePath &directoryForImports, const ImportFilter &filter, FilePathSet *imports, size_t depth)
ReadLineState	PropSetFile.h	/^	enum ReadLineState { rlActive, rlExcludedModule, rlConditionFalse };$/;"	g	class:PropSetFile	access:public
ReadLocalPropFile	SciTEProps.cxx	/^void SciTEBase::ReadLocalPropFile() {$/;"	f	class:SciTEBase	signature:()
ReadLocalization	SciTEProps.cxx	/^void SciTEBase::ReadLocalization() {$/;"	f	class:SciTEBase	signature:()
ReadNum	SciTEBase.cxx	/^static unsigned int ReadNum(const char *&t) {$/;"	f	file:	signature:(const char *&t)
ReadProperties	SciTEProps.cxx	/^void SciTEBase::ReadProperties() {$/;"	f	class:SciTEBase	signature:()
ReadPropertiesInitial	SciTEProps.cxx	/^void SciTEBase::ReadPropertiesInitial() {$/;"	f	class:SciTEBase	signature:()
RecentFile	SciTEBase.h	/^	RecentFile() {$/;"	f	class:RecentFile	access:public	signature:()
RecentFile	SciTEBase.h	/^class RecentFile : public FilePath {$/;"	c	inherits:FilePath
RecordMacroCommand	SciTEBase.cxx	/^bool SciTEBase::RecordMacroCommand(const SCNotification *notification) {$/;"	f	class:SciTEBase	signature:(const SCNotification *notification)
Rectangle	GUI.h	/^	Rectangle(int left_=0, int top_=0, int right_=0, int bottom_ = 0) :$/;"	f	class:GUI::Rectangle	access:public	signature:(int left_=0, int top_=0, int right_=0, int bottom_ = 0)
Rectangle	GUI.h	/^class Rectangle {$/;"	c	namespace:GUI
Redraw	SciTEBase.cxx	/^void SciTEBase::Redraw() {$/;"	f	class:SciTEBase	signature:()
RedrawMenu	SciTEBase.h	/^	virtual void RedrawMenu() {}$/;"	f	class:SciTEBase	access:protected	signature:()
RegisterExtension	MultiplexExtension.cxx	/^bool MultiplexExtension::RegisterExtension(Extension &ext_) {$/;"	f	class:MultiplexExtension	signature:(Extension &ext_)
ReloadProperties	SciTEIO.cxx	/^void SciTEBase::ReloadProperties() {$/;"	f	class:SciTEBase	signature:()
Remove	FilePath.cxx	/^void FilePath::Remove() const {$/;"	f	class:FilePath	signature:() const
Remove	SciTEBase.cxx	/^void SciTEBase::Remove(Pane p, int start, int end) {$/;"	f	class:SciTEBase	signature:(Pane p, int start, int end)
Remove	StringHelpers.h	/^int Remove(T &s, const T &sFind) {$/;"	f	signature:(T &s, const T &sFind)
RemoveAll	Containers.h	/^	void RemoveAll() {$/;"	f	class:TArray	access:public	signature:()
RemoveAll	Containers.h	/^	void RemoveAll() {$/;"	f	class:TList	access:public	signature:()
RemoveAll	Containers.h	/^	void RemoveAll() {$/;"	f	class:TMap	access:public	signature:()
RemoveAt	Containers.h	/^	void RemoveAt(T_POSITION position) {$/;"	f	class:TList	access:public	signature:(T_POSITION position)
RemoveAt	Containers.h	/^	void RemoveAt(int nIndex, int nCount = 1) {$/;"	f	class:TArray	access:public	signature:(int nIndex, int nCount = 1)
RemoveBuffer	Extender.h	/^	virtual bool RemoveBuffer(int) { return false; }$/;"	f	class:Extension	access:public	signature:(int)
RemoveBuffer	LuaExtension.cxx	/^bool LuaExtension::RemoveBuffer(int index) {$/;"	f	class:LuaExtension	signature:(int index)
RemoveBuffer	MultiplexExtension.cxx	/^bool MultiplexExtension::RemoveBuffer(int index) {$/;"	f	class:MultiplexExtension	signature:(int index)
RemoveCurrent	SciTEBuffers.cxx	/^void BufferList::RemoveCurrent() {$/;"	f	class:BufferList	signature:()
RemoveEscSeq	SciTEBuffers.cxx	/^static void RemoveEscSeq(std::string &s) {$/;"	f	file:	signature:(std::string &s)
RemoveFileFromStack	SciTEBuffers.cxx	/^void SciTEBase::RemoveFileFromStack(const FilePath &file) {$/;"	f	class:SciTEBase	signature:(const FilePath &file)
RemoveFindMarks	SciTEBase.cxx	/^void SciTEBase::RemoveFindMarks() {$/;"	f	class:SciTEBase	signature:()
RemoveHead	Containers.h	/^	TYPE RemoveHead() {$/;"	f	class:TList	access:public	signature:()
RemoveInvisible	SciTEBuffers.cxx	/^void BufferList::RemoveInvisible(int index) {$/;"	f	class:BufferList	signature:(int index)
RemoveKey	Containers.h	/^	bool RemoveKey(ARG_KEY key) {$/;"	f	class:TMap	access:public	signature:(ARG_KEY key)
RemoveStringOnce	StringHelpers.cxx	/^bool RemoveStringOnce(std::string &s, const char *marker) {$/;"	f	signature:(std::string &s, const char *marker)
RemoveTail	Containers.h	/^	TYPE RemoveTail() {$/;"	f	class:TList	access:public	signature:()
RemoveToolsMenu	SciTEBuffers.cxx	/^void SciTEBase::RemoveToolsMenu() {$/;"	f	class:SciTEBase	signature:()
ReplaceAll	SciTEBase.cxx	/^int SciTEBase::ReplaceAll(bool inSelection) {$/;"	f	class:SciTEBase	signature:(bool inSelection)
ReplaceInBuffers	SciTEBase.cxx	/^int SciTEBase::ReplaceInBuffers() {$/;"	f	class:SciTEBase	signature:()
ReplaceOnce	SciTEBase.cxx	/^void SciTEBase::ReplaceOnce(bool showWarnings) {$/;"	f	class:SciTEBase	signature:(bool showWarnings)
RestoreFromSession	SciTEBuffers.cxx	/^void SciTEBase::RestoreFromSession(const Session &session) {$/;"	f	class:SciTEBase	signature:(const Session &session)
RestoreRecentMenu	SciTEBuffers.cxx	/^void SciTEBase::RestoreRecentMenu() {$/;"	f	class:SciTEBase	signature:()
RestoreSession	SciTEBuffers.cxx	/^void SciTEBase::RestoreSession() {$/;"	f	class:SciTEBase	signature:()
RestoreState	SciTEBuffers.cxx	/^void SciTEBase::RestoreState(const Buffer &buffer, bool restoreBookmarks) {$/;"	f	class:SciTEBase	signature:(const Buffer &buffer, bool restoreBookmarks)
Revert	SciTEIO.cxx	/^void SciTEBase::Revert() {$/;"	f	class:SciTEBase	signature:()
RootLength	FilePath.cxx	/^int FilePath::RootLength() {$/;"	f	class:FilePath	signature:()
SCITEKEYS_H	SciTEKeys.h	9;"	d
SCITE_H	SciTE.h	9;"	d
STYLEWRITER_H	StyleWriter.h	9;"	d
SURROGATE_FIRST_VALUE	Utf8_16.cxx	/^enum { SURROGATE_FIRST_VALUE = 0x10000 };$/;"	e	enum:__anon37	file:
SURROGATE_LEAD_FIRST	Utf8_16.cxx	/^enum { SURROGATE_LEAD_FIRST = 0xD800 };$/;"	e	enum:__anon33	file:
SURROGATE_LEAD_LAST	Utf8_16.cxx	/^enum { SURROGATE_LEAD_LAST = 0xDBFF };$/;"	e	enum:__anon34	file:
SURROGATE_TRAIL_FIRST	Utf8_16.cxx	/^enum { SURROGATE_TRAIL_FIRST = 0xDC00 };$/;"	e	enum:__anon35	file:
SURROGATE_TRAIL_LAST	Utf8_16.cxx	/^enum { SURROGATE_TRAIL_LAST = 0xDFFF };$/;"	e	enum:__anon36	file:
SafeGetCharAt	StyleWriter.h	/^	char SafeGetCharAt(int position, char chDefault=' ') {$/;"	f	class:TextReader	access:public	signature:(int position, char chDefault=Ã)
SameNameAs	FilePath.cxx	/^bool FilePath::SameNameAs(const FilePath &other) const {$/;"	f	class:FilePath	signature:(const FilePath &other) const
SameNameAs	FilePath.cxx	/^bool FilePath::SameNameAs(const GUI::gui_char *other) const {$/;"	f	class:FilePath	signature:(const GUI::gui_char *other) const
Save	SciTEIO.cxx	/^bool SciTEBase::Save(SaveFlags sf) {$/;"	f	class:SciTEBase	signature:(SaveFlags sf)
SaveAllBuffers	SciTEBuffers.cxx	/^SciTEBase::SaveResult SciTEBase::SaveAllBuffers(bool alwaysYes) {$/;"	f	class:SciTEBase	signature:(bool alwaysYes)
SaveAs	SciTEIO.cxx	/^void SciTEBase::SaveAs(const GUI::gui_char *file, bool fixCase) {$/;"	f	class:SciTEBase	signature:(const GUI::gui_char *file, bool fixCase)
SaveBuffer	SciTEIO.cxx	/^bool SciTEBase::SaveBuffer(const FilePath &saveName, SaveFlags sf) {$/;"	f	class:SciTEBase	signature:(const FilePath &saveName, SaveFlags sf)
SaveFlags	SciTEBase.h	/^	enum SaveFlags {$/;"	g	class:SciTEBase	access:protected
SaveIfNotOpen	SciTEIO.cxx	/^bool SciTEBase::SaveIfNotOpen(const FilePath &destFile, bool fixCase) {$/;"	f	class:SciTEBase	signature:(const FilePath &destFile, bool fixCase)
SaveIfUnsure	SciTEIO.cxx	/^SciTEBase::SaveResult SciTEBase::SaveIfUnsure(bool forceQuestion, SaveFlags sf) {$/;"	f	class:SciTEBase	signature:(bool forceQuestion, SaveFlags sf)
SaveIfUnsureAll	SciTEIO.cxx	/^SciTEBase::SaveResult SciTEBase::SaveIfUnsureAll() {$/;"	f	class:SciTEBase	signature:()
SaveIfUnsureForBuilt	SciTEIO.cxx	/^SciTEBase::SaveResult SciTEBase::SaveIfUnsureForBuilt() {$/;"	f	class:SciTEBase	signature:()
SaveName	SciTEIO.cxx	/^FilePath SciTEBase::SaveName(const char *ext) const {$/;"	f	class:SciTEBase	signature:(const char *ext) const
SaveResult	SciTEBase.h	/^	enum SaveResult {$/;"	g	class:SciTEBase	access:protected
SaveSessionDialog	SciTEBase.h	/^	virtual void SaveSessionDialog() {}$/;"	f	class:SciTEBase	access:protected	signature:()
SaveSessionFile	SciTEBuffers.cxx	/^void SciTEBase::SaveSessionFile(const GUI::gui_char *sessionName) {$/;"	f	class:SciTEBase	signature:(const GUI::gui_char *sessionName)
SaveTitledBuffers	SciTEBuffers.cxx	/^void SciTEBase::SaveTitledBuffers() {$/;"	f	class:SciTEBase	signature:()
SaveToHTML	ExportHTML.cxx	/^void SciTEBase::SaveToHTML(const FilePath &saveName) {$/;"	f	class:SciTEBase	signature:(const FilePath &saveName)
SaveToPDF	ExportPDF.cxx	/^void SciTEBase::SaveToPDF(const FilePath &saveName) {$/;"	f	class:SciTEBase	signature:(const FilePath &saveName)
SaveToRTF	ExportRTF.cxx	/^void SciTEBase::SaveToRTF(const FilePath &saveName, int start, int end) {$/;"	f	class:SciTEBase	signature:(const FilePath &saveName, int start, int end)
SaveToStreamRTF	ExportRTF.cxx	/^void SciTEBase::SaveToStreamRTF(std::ostream &os, int start, int end) {$/;"	f	class:SciTEBase	signature:(std::ostream &os, int start, int end)
SaveToTEX	ExportTEX.cxx	/^void SciTEBase::SaveToTEX(const FilePath &saveName) {$/;"	f	class:SciTEBase	signature:(const FilePath &saveName)
SaveToXML	ExportXML.cxx	/^void SciTEBase::SaveToXML(const FilePath &saveName) {$/;"	f	class:SciTEBase	signature:(const FilePath &saveName)
SavingInBackground	SciTEBuffers.cxx	/^bool BufferList::SavingInBackground() const {$/;"	f	class:BufferList	signature:() const
SciTEBase	SciTEBase.cxx	/^SciTEBase::SciTEBase(Extension *ext) : apis(true), pwFocussed(&wEditor), extender(ext) {$/;"	f	class:SciTEBase	signature:(Extension *ext)
SciTEBase	SciTEBase.h	/^class SciTEBase : public ExtensionAPI, public Searcher, public WorkerListener {$/;"	c	inherits:ExtensionAPI,Searcher,WorkerListener
SciTEKeys	SciTEKeys.h	/^class SciTEKeys {$/;"	c
ScintillaFailure	GUI.h	/^	explicit ScintillaFailure(sptr_t status_) : status(status_) {$/;"	f	struct:GUI::ScintillaFailure	access:public	signature:(sptr_t status_)
ScintillaFailure	GUI.h	/^struct ScintillaFailure {$/;"	s	namespace:GUI
ScintillaWindow	GUI.h	/^	ScintillaWindow() : fn(0), ptr(0), status() {$/;"	f	class:GUI::ScintillaWindow	access:public	signature:()
ScintillaWindow	GUI.h	/^class ScintillaWindow : public Window {$/;"	c	namespace:GUI	inherits:Window
ScrollEditorIfNeeded	SciTEBase.cxx	/^void SciTEBase::ScrollEditorIfNeeded() {$/;"	f	class:SciTEBase	signature:()
SearchFlags	SciTEBase.cxx	/^int SciTEBase::SearchFlags(bool regularExpressions) const {$/;"	f	class:SciTEBase	signature:(bool regularExpressions) const
SearchOption	SciTEBase.h	/^struct SearchOption {$/;"	s
SearchUI	SciTEBase.h	/^	SearchUI() : pSearcher(0) {$/;"	f	class:SearchUI	access:public	signature:()
SearchUI	SciTEBase.h	/^class SearchUI {$/;"	c
Searcher	SciTEBase.cxx	/^Searcher::Searcher() {$/;"	f	class:Searcher	signature:()
Searcher	SciTEBase.h	/^class Searcher {$/;"	c
SelectedRange	SciTEBase.h	/^	SelectedRange(int position_= INVALID_POSITION, int anchor_= INVALID_POSITION) :$/;"	f	struct:SelectedRange	access:public	signature:(int position_= INVALID_POSITION, int anchor_= INVALID_POSITION)
SelectedRange	SciTEBase.h	/^struct SelectedRange {$/;"	s
SelectionAdd	SciTEBase.cxx	/^void SciTEBase::SelectionAdd(AddSelection add) {$/;"	f	class:SciTEBase	signature:(AddSelection add)
SelectionFilename	SciTEBase.cxx	/^std::string SciTEBase::SelectionFilename() {$/;"	f	class:SciTEBase	signature:()
SelectionIntoFind	SciTEBase.cxx	/^void SciTEBase::SelectionIntoFind(bool stripEol \/*=true*\/) {$/;"	f	class:SciTEBase	signature:(bool stripEol )
SelectionIntoProperties	SciTEBase.cxx	/^void SciTEBase::SelectionIntoProperties() {$/;"	f	class:SciTEBase	signature:()
SelectionWord	SciTEBase.cxx	/^std::string SciTEBase::SelectionWord(bool stripEol \/*=true*\/) {$/;"	f	class:SciTEBase	signature:(bool stripEol )
Send	SciTEBase.cxx	/^sptr_t SciTEBase::Send(Pane p, unsigned int msg, uptr_t wParam, sptr_t lParam) {$/;"	f	class:SciTEBase	signature:(Pane p, unsigned int msg, uptr_t wParam, sptr_t lParam)
SendOneProperty	SciTEBase.cxx	/^void SciTEBase::SendOneProperty(const char *kind, const char *key, const char *val) {$/;"	f	class:SciTEBase	signature:(const char *kind, const char *key, const char *val)
SendProperty	Extender.h	/^	virtual bool SendProperty(const char *) { return false; }$/;"	f	class:Extension	access:public	signature:(const char *)
SendProperty	MultiplexExtension.cxx	/^bool MultiplexExtension::SendProperty(const char *prop) {$/;"	f	class:MultiplexExtension	signature:(const char *prop)
SeqEnd	SciTEBuffers.cxx	/^static bool SeqEnd(int ch) {$/;"	f	file:	signature:(int ch)
Session	SciTEBase.h	/^class Session {$/;"	c
Set	FilePath.cxx	/^void FilePath::Set(FilePath const &directory, FilePath const &name) {$/;"	f	class:FilePath	signature:(FilePath const &directory, FilePath const &name)
Set	FilePath.cxx	/^void FilePath::Set(FilePath const &other) {$/;"	f	class:FilePath	signature:(FilePath const &other)
Set	FilePath.cxx	/^void FilePath::Set(const GUI::gui_char *fileName_) {$/;"	f	class:FilePath	signature:(const GUI::gui_char *fileName_)
Set	PropSetFile.cxx	/^void PropSetFile::Set(const char *key, const char *val, ptrdiff_t lenKey, ptrdiff_t lenVal) {$/;"	f	class:PropSetFile	signature:(const char *key, const char *val, ptrdiff_t lenKey, ptrdiff_t lenVal)
Set	PropSetFile.cxx	/^void PropSetFile::Set(const char *keyVal) {$/;"	f	class:PropSetFile	signature:(const char *keyVal)
Set	StringList.cxx	/^void StringList::Set(const char *s) {$/;"	f	class:StringList	signature:(const char *s)
Set	StringList.cxx	/^void StringList::Set(const std::vector<char> &data) {$/;"	f	class:StringList	signature:(const std::vector<char> &data)
SetAboutMessage	Credits.cxx	/^void SciTEBase::SetAboutMessage(GUI::ScintillaWindow &wsci, const char *appTitle) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &wsci, const char *appTitle)
SetAboutStyle	Credits.cxx	/^static void SetAboutStyle(GUI::ScintillaWindow &wsci, int style, Colour fore) {$/;"	f	file:	signature:(GUI::ScintillaWindow &wsci, int style, Colour fore)
SetAt	Containers.h	/^	void SetAt(ARG_KEY key, ARG_VALUE newValue) { $/;"	f	class:TMap	access:public	signature:(ARG_KEY key, ARG_VALUE newValue)
SetAt	Containers.h	/^	void SetAt(T_POSITION pos, ARG_TYPE newElement) {$/;"	f	class:TList	access:public	signature:(T_POSITION pos, ARG_TYPE newElement)
SetAt	Containers.h	/^	void SetAt(int nIndex, ARG_TYPE newElement) {$/;"	f	class:TArray	access:public	signature:(int nIndex, ARG_TYPE newElement)
SetBuffersMenu	SciTEBuffers.cxx	/^void SciTEBase::SetBuffersMenu() {$/;"	f	class:SciTEBase	signature:()
SetCancelFlag	JobQueue.h	/^	long SetCancelFlag(long value) {$/;"	f	class:JobQueue	access:public	signature:(long value)
SetCaretAsStart	SciTEBase.cxx	/^void SciTEBase::SetCaretAsStart() {$/;"	f	class:SciTEBase	signature:()
SetCaseSensitiveFilenames	PropSetFile.h	/^	static void SetCaseSensitiveFilenames(bool caseSensitiveFilenames_) {$/;"	f	class:PropSetFile	access:public	signature:(bool caseSensitiveFilenames_)
SetCodePage	StyleWriter.h	/^	void SetCodePage(int codePage_) {$/;"	f	class:TextReader	access:public	signature:(int codePage_)
SetCompleted	Worker.h	/^	void SetCompleted() {$/;"	f	struct:Worker	access:public	signature:()
SetCurrent	SciTEBuffers.cxx	/^void BufferList::SetCurrent(int index) {$/;"	f	class:BufferList	signature:(int index)
SetDirectory	FilePath.cxx	/^void FilePath::SetDirectory(FilePath const &directory) {$/;"	f	class:FilePath	signature:(FilePath const &directory)
SetDocumentAt	SciTEBuffers.cxx	/^void SciTEBase::SetDocumentAt(int index, bool updateStack) {$/;"	f	class:SciTEBase	signature:(int index, bool updateStack)
SetEol	SciTEBuffers.cxx	/^void SciTEBase::SetEol() {$/;"	f	class:SciTEBase	signature:()
SetExecuting	JobQueue.h	/^	void SetExecuting(bool state) {$/;"	f	class:JobQueue	access:public	signature:(bool state)
SetFileName	SciTEIO.cxx	/^void SciTEBase::SetFileName(const FilePath &openName, bool fixCase) {$/;"	f	class:SciTEBase	signature:(const FilePath &openName, bool fixCase)
SetFileStackMenu	SciTEBuffers.cxx	/^void SciTEBase::SetFileStackMenu() {$/;"	f	class:SciTEBase	signature:()
SetFilter	PropSetFile.cxx	/^void ImportFilter::SetFilter(const std::string &sExcludes, const std::string &sIncludes) {$/;"	f	class:ImportFilter	signature:(const std::string &sExcludes, const std::string &sIncludes)
SetFind	SciTEBase.cxx	/^void SciTEBase::SetFind(const char *sFind) {$/;"	f	class:SciTEBase	signature:(const char *sFind)
SetFindText	SciTEBase.cxx	/^void SciTEBase::SetFindText(const char *sFind) {$/;"	f	class:SciTEBase	signature:(const char *sFind)
SetFromListText	StringList.cxx	/^void StringList::SetFromListText() {$/;"	f	class:StringList	signature:()
SetHomeProperties	SciTEBase.cxx	/^void SciTEBase::SetHomeProperties() {$/;"	f	class:SciTEBase	signature:()
SetID	GUI.h	/^	void SetID(WindowID wid_) {$/;"	f	class:GUI::ScintillaWindow	access:public	signature:(WindowID wid_)
SetID	GUI.h	/^	void SetID(WindowID wid_) {$/;"	f	class:GUI::Window	access:public	signature:(WindowID wid_)
SetIdler	SciTEBase.cxx	/^void SciTEBase::SetIdler(bool on) {$/;"	f	class:SciTEBase	signature:(bool on)
SetImportMenu	SciTEProps.cxx	/^void SciTEBase::SetImportMenu() {$/;"	f	class:SciTEBase	signature:()
SetIndentSettings	SciTEBuffers.cxx	/^void SciTEBase::SetIndentSettings() {$/;"	f	class:SciTEBase	signature:()
SetInteger	PropSetFile.cxx	/^void PropSetFile::SetInteger(const char *key, int i) {$/;"	f	class:PropSetFile	signature:(const char *key, int i)
SetLanguageMenu	SciTEProps.cxx	/^void SciTEBase::SetLanguageMenu() {$/;"	f	class:SciTEBase	signature:()
SetLevel	StyleWriter.cxx	/^void StyleWriter::SetLevel(int line, int level) {$/;"	f	class:StyleWriter	signature:(int line, int level)
SetLevelAt	LuaExtension.cxx	/^	static int SetLevelAt(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
SetLineIndentation	SciTEBase.cxx	/^void SciTEBase::SetLineIndentation(int line, int indent) {$/;"	f	class:SciTEBase	signature:(int line, int indent)
SetLineNumberWidth	SciTEBase.cxx	/^void SciTEBase::SetLineNumberWidth() {$/;"	f	class:SciTEBase	signature:()
SetLineState	LuaExtension.cxx	/^	static int SetLineState(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
SetLineState	StyleWriter.cxx	/^int StyleWriter::SetLineState(int line, int state) {$/;"	f	class:StyleWriter	signature:(int line, int state)
SetMenuItemLocalised	SciTEBuffers.cxx	/^void SciTEBase::SetMenuItemLocalised(int menuNumber, int position, int itemID,$/;"	f	class:SciTEBase	signature:(int menuNumber, int position, int itemID, const char *text, const char *mnemonic)
SetMissing	SciTEBase.h	/^	void SetMissing(const std::string &missing_) {$/;"	f	class:Localization	access:public	signature:(const std::string &missing_)
SetOneIndicator	SciTEProps.cxx	/^void SciTEBase::SetOneIndicator(GUI::ScintillaWindow &win, int indicator, const IndicatorDefinition &ind) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, int indicator, const IndicatorDefinition &ind)
SetOneStyle	SciTEProps.cxx	/^void SciTEBase::SetOneStyle(GUI::ScintillaWindow &win, int style, const StyleDefinition &sd) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, int style, const StyleDefinition &sd)
SetOutputVisibility	SciTEBase.cxx	/^void SciTEBase::SetOutputVisibility(bool show) {$/;"	f	class:SciTEBase	signature:(bool show)
SetOverrideLanguage	SciTEBase.cxx	/^void SciTEBase::SetOverrideLanguage(int cmdID) {$/;"	f	class:SciTEBase	signature:(int cmdID)
SetPaneFocus	SciTEBase.cxx	/^void SciTEBase::SetPaneFocus(bool editPane) {$/;"	f	class:SciTEBase	signature:(bool editPane)
SetPropertiesInitial	SciTEProps.cxx	/^void SciTEBase::SetPropertiesInitial() {$/;"	f	class:SciTEBase	signature:()
SetProperty	SciTEBase.cxx	/^void SciTEBase::SetProperty(const char *key, const char *val) {$/;"	f	class:SciTEBase	signature:(const char *key, const char *val)
SetReplace	SciTEBase.cxx	/^void SciTEBase::SetReplace(const char *sReplace) {$/;"	f	class:SciTEBase	signature:(const char *sReplace)
SetSearcher	SciTEBase.h	/^	void SetSearcher(Searcher *pSearcher_) {$/;"	f	class:SearchUI	access:public	signature:(Searcher *pSearcher_)
SetSelection	SciTEBase.cxx	/^void SciTEBase::SetSelection(int anchor, int currentPos) {$/;"	f	class:SciTEBase	signature:(int anchor, int currentPos)
SetSizeJob	Worker.h	/^	void SetSizeJob(size_t size) {$/;"	f	struct:Worker	access:public	signature:(size_t size)
SetState	LuaExtension.cxx	/^	static int SetState(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
SetStyleBlock	SciTEProps.cxx	/^void SciTEBase::SetStyleBlock(GUI::ScintillaWindow &win, const char *lang, int start, int last) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, const char *lang, int start, int last)
SetStyleFor	SciTEProps.cxx	/^void SciTEBase::SetStyleFor(GUI::ScintillaWindow &win, const char *lang) {$/;"	f	class:SciTEBase	signature:(GUI::ScintillaWindow &win, const char *lang)
SetTextProperties	SciTEBase.cxx	/^void SciTEBase::SetTextProperties($/;"	f	class:SciTEBase	signature:( PropSetFile &ps)
SetTimeFromFile	SciTEBase.h	/^	void SetTimeFromFile() {$/;"	f	class:Buffer	access:public	signature:()
SetToolsMenu	SciTEBuffers.cxx	/^void SciTEBase::SetToolsMenu() {$/;"	f	class:SciTEBase	signature:()
SetVisible	SciTEBuffers.cxx	/^void BufferList::SetVisible(int index, bool visible) {$/;"	f	class:BufferList	signature:(int index, bool visible)
SetWindowName	SciTEBase.cxx	/^void SciTEBase::SetWindowName() {$/;"	f	class:SciTEBase	signature:()
SetWorkingDirectory	FilePath.cxx	/^bool FilePath::SetWorkingDirectory() const {$/;"	f	class:FilePath	signature:() const
SetterFunction	IFaceTable.h	/^	IFaceFunction SetterFunction() const {$/;"	f	struct:IFaceProperty	access:public	signature:() const
ShellEscape	PropSetFile.cxx	/^static std::string ShellEscape(const char *toEscape) {$/;"	f	file:	signature:(const char *toEscape)
ShiftTab	SciTEBuffers.cxx	/^void SciTEBase::ShiftTab(int indexFrom, int indexTo) {$/;"	f	class:SciTEBase	signature:(int indexFrom, int indexTo)
ShiftTo	SciTEBuffers.cxx	/^void BufferList::ShiftTo(int indexFrom, int indexTo) {$/;"	f	class:BufferList	signature:(int indexFrom, int indexTo)
ShortcutItem	SciTEBase.h	/^class ShortcutItem {$/;"	c
ShouldClose	SciTEBase.h	/^	bool ShouldClose(bool found) const {$/;"	f	class:Searcher	access:public	signature:(bool found) const
ShouldNotSave	SciTEBase.h	/^	bool ShouldNotSave() const {$/;"	f	class:Buffer	access:public	signature:() const
ShowBackgroundProgress	SciTEBase.h	/^	virtual void ShowBackgroundProgress(const GUI::gui_string & \/* explanation *\/, size_t \/* size *\/, size_t \/* progress *\/) {}$/;"	f	class:SciTEBase	access:protected	signature:(const GUI::gui_string & , size_t , size_t )
ShowMessages	SciTEBuffers.cxx	/^void SciTEBase::ShowMessages(int line) {$/;"	f	class:SciTEBase	signature:(int line)
ShowOutputOnMainThread	SciTEBase.cxx	/^void SciTEBase::ShowOutputOnMainThread() {$/;"	f	class:SciTEBase	signature:()
ShowOutputPane	JobQueue.h	/^	bool ShowOutputPane() const {$/;"	f	class:JobQueue	access:public	signature:() const
ShutDown	SciTEBase.cxx	/^void SciTEBase::ShutDown() {$/;"	f	class:SciTEBase	signature:()
SingleBuffer	SciTEBuffers.cxx	/^bool BufferList::SingleBuffer() const {$/;"	f	class:BufferList	signature:() const
SizeJob	Worker.h	/^	size_t SizeJob() const {$/;"	f	struct:Worker	access:public	signature:() const
Slash	StringHelpers.cxx	/^std::string Slash(const std::string &s, bool quoteQuotes) {$/;"	f	signature:(const std::string &s, bool quoteQuotes)
SortIfNeeded	StringList.cxx	/^void StringList::SortIfNeeded(bool ignoreCase) {$/;"	f	class:StringList	signature:(bool ignoreCase)
SptrFromPointer	Extender.h	/^inline sptr_t SptrFromPointer(void *p) {$/;"	f	signature:(void *p)
SptrFromString	Extender.h	/^inline sptr_t SptrFromString(const char *cp) {$/;"	f	signature:(const char *cp)
StackMenu	SciTEBuffers.cxx	/^void SciTEBase::StackMenu(int pos) {$/;"	f	class:SciTEBase	signature:(int pos)
StackMenuNext	SciTEBuffers.cxx	/^void SciTEBase::StackMenuNext() {$/;"	f	class:SciTEBase	signature:()
StackMenuPrev	SciTEBuffers.cxx	/^void SciTEBase::StackMenuPrev() {$/;"	f	class:SciTEBase	signature:()
StackNext	SciTEBuffers.cxx	/^int BufferList::StackNext() {$/;"	f	class:BufferList	signature:()
StackPrev	SciTEBuffers.cxx	/^int BufferList::StackPrev() {$/;"	f	class:BufferList	signature:()
StartAt	StyleWriter.cxx	/^void StyleWriter::StartAt(unsigned int start, char chMask) {$/;"	f	class:StyleWriter	signature:(unsigned int start, char chMask)
StartAutoComplete	SciTEBase.cxx	/^bool SciTEBase::StartAutoComplete() {$/;"	f	class:SciTEBase	signature:()
StartAutoCompleteWord	SciTEBase.cxx	/^bool SciTEBase::StartAutoCompleteWord(bool onlyOneWord) {$/;"	f	class:SciTEBase	signature:(bool onlyOneWord)
StartBlockComment	SciTEBase.cxx	/^bool SciTEBase::StartBlockComment() {$/;"	f	class:SciTEBase	signature:()
StartBoxComment	SciTEBase.cxx	/^bool SciTEBase::StartBoxComment() {$/;"	f	class:SciTEBase	signature:()
StartCallTip	SciTEBase.cxx	/^bool SciTEBase::StartCallTip() {$/;"	f	class:SciTEBase	signature:()
StartExpandAbbreviation	SciTEBase.cxx	/^bool SciTEBase::StartExpandAbbreviation() {$/;"	f	class:SciTEBase	signature:()
StartInsertAbbreviation	SciTEBase.cxx	/^bool SciTEBase::StartInsertAbbreviation() {$/;"	f	class:SciTEBase	signature:()
StartMacroList	SciTEBase.cxx	/^bool SciTEBase::StartMacroList(const char *words) {$/;"	f	class:SciTEBase	signature:(const char *words)
StartMatch	MatchMarker.cxx	/^void MatchMarker::StartMatch(GUI::ScintillaWindow *pSci_,$/;"	f	class:MatchMarker	signature:(GUI::ScintillaWindow *pSci_, const std::string &textMatch_, int flagsMatch_, int styleMatch_, int indicator_, int bookMark_)
StartPlayMacro	SciTEBase.cxx	/^void SciTEBase::StartPlayMacro() {$/;"	f	class:SciTEBase	signature:()
StartRecordMacro	SciTEBase.cxx	/^void SciTEBase::StartRecordMacro() {$/;"	f	class:SciTEBase	signature:()
StartSegment	StyleWriter.cxx	/^void StyleWriter::StartSegment(unsigned int pos) {$/;"	f	class:StyleWriter	signature:(unsigned int pos)
StartStreamComment	SciTEBase.cxx	/^bool SciTEBase::StartStreamComment() {$/;"	f	class:SciTEBase	signature:()
StartStyling	LuaExtension.cxx	/^	static int StartStyling(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
StartStyling	LuaExtension.cxx	/^	void StartStyling(unsigned int startPos_, unsigned int length, int initStyle_) {$/;"	f	struct:StylingContext	access:public	signature:(unsigned int startPos_, unsigned int length, int initStyle_)
StartsWith	StringHelpers.cxx	/^bool StartsWith(GUI::gui_string const &s, GUI::gui_string const &start) {$/;"	f	signature:(GUI::gui_string const &s, GUI::gui_string const &start)
StartsWith	StringHelpers.cxx	/^bool StartsWith(std::string const &s, const char *start) {$/;"	f	signature:(std::string const &s, const char *start)
State	LuaExtension.cxx	/^	static int State(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
StdStringFromDouble	StringHelpers.cxx	/^std::string StdStringFromDouble(double d, int precision) {$/;"	f	signature:(double d, int precision)
StdStringFromInteger	StringHelpers.cxx	/^std::string StdStringFromInteger(int i) {$/;"	f	signature:(int i)
StdStringFromSizeT	StringHelpers.cxx	/^std::string StdStringFromSizeT(size_t i) {$/;"	f	signature:(size_t i)
Stop	MatchMarker.cxx	/^void MatchMarker::Stop() {$/;"	f	class:MatchMarker	signature:()
StopRecordMacro	SciTEBase.cxx	/^void SciTEBase::StopRecordMacro() {$/;"	f	class:SciTEBase	signature:()
StringEqual	PropSetFile.cxx	/^static bool StringEqual(const char *a, const char *b, size_t len, bool caseSensitive) {$/;"	f	file:	signature:(const char *a, const char *b, size_t len, bool caseSensitive)
StringFromLines	SciTEBuffers.cxx	/^std::string StringFromLines(const std::vector<int> &lines) {$/;"	f	namespace:__anon28	signature:(const std::vector<int> &lines)
StringList	StringList.h	/^	explicit StringList(bool onlyLineEnds_ = false) :$/;"	f	class:StringList	access:public	signature:(bool onlyLineEnds_ = false)
StringList	StringList.h	/^class StringList {$/;"	c
StringSplit	StringHelpers.h	/^std::vector<T> StringSplit(const T &text, int separator) {$/;"	f	signature:(const T &text, int separator)
StripCommand	StripDefinition.h	/^enum StripCommand { scUnknown, scClicked, scChange, scFocusIn, scFocusOut };$/;"	g
StripDefinition	StripDefinition.h	/^	explicit StripDefinition(GUI::gui_string definition) {$/;"	f	class:StripDefinition	access:public	signature:(GUI::gui_string definition)
StripDefinition	StripDefinition.h	/^class StripDefinition {$/;"	c
StripTrailingSpaces	SciTEIO.cxx	/^void SciTEBase::StripTrailingSpaces() {$/;"	f	class:SciTEBase	signature:()
StyleAndWords	SciTEBase.h	/^	StyleAndWords() : styleNumber(0) {$/;"	f	struct:StyleAndWords	access:public	signature:()
StyleAndWords	SciTEBase.h	/^struct StyleAndWords {$/;"	s
StyleAt	LuaExtension.cxx	/^	static int StyleAt(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
StyleAt	StyleWriter.cxx	/^int TextReader::StyleAt(int position) {$/;"	f	class:TextReader	signature:(int position)
StyleDefinition	StyleDefinition.cxx	/^StyleDefinition::StyleDefinition(const char *definition) :$/;"	f	class:StyleDefinition	signature:(const char *definition)
StyleDefinition	StyleDefinition.h	/^class StyleDefinition {$/;"	c
StyleDefinitionFor	SciTEProps.cxx	/^StyleDefinition SciTEBase::StyleDefinitionFor(int style) {$/;"	f	class:SciTEBase	signature:(int style)
StyleString	SciTEProps.cxx	/^std::string SciTEBase::StyleString(const char *lang, int style) const {$/;"	f	class:SciTEBase	signature:(const char *lang, int style) const
StyleWriter	StyleWriter.cxx	/^StyleWriter::StyleWriter(GUI::ScintillaWindow &sw_) :$/;"	f	class:StyleWriter	signature:(GUI::ScintillaWindow &sw_)
StyleWriter	StyleWriter.h	/^class StyleWriter : public TextReader {$/;"	c	inherits:TextReader
StylingContext	LuaExtension.cxx	/^struct StylingContext {$/;"	s	file:
Substitute	StringHelpers.cxx	/^int Substitute(std::string &s, const std::string &sFind, const std::string &sReplace) {$/;"	f	signature:(std::string &s, const std::string &sFind, const std::string &sReplace)
Substitute	StringHelpers.cxx	/^int Substitute(std::wstring &s, const std::wstring &sFind, const std::wstring &sReplace) {$/;"	f	signature:(std::wstring &s, const std::wstring &sFind, const std::wstring &sReplace)
SubsystemFromChar	JobQueue.cxx	/^JobSubsystem SubsystemFromChar(char c) {$/;"	f	signature:(char c)
SubsystemType	SciTEBuffers.cxx	/^JobSubsystem SciTEBase::SubsystemType(const char *cmd) {$/;"	f	class:SciTEBase	signature:(const char *cmd)
Swap	SciTEBuffers.cxx	/^void BufferList::Swap(int indexA, int indexB) {$/;"	f	class:BufferList	signature:(int indexA, int indexB)
SwitchDocumentAt	SciTEBuffers.cxx	/^void SciTEBase::SwitchDocumentAt(int index, sptr_t pdoc) {$/;"	f	class:SciTEBase	signature:(int index, sptr_t pdoc)
T	StringHelpers.h	/^void StringCopy(T (&dest)[count], const T* source) {$/;"	v
TArray	Containers.h	/^	TArray() {};$/;"	f	class:TArray	access:public	signature:()
TArray	Containers.h	/^class TArray$/;"	c
TList	Containers.h	/^	TList() {$/;"	f	class:TList	access:public	signature:()
TList	Containers.h	/^class TList$/;"	c
TMap	Containers.h	/^	TMap() {$/;"	f	class:TMap	access:public	signature:()
TMap	Containers.h	/^class TMap$/;"	c
TOOLS_START	SciTE.h	58;"	d
T_CONTAINERS_POSITION	Containers.h	/^struct T_CONTAINERS_POSITION { };$/;"	s
T_POSITION	Containers.h	/^typedef T_CONTAINERS_POSITION* T_POSITION;$/;"	t
Text	SciTEProps.cxx	/^GUI::gui_string Localization::Text(const char *s, bool retainIfNotFound) {$/;"	f	class:Localization	signature:(const char *s, bool retainIfNotFound)
TextRead	SciTEIO.cxx	/^void SciTEBase::TextRead(FileWorker *pFileWorker) {$/;"	f	class:SciTEBase	signature:(FileWorker *pFileWorker)
TextReader	StyleWriter.cxx	/^TextReader::TextReader(GUI::ScintillaWindow &sw_) :$/;"	f	class:TextReader	signature:(GUI::ScintillaWindow &sw_)
TextReader	StyleWriter.h	/^class TextReader {$/;"	c
TextWritten	SciTEIO.cxx	/^void SciTEBase::TextWritten(FileWorker *pFileWorker) {$/;"	f	class:SciTEBase	signature:(FileWorker *pFileWorker)
TimeCommands	JobQueue.h	/^	bool TimeCommands() const {$/;"	f	class:JobQueue	access:public	signature:() const
TimerEnd	SciTEBase.cxx	/^void SciTEBase::TimerEnd(int \/* mask *\/) {$/;"	f	class:SciTEBase	signature:(int )
TimerStart	SciTEBase.cxx	/^void SciTEBase::TimerStart(int \/* mask *\/) {$/;"	f	class:SciTEBase	signature:(int )
ToggleFoldRecursive	SciTEBase.cxx	/^void SciTEBase::ToggleFoldRecursive(int line, int level) {$/;"	f	class:SciTEBase	signature:(int line, int level)
ToggleOutputVisible	SciTEBase.cxx	/^void SciTEBase::ToggleOutputVisible() {$/;"	f	class:SciTEBase	signature:()
Token	LuaExtension.cxx	/^	static int Token(lua_State *L) {$/;"	f	struct:StylingContext	access:public	signature:(lua_State *L)
ToolIsImmediate	SciTEBuffers.cxx	/^bool SciTEBase::ToolIsImmediate(int item) {$/;"	f	class:SciTEBase	signature:(int item)
ToolsMenu	SciTEBuffers.cxx	/^void SciTEBase::ToolsMenu(int item) {$/;"	f	class:SciTEBase	signature:(int item)
Trace	SciTEBase.cxx	/^void SciTEBase::Trace(const char *s) {$/;"	f	class:SciTEBase	signature:(const char *s)
UCControlType	StripDefinition.h	/^	enum UCControlType { ucStatic, ucEdit, ucCombo, ucButton, ucDefaultButton } controlType;$/;"	g	class:UserControl	access:public
UIAvailable	SciTEBase.cxx	/^void SciTEBase::UIAvailable() {$/;"	f	class:SciTEBase	signature:()
UIClosed	SciTEBase.cxx	/^void SciTEBase::UIClosed() {$/;"	f	class:SciTEBase	signature:()
UIHasFocus	SciTEBase.cxx	/^void SciTEBase::UIHasFocus() {$/;"	f	class:SciTEBase	signature:()
UTF32Character	StringHelpers.cxx	/^unsigned int UTF32Character(const unsigned char *utf8) {$/;"	f	signature:(const unsigned char *utf8)
UnSlash	StringHelpers.cxx	/^unsigned int UnSlash(char *s) {$/;"	f	signature:(char *s)
UnSlashAsNeeded	SciTEBase.cxx	/^static std::string UnSlashAsNeeded(const std::string &s, bool escapes, bool regularExpression) {$/;"	f	file:	signature:(const std::string &s, bool escapes, bool regularExpression)
UnSlashLowOctal	StringHelpers.cxx	/^static unsigned int UnSlashLowOctal(char *s) {$/;"	f	file:	signature:(char *s)
UnSlashLowOctalString	StringHelpers.cxx	/^std::string UnSlashLowOctalString(const char *s) {$/;"	f	signature:(const char *s)
UnSlashString	StringHelpers.cxx	/^std::string UnSlashString(const char *s) {$/;"	f	signature:(const char *s)
UniMode	Cookie.h	/^enum UniMode {$/;"	g
Unset	PropSetFile.cxx	/^void PropSetFile::Unset(const char *key, int lenKey) {$/;"	f	class:PropSetFile	signature:(const char *key, int lenKey)
UnsetProperty	SciTEBase.cxx	/^void SciTEBase::UnsetProperty(const char *key) {$/;"	f	class:SciTEBase	signature:(const char *key)
UpdateBuffersCurrent	SciTEBuffers.cxx	/^void SciTEBase::UpdateBuffersCurrent() {$/;"	f	class:SciTEBase	signature:()
UpdateProgress	SciTEIO.cxx	/^void SciTEBase::UpdateProgress(Worker *) {$/;"	f	class:SciTEBase	signature:(Worker *)
UpdateStatusBar	SciTEBase.cxx	/^void SciTEBase::UpdateStatusBar(bool bUpdateSlowData) {$/;"	f	class:SciTEBase	signature:(bool bUpdateSlowData)
UptrFromString	Extender.h	/^inline uptr_t UptrFromString(const char *cp) {$/;"	f	signature:(const char *cp)
UserControl	StripDefinition.h	/^	UserControl(UCControlType controlType_, const GUI::gui_string &text_, int item_) : $/;"	f	class:UserControl	access:public	signature:(UCControlType controlType_, const GUI::gui_string &text_, int item_)
UserControl	StripDefinition.h	/^class UserControl {$/;"	c
UserFilePath	SciTEBuffers.cxx	/^FilePath SciTEBase::UserFilePath(const GUI::gui_char *name) {$/;"	f	class:SciTEBase	signature:(const GUI::gui_char *name)
Utf16_Iter	Utf8_16.cxx	/^Utf16_Iter::Utf16_Iter() {$/;"	f	class:Utf16_Iter	signature:()
Utf16_Iter	Utf8_16.h	/^class Utf16_Iter : public Utf8_16 {$/;"	c	inherits:Utf8_16
Utf8_16	Utf8_16.h	/^class Utf8_16 {$/;"	c
Utf8_16_Read	Utf8_16.cxx	/^Utf8_16_Read::Utf8_16_Read() {$/;"	f	class:Utf8_16_Read	signature:()
Utf8_16_Read	Utf8_16.h	/^class Utf8_16_Read : public Utf8_16 {$/;"	c	inherits:Utf8_16
Utf8_16_Write	Utf8_16.cxx	/^Utf8_16_Write::Utf8_16_Write() {$/;"	f	class:Utf8_16_Write	signature:()
Utf8_16_Write	Utf8_16.h	/^class Utf8_16_Write : public Utf8_16 {$/;"	c	inherits:Utf8_16
Utf8_Iter	Utf8_16.cxx	/^Utf8_Iter::Utf8_Iter() {$/;"	f	class:Utf8_Iter	signature:()
Utf8_Iter	Utf8_16.h	/^class Utf8_Iter : public Utf8_16 {$/;"	c	inherits:Utf8_16
VERSION_SCITE	SciTE.h	12;"	d
VERSION_WORDS	SciTE.h	13;"	d
VarChain	PropSetFile.cxx	/^	VarChain(const char*var_=NULL, const VarChain *link_=NULL): var(var_), link(link_) {}$/;"	f	struct:VarChain	access:public	signature:(const char*var_=NULL, const VarChain *link_=NULL)
VarChain	PropSetFile.cxx	/^struct VarChain {$/;"	s	file:
ViewWhitespace	SciTEBase.cxx	/^void SciTEBase::ViewWhitespace(bool view) {$/;"	f	class:SciTEBase	signature:(bool view)
WORK_FILEPROGRESS	FileWorker.h	/^	WORK_FILEPROGRESS = 3,$/;"	e	enum:__anon2
WORK_FILEREAD	FileWorker.h	/^	WORK_FILEREAD = 1,$/;"	e	enum:__anon2
WORK_FILEWRITTEN	FileWorker.h	/^	WORK_FILEWRITTEN = 2,$/;"	e	enum:__anon2
WORK_PLATFORM	FileWorker.h	/^	WORK_PLATFORM = 100$/;"	e	enum:__anon2
Width	GUI.h	/^	int Width() const { return right - left; }$/;"	f	class:GUI::Rectangle	access:public	signature:() const
Window	GUI.h	/^	Window() : wid(0) {$/;"	f	class:GUI::Window	access:public	signature:()
Window	GUI.h	/^class Window {$/;"	c	namespace:GUI
WindowID	GUI.h	/^typedef void *WindowID;$/;"	t	namespace:GUI
WindowSetFocus	SciTEBase.cxx	/^void WindowSetFocus(GUI::ScintillaWindow &w) {$/;"	f	signature:(GUI::ScintillaWindow &w)
Worker	Worker.h	/^	Worker() : mutex(Mutex::Create()), completed(false), cancelling(false), jobSize(1), jobProgress(0) {$/;"	f	struct:Worker	access:public	signature:()
Worker	Worker.h	/^struct Worker {$/;"	s
WorkerCommand	SciTEBase.cxx	/^void SciTEBase::WorkerCommand(int cmd, Worker *pWorker) {$/;"	f	class:SciTEBase	signature:(int cmd, Worker *pWorker)
WorkerListener	Worker.h	/^struct WorkerListener {$/;"	s
_WIN32_WINNT	FilePath.cxx	31;"	d	file:
_WIN32_WINNT	FilePath.cxx	32;"	d	file:
_WIN32_WINNT	FileWorker.cxx	24;"	d	file:
_WIN32_WINNT	FileWorker.cxx	25;"	d	file:
__STDC_LIMIT_MACROS	SciTEIO.cxx	10;"	d	file:
_popen	scite_lua_win.h	19;"	d
abbrevInsert	SciTEBase.h	/^	std::string abbrevInsert;$/;"	m	class:SciTEBase	access:protected
absolute_index	LuaExtension.cxx	/^inline int absolute_index(lua_State *L, int index) {$/;"	f	signature:(lua_State *L, int index)
access	FilePath.cxx	/^static int access(const wchar_t *path, int mode) {$/;"	f	file:	signature:(const wchar_t *path, int mode)
addEach	SciTEBase.h	/^	enum AddSelection { addNext, addEach };$/;"	e	enum:SciTEBase::AddSelection
addNext	SciTEBase.h	/^	enum AddSelection { addNext, addEach };$/;"	e	enum:SciTEBase::AddSelection
allowMenuActions	SciTEBase.h	/^	bool allowMenuActions;$/;"	m	class:SciTEBase	access:protected
alphaIndicator	SciTEBase.h	/^	int alphaIndicator;$/;"	m	class:SciTEBase	access:protected
anchor	SciTEBase.h	/^	int anchor;$/;"	m	struct:SelectedRange	access:public
apis	SciTEBase.h	/^	StringList apis;$/;"	m	class:SciTEBase	access:protected
apisFileNames	SciTEBase.h	/^	std::string apisFileNames;$/;"	m	class:SciTEBase	access:protected
atLineEnd	LuaExtension.cxx	/^	bool atLineEnd;$/;"	m	struct:StylingContext	file:	access:public
atLineStart	LuaExtension.cxx	/^	bool atLineStart;$/;"	m	struct:StylingContext	file:	access:public
autoCCausedByOnlyOne	SciTEBase.h	/^	bool autoCCausedByOnlyOne;$/;"	m	class:SciTEBase	access:protected
autoCompleteFillUpCharacters	SciTEBase.h	/^	std::string autoCompleteFillUpCharacters;$/;"	m	class:SciTEBase	access:protected
autoCompleteIgnoreCase	SciTEBase.h	/^	bool autoCompleteIgnoreCase;$/;"	m	class:SciTEBase	access:protected
autoCompleteStartCharacters	SciTEBase.h	/^	std::string autoCompleteStartCharacters;$/;"	m	class:SciTEBase	access:protected
autoCompleteTypeSeparator	SciTEBase.h	/^	std::string autoCompleteTypeSeparator;$/;"	m	class:SciTEBase	access:protected
b	Credits.cxx	/^	int b;$/;"	m	class:__anon1::RandomColour	file:	access:public
back	StyleDefinition.h	/^	std::string back;$/;"	m	class:StyleDefinition	access:public
bf	SciTEIO.cxx	/^	std::unique_ptr<BufferedFile> bf;$/;"	m	class:FileReader	file:	access:private
bigBit	GUI.h	/^	long bigBit;$/;"	m	class:GUI::ElapsedTime	access:private
blockEnd	SciTEBase.h	/^	StyleAndWords blockEnd;$/;"	m	class:SciTEBase	access:protected
blockSize	FileWorker.h	/^const size_t blockSize = 131072;$/;"	v
blockStart	SciTEBase.h	/^	StyleAndWords blockStart;$/;"	m	class:SciTEBase	access:protected
bookMark	MatchMarker.h	/^	int bookMark;$/;"	m	class:MatchMarker	access:private
bookmarkBluegem	SciTEProps.cxx	/^static const char *bookmarkBluegem[] = {$/;"	v	file:
bookmarks	SciTEBase.h	/^	std::vector<int> bookmarks;$/;"	m	class:Buffer	access:public
bookmarks	SciTEBase.h	/^	std::vector<int> bookmarks;$/;"	m	struct:BufferState	access:public
bottom	GUI.h	/^	int bottom;$/;"	m	class:GUI::Rectangle	access:public
braceCount	SciTEBase.h	/^	int braceCount;$/;"	m	class:SciTEBase	access:protected
bracesCheck	SciTEBase.h	/^	bool bracesCheck;$/;"	m	class:SciTEBase	access:protected
bracesSloppy	SciTEBase.h	/^	bool bracesSloppy;$/;"	m	class:SciTEBase	access:protected
bracesStyle	SciTEBase.h	/^	int bracesStyle;$/;"	m	class:SciTEBase	access:protected
buf	StyleWriter.h	/^	char buf[bufferSize+1];$/;"	m	class:TextReader	access:protected
bufLen	SciTEIO.cxx	/^	enum {bufLen = 64 * 1024};$/;"	e	enum:BufferedFile::__anon29	file:
buffer	SciTEIO.cxx	/^	char buffer[bufLen];$/;"	m	class:BufferedFile	file:	access:private
bufferCmdID	SciTEBase.h	/^	enum { fileStackCmdID = IDM_MRUFILE, bufferCmdID = IDM_BUFFER };$/;"	e	enum:SciTEBase::__anon13
bufferMax	SciTEBase.h	/^	enum { bufferMax = IDM_IMPORT - IDM_BUFFER };$/;"	e	enum:SciTEBase::__anon25
bufferSize	StyleWriter.h	/^	enum {bufferSize=4000, slopSize=bufferSize\/8};$/;"	e	enum:TextReader::__anon32
bufferedDraw	SciTEBase.h	/^	bool bufferedDraw;$/;"	m	class:SciTEBase	access:protected
buffers	SciTEBase.h	/^	BufferList buffers;$/;"	m	class:SciTEBase	access:protected
buffers	SciTEBase.h	/^	std::vector<Buffer> buffers;$/;"	m	class:BufferList	access:public
buffers	SciTEBase.h	/^	std::vector<BufferState> buffers;$/;"	m	class:Session	access:public
callTipIgnoreCase	SciTEBase.h	/^	bool callTipIgnoreCase;$/;"	m	class:SciTEBase	access:protected
callTipUseEscapes	SciTEBase.h	/^	bool callTipUseEscapes;$/;"	m	class:SciTEBase	access:protected
call_function	LuaExtension.cxx	/^static bool call_function(lua_State *L, int nargs, bool ignoreFunctionReturnValue=false) {$/;"	f	file:	signature:(lua_State *L, int nargs, bool ignoreFunctionReturnValue=false)
calltipEndDefinition	SciTEBase.h	/^	std::string calltipEndDefinition;$/;"	m	class:SciTEBase	access:protected
calltipParametersEnd	SciTEBase.h	/^	std::string calltipParametersEnd;$/;"	m	class:SciTEBase	access:protected
calltipParametersSeparators	SciTEBase.h	/^	std::string calltipParametersSeparators;$/;"	m	class:SciTEBase	access:protected
calltipParametersStart	SciTEBase.h	/^	std::string calltipParametersStart;$/;"	m	class:SciTEBase	access:protected
calltipWordCharacters	SciTEBase.h	/^	std::string calltipWordCharacters;$/;"	m	class:SciTEBase	access:protected
canGet	Utf8_16.h	/^	bool canGet() const { return m_eState == eStart; }$/;"	f	class:Utf8_Iter	access:public	signature:() const
cancelFlag	JobQueue.h	/^	long cancelFlag;$/;"	m	class:JobQueue	access:public
cancelling	Worker.h	/^	volatile bool cancelling;$/;"	m	struct:Worker	access:private
capturedMouse	SciTEBase.h	/^	bool capturedMouse;$/;"	m	class:SciTEBase	access:protected
caseForce	StyleDefinition.h	/^	int caseForce;$/;"	m	class:StyleDefinition	access:public
caseSensitive	SciTEIO.cxx	/^	bool caseSensitive;$/;"	m	class:FileReader	file:	access:private
caseSensitiveFilenames	PropSetFile.cxx	/^bool PropSetFile::caseSensitiveFilenames = false;$/;"	m	class:PropSetFile	file:
caseSensitiveFilenames	PropSetFile.h	/^	static bool caseSensitiveFilenames;$/;"	m	class:PropSetFile	access:private
cf_global_dostring	LuaExtension.cxx	/^static int cf_global_dostring(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_global_metatable_index	LuaExtension.cxx	/^static int cf_global_metatable_index(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_global_print	LuaExtension.cxx	/^static int cf_global_print(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_global_trace	LuaExtension.cxx	/^static int cf_global_trace(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_ifaceprop_metatable_index	LuaExtension.cxx	/^static int cf_ifaceprop_metatable_index(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_ifaceprop_metatable_newindex	LuaExtension.cxx	/^static int cf_ifaceprop_metatable_newindex(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_match_metatable_index	LuaExtension.cxx	/^static int cf_match_metatable_index(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_match_metatable_tostring	LuaExtension.cxx	/^static int cf_match_metatable_tostring(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_match_replace	LuaExtension.cxx	/^static int cf_match_replace(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_append	LuaExtension.cxx	/^static int cf_pane_append(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_findtext	LuaExtension.cxx	/^static int cf_pane_findtext(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_iface_function	LuaExtension.cxx	/^static int cf_pane_iface_function(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_insert	LuaExtension.cxx	/^static int cf_pane_insert(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_match	LuaExtension.cxx	/^static int cf_pane_match(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_match_generator	LuaExtension.cxx	/^static int cf_pane_match_generator(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_metatable_index	LuaExtension.cxx	/^static int cf_pane_metatable_index(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_metatable_newindex	LuaExtension.cxx	/^static int cf_pane_metatable_newindex(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_remove	LuaExtension.cxx	/^static int cf_pane_remove(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_pane_textrange	LuaExtension.cxx	/^static int cf_pane_textrange(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_props_metatable_index	LuaExtension.cxx	/^static int cf_props_metatable_index(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_props_metatable_newindex	LuaExtension.cxx	/^static int cf_props_metatable_newindex(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_constname	LuaExtension.cxx	/^static int cf_scite_constname(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_menu_command	LuaExtension.cxx	/^static int cf_scite_menu_command(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_open	LuaExtension.cxx	/^static int cf_scite_open(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_send	LuaExtension.cxx	/^static int cf_scite_send(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_strip_set	LuaExtension.cxx	/^static int cf_scite_strip_set(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_strip_set_list	LuaExtension.cxx	/^static int cf_scite_strip_set_list(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_strip_show	LuaExtension.cxx	/^static int cf_scite_strip_show(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_strip_value	LuaExtension.cxx	/^static int cf_scite_strip_value(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
cf_scite_update_status_bar	LuaExtension.cxx	/^static int cf_scite_update_status_bar(lua_State *L) {$/;"	f	file:	signature:(lua_State *L)
changeable	StyleDefinition.h	/^	bool changeable;$/;"	m	class:StyleDefinition	access:public
characterSet	SciTEBase.h	/^	int characterSet;$/;"	m	class:SciTEBase	access:protected
chdir	FilePath.cxx	/^static int chdir(const wchar_t *dirname) {$/;"	f	file:	signature:(const wchar_t *dirname)
check_pane_object	LuaExtension.cxx	/^static ExtensionAPI::Pane check_pane_object(lua_State *L, int index) {$/;"	f	file:	signature:(lua_State *L, int index)
checkudata	LuaExtension.cxx	/^static void *checkudata(lua_State *L, int ud, const char *tname) {$/;"	f	file:	signature:(lua_State *L, int ud, const char *tname)
clearBeforeExecute	JobQueue.h	/^	bool clearBeforeExecute;$/;"	m	class:JobQueue	access:public
clear_table	LuaExtension.cxx	/^static void clear_table(lua_State *L, int tableIdx, bool clearMetatable = true) {$/;"	f	file:	signature:(lua_State *L, int tableIdx, bool clearMetatable = true)
clone_table	LuaExtension.cxx	/^static bool clone_table(lua_State *L, int srcTableIdx, bool copyMetatable = false) {$/;"	f	file:	signature:(lua_State *L, int srcTableIdx, bool copyMetatable = false)
closeAlways	SciTEBase.h	/^	enum class CloseFind { closePrevent, closeAlways, closeOnMatch } closeFind;$/;"	m	class:Searcher::CloseFind	access:private
closeFind	SciTEBase.h	/^	enum class CloseFind { closePrevent, closeAlways, closeOnMatch } closeFind;$/;"	m	class:Searcher	typeref:class:Searcher::CloseFind	access:public
closePrevent	SciTEBase.h	/^	enum class CloseFind { closePrevent, closeAlways, closeOnMatch } closeFind;$/;"	m	class:Searcher::CloseFind	access:private
cmd	SciTEBase.h	/^	int cmd;	\/\/ Menu item$/;"	m	struct:SearchOption	access:public
codePage	LuaExtension.cxx	/^	int codePage;$/;"	m	struct:StylingContext	file:	access:public
codePage	SciTEBase.h	/^	int codePage;$/;"	m	class:SciTEBase	access:protected
codePage	StyleWriter.h	/^	int codePage;$/;"	m	class:TextReader	access:protected
codingCookie	Cookie.cxx	/^static const char codingCookie[] = "coding";$/;"	v	file:
colour	StyleDefinition.h	/^	long colour;$/;"	m	struct:IndicatorDefinition	access:public
columns	StripDefinition.h	/^	unsigned int columns;$/;"	m	class:StripDefinition	access:public
command	JobQueue.h	/^	std::string command;$/;"	m	class:Job	access:public
commandCurrent	JobQueue.h	/^	int commandCurrent;$/;"	m	class:JobQueue	access:public
commandMax	JobQueue.h	/^	enum { commandMax = 2 };$/;"	e	enum:JobQueue::__anon4
completed	Worker.h	/^	volatile bool completed;$/;"	m	struct:Worker	access:private
configFileVisibilityString	FilePath.cxx	/^const GUI::gui_char configFileVisibilityString[] = ".";$/;"	v
configFileVisibilityString	FilePath.cxx	/^const GUI::gui_char configFileVisibilityString[] = GUI_TEXT("");$/;"	v
constantCount	IFaceTable.cxx	/^const int IFaceTable::constantCount = ifaceConstantCount;$/;"	m	class:IFaceTable	file:
constantCount	IFaceTable.h	/^	static const int constantCount;$/;"	m	class:IFaceTable	access:public
constants	IFaceTable.cxx	/^const IFaceConstant * const IFaceTable::constants = ifaceConstants;$/;"	m	class:IFaceTable	file:
constants	IFaceTable.h	/^	static const IFaceConstant * const constants;$/;"	m	class:IFaceTable	access:public
contains	PropSetFile.cxx	/^	bool contains(const char *testVar) const {$/;"	f	struct:VarChain	access:public	signature:(const char *testVar) const
contributors	Credits.cxx	/^static const char *contributors[] = {$/;"	v	file:
controlType	StripDefinition.h	/^	enum UCControlType { ucStatic, ucEdit, ucCombo, ucButton, ucDefaultButton } controlType;$/;"	m	class:UserControl	typeref:enum:UserControl::UCControlType	access:public
controls	StripDefinition.h	/^	std::vector<std::vector<UserControl> > controls;$/;"	m	class:StripDefinition	access:public
convert	Utf8_16.cxx	/^size_t Utf8_16_Read::convert(char* buf, size_t len) {$/;"	f	class:Utf8_16_Read	signature:(char* buf, size_t len)
copy	MultiplexExtension.h	/^	MultiplexExtension & operator=(const MultiplexExtension & copy) = delete;$/;"	m	class:MultiplexExtension	access:public
copy	MultiplexExtension.h	/^	MultiplexExtension(const MultiplexExtension & copy) = delete;$/;"	m	class:MultiplexExtension	access:public
curBufferIndex	LuaExtension.cxx	/^static int curBufferIndex = -1;$/;"	v	file:
current	SciTEBase.h	/^	int current;$/;"	m	class:BufferList	access:protected
currentCallTip	SciTEBase.h	/^	int currentCallTip;$/;"	m	class:SciTEBase	access:protected
currentCallTipWord	SciTEBase.h	/^	std::string currentCallTipWord;$/;"	m	class:SciTEBase	access:protected
currentMacro	SciTEBase.h	/^	std::string currentMacro;$/;"	m	class:SciTEBase	access:protected
currentPos	LuaExtension.cxx	/^	unsigned int currentPos;$/;"	m	struct:StylingContext	file:	access:public
currentWordHighlight	SciTEBase.h	/^	CurrentWordHighlight currentWordHighlight;$/;"	m	class:SciTEBase	access:protected
cursor	LuaExtension.cxx	/^	char cursor[3][8];$/;"	m	struct:StylingContext	file:	access:public
cursorPos	LuaExtension.cxx	/^	int cursorPos;$/;"	m	struct:StylingContext	file:	access:public
data	Containers.h	/^		TYPE data;$/;"	m	struct:TList::Node	access:public
defaultSessionFileName	SciTEBuffers.cxx	/^const GUI::gui_char defaultSessionFileName[] = GUI_TEXT("SciTE.session");$/;"	v
defineTexStyle	ExportTEX.cxx	/^static void defineTexStyle(const StyleDefinition &style, FILE* fp, int istyle) {$/;"	f	file:	signature:(const StyleDefinition &style, FILE* fp, int istyle)
delay	SciTEBase.h	/^		delay,              \/\/ Delay before to highlight the word at the caret.$/;"	e	enum:CurrentWordHighlight::__anon10
delayAlreadyElapsed	SciTEBase.h	/^		delayAlreadyElapsed \/\/ Delay has already elapsed, word at the caret and occurrences are (or have to be) highlighted.$/;"	e	enum:CurrentWordHighlight::__anon10
delayBeforeAutoSave	SciTEBase.h	/^	int delayBeforeAutoSave;$/;"	m	class:SciTEBase	access:protected
delayJustEnded	SciTEBase.h	/^		delayJustEnded,     \/\/ Delay has just ended. This state allows to ignore next HighlightCurrentWord (SCN_UPDATEUI and SC_UPDATE_CONTENT for setting indicators).$/;"	e	enum:CurrentWordHighlight::__anon10
determineEncoding	Utf8_16.cxx	/^int Utf8_16_Read::determineEncoding() {$/;"	f	class:Utf8_16_Read	signature:()
diagnosticStyleStart	SciTEBase.h	/^	int diagnosticStyleStart;$/;"	m	class:SciTEBase	access:protected
diagnosticStyles	SciTEBase.h	/^	enum { diagnosticStyles=4};$/;"	e	enum:SciTEBase::__anon19
dialogsOnScreen	SciTEBase.h	/^	int dialogsOnScreen;$/;"	m	class:SciTEBase	access:protected
dirNameAtExecute	SciTEBase.h	/^	FilePath dirNameAtExecute;$/;"	m	class:SciTEBase	access:protected
dirNameForExecute	SciTEBase.h	/^	FilePath dirNameForExecute;$/;"	m	class:SciTEBase	access:protected
directory	JobQueue.h	/^	FilePath directory;$/;"	m	class:Job	access:public
doc	SciTEBase.h	/^	sptr_t doc;$/;"	m	class:Buffer	access:public
documentBytes	FileWorker.h	/^	const char *documentBytes;$/;"	m	class:FileStorer	access:public
documentModTime	SciTEBase.h	/^	time_t documentModTime;$/;"	m	class:Buffer	access:public
eFinal	Utf8_16.h	/^	    eFinal$/;"	e	enum:Utf16_Iter::eState
eFinal	Utf8_16.h	/^	    eFinal$/;"	e	enum:Utf8_Iter::eState
eLast	Utf8_16.h	/^	    eLast$/;"	e	enum:Utf8_16::encodingType
ePenultimate	Utf8_16.h	/^	    ePenultimate,$/;"	e	enum:Utf16_Iter::eState
ePenultimate	Utf8_16.h	/^	    ePenultimate,$/;"	e	enum:Utf8_Iter::eState
eSecondOf4Bytes	Utf8_16.h	/^	    eSecondOf4Bytes,$/;"	e	enum:Utf16_Iter::eState
eSecondOf4Bytes	Utf8_16.h	/^	    eSecondOf4Bytes,$/;"	e	enum:Utf8_Iter::eState
eStart	Utf8_16.h	/^	    eStart,$/;"	e	enum:Utf16_Iter::eState
eStart	Utf8_16.h	/^	    eStart,$/;"	e	enum:Utf8_Iter::eState
eState	Utf8_16.h	/^	enum eState {$/;"	g	class:Utf16_Iter	access:protected
eState	Utf8_16.h	/^	enum eState {$/;"	g	class:Utf8_Iter	access:protected
eUnknown	Utf8_16.h	/^	    eUnknown,$/;"	e	enum:Utf8_16::encodingType
eUtf16BigEndian	Utf8_16.h	/^	    eUtf16BigEndian,$/;"	e	enum:Utf8_16::encodingType
eUtf16LittleEndian	Utf8_16.h	/^	    eUtf16LittleEndian,  \/\/ Default on Windows$/;"	e	enum:Utf8_16::encodingType
eUtf8	Utf8_16.h	/^	    eUtf8,$/;"	e	enum:Utf8_16::encodingType
elapsedTimes	SciTEBase.h	/^	GUI::ElapsedTime elapsedTimes;$/;"	m	struct:CurrentWordHighlight	access:public
empty	SciTEBase.h	/^	enum { empty, reading, readAll, open } lifeState;$/;"	e	enum:Buffer::__anon6
encodingType	Utf8_16.h	/^	enum encodingType {$/;"	g	class:Utf8_16	access:public
endDoc	LuaExtension.cxx	/^	unsigned int endDoc;$/;"	m	struct:StylingContext	file:	access:public
endPos	LuaExtension.cxx	/^	int endPos;$/;"	m	struct:PaneMatchObject	file:	access:public
endPos	LuaExtension.cxx	/^	unsigned int endPos;$/;"	m	struct:StylingContext	file:	access:public
endPos	StyleWriter.h	/^	int endPos;$/;"	m	class:TextReader	access:protected
endPosOrig	LuaExtension.cxx	/^	int endPosOrig; \/\/ has to do with preventing infinite loop on a 0-length match$/;"	m	struct:PaneMatchObject	file:	access:public
entries	StringHelpers.h	/^	std::string entries[sz];$/;"	m	class:EntryMemory	access:private
eolfilled	StyleDefinition.h	/^	bool eolfilled;$/;"	m	class:StyleDefinition	access:public
err	FileWorker.h	/^	int err;$/;"	m	struct:FileWorker	access:public
et	FileWorker.h	/^	GUI::ElapsedTime et;$/;"	m	struct:FileWorker	access:public
excludes	PropSetFile.h	/^	std::set<std::string> excludes;$/;"	m	class:ImportFilter	access:public
executing	JobQueue.h	/^	bool executing;$/;"	m	class:JobQueue	access:public
exhausted	SciTEIO.cxx	/^	bool exhausted;$/;"	m	class:BufferedFile	file:	access:private
extender	SciTEBase.h	/^	Extension *extender;$/;"	m	class:SciTEBase	access:protected
extension	SciTEBase.h	/^	std::string extension;$/;"	m	class:LanguageMenuItem	access:public
extensionScript	LuaExtension.cxx	/^static std::string extensionScript;$/;"	v	file:
extensions	MultiplexExtension.h	/^	std::vector<Extension *> extensions;$/;"	m	class:MultiplexExtension	access:private
extremePosition	StyleWriter.h	/^	enum {extremePosition=0x7FFFFFFF};$/;"	e	enum:TextReader::__anon31
failedSave	SciTEBase.h	/^	bool failedSave;$/;"	m	class:Buffer	access:public
failedfind	SciTEBase.h	/^	bool failedfind;$/;"	m	class:Searcher	access:public
fclose	Utf8_16.cxx	/^int Utf8_16_Write::fclose() {$/;"	f	class:Utf8_16_Write	signature:()
fdFinishSave	SciTEBase.h	/^	enum FutureDo { fdNone=0, fdFinishSave=1 } futureDo;$/;"	e	enum:Buffer::FutureDo
fdNone	SciTEBase.h	/^	enum FutureDo { fdNone=0, fdFinishSave=1 } futureDo;$/;"	e	enum:Buffer::FutureDo
fileModLastAsk	SciTEBase.h	/^	time_t fileModLastAsk;$/;"	m	class:Buffer	access:public
fileModTime	SciTEBase.h	/^	time_t fileModTime;$/;"	m	class:Buffer	access:public
fileName	FilePath.h	/^	GUI::gui_string fileName;$/;"	m	class:FilePath	access:private
fileNameLast	SciTEBase.h	/^	GUI::gui_string fileNameLast;$/;"	m	struct:BackgroundActivities	access:public
filePath	SciTEBase.h	/^	FilePath filePath;$/;"	m	class:SciTEBase	access:protected
fileRead	FilePath.cxx	/^const GUI::gui_char fileRead[] = "rb";$/;"	v
fileRead	FilePath.cxx	/^const GUI::gui_char fileRead[] = GUI_TEXT("rb");$/;"	v
fileStackCmdID	SciTEBase.h	/^	enum { fileStackCmdID = IDM_MRUFILE, bufferCmdID = IDM_BUFFER };$/;"	e	enum:SciTEBase::__anon13
fileStackMax	SciTEBase.h	/^	enum { fileStackMax = 10 };$/;"	e	enum:SciTEBase::__anon12
fileWrite	FilePath.cxx	/^const GUI::gui_char fileWrite[] = "wb";$/;"	v
fileWrite	FilePath.cxx	/^const GUI::gui_char fileWrite[] = GUI_TEXT("wb");$/;"	v
fillAlpha	StyleDefinition.h	/^	int fillAlpha;$/;"	m	struct:IndicatorDefinition	access:public
filter	SciTEBase.h	/^	ImportFilter filter;$/;"	m	class:SciTEBase	access:protected
findInStyle	SciTEBase.h	/^	bool findInStyle;$/;"	m	class:Searcher	access:public
findMarker	SciTEBase.h	/^	MatchMarker findMarker;$/;"	m	class:SciTEBase	access:protected
findMarks	SciTEBase.h	/^	enum { fmNone, fmTemporary, fmMarked, fmModified} findMarks;$/;"	m	class:Buffer	typeref:enum:Buffer::__anon7	access:public
findStyle	SciTEBase.h	/^	int findStyle;$/;"	m	class:Searcher	access:public
findWhat	SciTEBase.h	/^	std::string findWhat;$/;"	m	class:Searcher	access:public
firstPropertiesRead	SciTEBase.h	/^	bool firstPropertiesRead;$/;"	m	class:SciTEBase	access:protected
fixedWidth	StripDefinition.h	/^	bool fixedWidth;$/;"	m	class:UserControl	access:public
flags	JobQueue.h	/^	int flags;$/;"	m	class:Job	access:public
flags	JobQueue.h	/^	int flags;$/;"	m	struct:JobMode	access:public
flags	LuaExtension.cxx	/^	int flags; \/\/ this is really part of the state, but is kept here for convenience$/;"	m	struct:PaneMatchObject	file:	access:public
flags	StyleDefinition.h	/^	enum flags { sdNone = 0, sdFont = 0x1, sdSize = 0x2, sdFore = 0x4, sdBack = 0x8,$/;"	g	class:StyleDefinition	access:public
flagsMatch	MatchMarker.h	/^	int flagsMatch;$/;"	m	class:MatchMarker	access:private
fmMarked	SciTEBase.h	/^	enum { fmNone, fmTemporary, fmMarked, fmModified} findMarks;$/;"	e	enum:Buffer::__anon7
fmModified	SciTEBase.h	/^	enum { fmNone, fmTemporary, fmMarked, fmModified} findMarks;$/;"	e	enum:Buffer::__anon7
fmNone	SciTEBase.h	/^	enum { fmNone, fmTemporary, fmMarked, fmModified} findMarks;$/;"	e	enum:Buffer::__anon7
fmTemporary	SciTEBase.h	/^	enum { fmNone, fmTemporary, fmMarked, fmModified} findMarks;$/;"	e	enum:Buffer::__anon7
fn	GUI.h	/^	SciFnDirect fn;$/;"	m	class:GUI::ScintillaWindow	access:private
focusOnReplace	SciTEBase.h	/^	bool focusOnReplace;$/;"	m	class:Searcher	access:public
foldColour	SciTEBase.h	/^	std::string foldColour;$/;"	m	class:SciTEBase	access:protected
foldHiliteColour	SciTEBase.h	/^	std::string foldHiliteColour;$/;"	m	class:SciTEBase	access:protected
foldMargin	SciTEBase.h	/^	bool foldMargin;$/;"	m	class:SciTEBase	access:protected
foldMarginWidth	SciTEBase.h	/^	int foldMarginWidth;$/;"	m	class:SciTEBase	access:protected
foldMarginWidthDefault	SciTEBase.h	/^	enum { foldMarginWidthDefault = 14};$/;"	e	enum:SciTEBase::__anon23
foldState	SciTEBase.h	/^	std::vector<int> foldState;$/;"	m	class:Buffer	access:public
foldState	SciTEBase.h	/^	std::vector<int> foldState;$/;"	m	struct:BufferState	access:public
font	ExportPDF.cxx	/^	int font;$/;"	m	struct:PDFStyle	file:	access:public
font	StyleDefinition.h	/^	std::string font;$/;"	m	class:StyleDefinition	access:public
fopen	FilePath.cxx	/^static FILE *fopen(const wchar_t *filename, const wchar_t *mode) {$/;"	f	file:	signature:(const wchar_t *filename, const wchar_t *mode)
fopen	scite_lua_win.h	17;"	d
fore	ExportPDF.cxx	/^	std::string fore;$/;"	m	struct:PDFStyle	file:	access:public
fore	StyleDefinition.h	/^	std::string fore;$/;"	m	class:StyleDefinition	access:public
fp	FileWorker.h	/^	FILE *fp;$/;"	m	struct:FileWorker	access:public
fp	SciTEIO.cxx	/^	FILE *fp;$/;"	m	class:BufferedFile	file:	access:private
fullScreen	SciTEBase.h	/^	bool fullScreen;$/;"	m	class:SciTEBase	access:protected
functionCount	IFaceTable.cxx	/^const int IFaceTable::functionCount = ifaceFunctionCount;$/;"	m	class:IFaceTable	file:
functionCount	IFaceTable.h	/^	static const int functionCount;$/;"	m	class:IFaceTable	access:public
functionDefinition	SciTEBase.h	/^	std::string functionDefinition;$/;"	m	class:SciTEBase	access:protected
functions	IFaceTable.cxx	/^const IFaceFunction * const IFaceTable::functions = ifaceFunctions;$/;"	m	class:IFaceTable	file:
functions	IFaceTable.h	/^	static const IFaceFunction * const functions;$/;"	m	class:IFaceTable	access:public
futureDo	SciTEBase.h	/^	enum FutureDo { fdNone=0, fdFinishSave=1 } futureDo;$/;"	m	class:Buffer	typeref:enum:Buffer::FutureDo	access:public
fwrite	Utf8_16.cxx	/^size_t Utf8_16_Write::fwrite(const void* p, size_t _size) {$/;"	f	class:Utf8_16_Write	signature:(const void* p, size_t _size)
g	Credits.cxx	/^	int g;$/;"	m	class:__anon1::RandomColour	file:	access:public
get	Utf8_16.h	/^	int get() const {$/;"	f	class:Utf8_Iter	access:public	signature:() const
get	Utf8_16.h	/^	utf8 get() const {$/;"	f	class:Utf16_Iter	access:public	signature:() const
getEncoding	Utf8_16.h	/^	encodingType getEncoding() const { return m_eEncoding; }$/;"	f	class:Utf8_16_Read	access:public	signature:() const
getNewBuf	Utf8_16.h	/^	char* getNewBuf() { return reinterpret_cast<char*>(m_pNewBuf); }$/;"	f	class:Utf8_16_Read	access:public	signature:()
getPDFRGB	ExportPDF.cxx	/^inline std::string getPDFRGB(const char* stylecolour) {$/;"	f	signature:(const char* stylecolour)
getTexRGB	ExportTEX.cxx	/^static char* getTexRGB(char* texcolor, const char* stylecolor) {$/;"	f	file:	signature:(char* texcolor, const char* stylecolor)
getcwd	FilePath.cxx	/^static wchar_t *getcwd(wchar_t *buffer, int maxlen) {$/;"	f	file:	signature:(wchar_t *buffer, int maxlen)
getter	IFaceTable.h	/^	int getter;$/;"	m	struct:IFaceProperty	access:public
grepBinary	SciTEBase.h	/^	    grepDot = 8, grepBinary = 16, grepScroll = 32$/;"	e	enum:SciTEBase::GrepFlags
grepDot	SciTEBase.h	/^	    grepDot = 8, grepBinary = 16, grepScroll = 32$/;"	e	enum:SciTEBase::GrepFlags
grepMatchCase	SciTEBase.h	/^	    grepNone = 0, grepWholeWord = 1, grepMatchCase = 2, grepStdOut = 4,$/;"	e	enum:SciTEBase::GrepFlags
grepNone	SciTEBase.h	/^	    grepNone = 0, grepWholeWord = 1, grepMatchCase = 2, grepStdOut = 4,$/;"	e	enum:SciTEBase::GrepFlags
grepScroll	SciTEBase.h	/^	    grepDot = 8, grepBinary = 16, grepScroll = 32$/;"	e	enum:SciTEBase::GrepFlags
grepStdOut	SciTEBase.h	/^	    grepNone = 0, grepWholeWord = 1, grepMatchCase = 2, grepStdOut = 4,$/;"	e	enum:SciTEBase::GrepFlags
grepWholeWord	SciTEBase.h	/^	    grepNone = 0, grepWholeWord = 1, grepMatchCase = 2, grepStdOut = 4,$/;"	e	enum:SciTEBase::GrepFlags
gui_char	GUI.h	/^typedef char gui_char;$/;"	t	namespace:GUI
gui_char	GUI.h	/^typedef wchar_t gui_char;$/;"	t	namespace:GUI
gui_string	GUI.h	/^typedef std::string gui_string;$/;"	t	namespace:GUI
gui_string	GUI.h	/^typedef std::wstring gui_string;$/;"	t	namespace:GUI
hasClose	StripDefinition.h	/^	bool hasClose;$/;"	m	class:StripDefinition	access:public
havefound	SciTEBase.h	/^	bool havefound;$/;"	m	class:Searcher	access:public
heightBar	SciTEBase.h	/^	int heightBar;$/;"	m	class:SciTEBase	access:protected
heightOutput	SciTEBase.h	/^	int heightOutput;$/;"	m	class:SciTEBase	access:protected
heightOutputStartDrag	SciTEBase.h	/^	int heightOutputStartDrag;$/;"	m	class:SciTEBase	access:protected
heightStatus	SciTEBase.h	/^    heightStatus = 20,$/;"	e	enum:__anon8
heightTab	SciTEBase.h	/^    heightTab = 24,$/;"	e	enum:__anon8
heightTools	SciTEBase.h	/^    heightTools = 24,$/;"	e	enum:__anon8
heightToolsBig	SciTEBase.h	/^    heightToolsBig = 32,$/;"	e	enum:__anon8
host	LuaExtension.cxx	/^static ExtensionAPI *host = 0;$/;"	v	file:
host	MultiplexExtension.h	/^	ExtensionAPI *host;$/;"	m	class:MultiplexExtension	access:private
id	SciTEBase.h	/^	int id;	\/\/ Control in dialog$/;"	m	struct:SearchOption	access:public
ifaceConstantCount	IFaceTable.cxx	/^	ifaceConstantCount = 2683,$/;"	e	enum:__anon3	file:
ifaceConstants	IFaceTable.cxx	/^static IFaceConstant ifaceConstants[] = {$/;"	v	file:
ifaceFunctionCount	IFaceTable.cxx	/^	ifaceFunctionCount = 298,$/;"	e	enum:__anon3	file:
ifaceFunctions	IFaceTable.cxx	/^static IFaceFunction ifaceFunctions[] = {$/;"	v	file:
ifaceProperties	IFaceTable.cxx	/^static IFaceProperty ifaceProperties[] = {$/;"	v	file:
ifacePropertyCount	IFaceTable.cxx	/^	ifacePropertyCount = 228$/;"	e	enum:__anon3	file:
iface_bool	IFaceTable.h	/^	iface_bool,$/;"	e	enum:IFaceType
iface_cells	IFaceTable.h	/^	iface_cells,$/;"	e	enum:IFaceType
iface_colour	IFaceTable.h	/^	iface_colour,$/;"	e	enum:IFaceType
iface_findtext	IFaceTable.h	/^	iface_findtext,$/;"	e	enum:IFaceType
iface_formatrange	IFaceTable.h	/^	iface_formatrange$/;"	e	enum:IFaceType
iface_function_helper	LuaExtension.cxx	/^static int iface_function_helper(lua_State *L, const IFaceFunction &func) {$/;"	f	file:	signature:(lua_State *L, const IFaceFunction &func)
iface_int	IFaceTable.h	/^	iface_int,$/;"	e	enum:IFaceType
iface_keymod	IFaceTable.h	/^	iface_keymod,$/;"	e	enum:IFaceType
iface_length	IFaceTable.h	/^	iface_length,$/;"	e	enum:IFaceType
iface_position	IFaceTable.h	/^	iface_position,$/;"	e	enum:IFaceType
iface_string	IFaceTable.h	/^	iface_string,$/;"	e	enum:IFaceType
iface_stringresult	IFaceTable.h	/^	iface_stringresult,$/;"	e	enum:IFaceType
iface_textrange	IFaceTable.h	/^	iface_textrange,$/;"	e	enum:IFaceType
iface_void	IFaceTable.h	/^	iface_void,$/;"	e	enum:IFaceType
imeAutoComplete	SciTEBase.h	/^	bool imeAutoComplete;$/;"	m	class:SciTEBase	access:protected
importCmdID	SciTEBase.h	/^	enum { importCmdID = IDM_IMPORT };$/;"	e	enum:SciTEBase::__anon15
importFiles	SciTEBase.h	/^	FilePathSet importFiles;$/;"	m	class:SciTEBase	access:protected
importMax	SciTEBase.h	/^	enum { importMax = 50 };$/;"	e	enum:SciTEBase::__anon14
includes	PropSetFile.h	/^	std::set<std::string> includes;$/;"	m	class:ImportFilter	access:public
includes	SciTEBase.cxx	/^static bool includes(const StyleAndWords &symbols, const std::string &value) {$/;"	f	file:	signature:(const StyleAndWords &symbols, const std::string &value)
incr	Credits.cxx	/^	int incr;$/;"	m	class:__anon1::RandomColour	file:	access:private
indentClosing	SciTEBase.h	/^	bool indentClosing;$/;"	m	class:SciTEBase	access:protected
indentExamine	SciTEBase.h	/^	int indentExamine;$/;"	m	class:SciTEBase	access:protected
indentMaintain	SciTEBase.h	/^	bool indentMaintain;$/;"	m	class:SciTEBase	access:protected
indentOpening	SciTEBase.h	/^	bool indentOpening;$/;"	m	class:SciTEBase	access:protected
indentationWSVisible	SciTEBase.h	/^	int indentationWSVisible;$/;"	m	class:SciTEBase	access:protected
indexType	IFaceTable.h	/^	IFaceType indexType;$/;"	m	struct:IFaceObject	access:public
indicator	MatchMarker.h	/^	int indicator;$/;"	m	class:MatchMarker	access:private
indicatorHighlightCurrentWord	SciTEBase.h	/^		indicatorHighlightCurrentWord,$/;"	e	enum:SciTEBase::__anon16
indicatorMatch	SciTEBase.h	/^	enum { indicatorMatch = INDIC_CONTAINER,$/;"	e	enum:SciTEBase::__anon16
indicatorSentinel	SciTEBase.h	/^		indicatorSentinel };$/;"	e	enum:SciTEBase::__anon16
indicatorSpellingMistake	SciTEBase.h	/^		indicatorSpellingMistake,$/;"	e	enum:SciTEBase::__anon16
initStyle	LuaExtension.cxx	/^	int initStyle;$/;"	m	struct:StylingContext	file:	access:public
initialised	SciTEBase.h	/^	bool initialised;$/;"	m	class:BufferList	access:public
input	JobQueue.h	/^	std::string input;$/;"	m	class:Job	access:public
input	JobQueue.h	/^	std::string input;$/;"	m	struct:JobMode	access:public
isBlockEnd	SciTEBase.h	/^    isBlockEnd,	\/\/ indentation end indicator such as "}" or VB "end"$/;"	e	enum:IndentationStatus
isBlockStart	SciTEBase.h	/^    isBlockStart,	\/\/ indentation block begin such as "{" or VB "function"$/;"	e	enum:IndentationStatus
isBuilding	JobQueue.h	/^	bool isBuilding;$/;"	m	class:JobQueue	access:public
isBuilt	JobQueue.h	/^	bool isBuilt;$/;"	m	class:JobQueue	access:public
isDirty	SciTEBase.h	/^	bool isDirty;$/;"	m	class:Buffer	access:public
isEnabled	SciTEBase.h	/^	bool isEnabled;$/;"	m	struct:CurrentWordHighlight	access:public
isEncodingChar	Cookie.cxx	/^static bool isEncodingChar(char ch) {$/;"	f	file:	signature:(char ch)
isFilter	JobQueue.h	/^	bool isFilter;$/;"	m	struct:JobMode	access:public
isKeyWordStart	SciTEBase.h	/^    isKeyWordStart	\/\/ Keywords that cause indentation$/;"	e	enum:IndentationStatus
isNone	SciTEBase.h	/^    isNone,		\/\/ no effect on indentation$/;"	e	enum:IndentationStatus
isOnlyWithSameStyle	SciTEBase.h	/^	bool isOnlyWithSameStyle;$/;"	m	struct:CurrentWordHighlight	access:public
isReadOnly	SciTEBase.h	/^	bool isReadOnly;$/;"	m	class:Buffer	access:public
isResizeable	StripDefinition.h	/^	bool isResizeable;$/;"	m	struct:ColumnWidth	access:public
isSpaceChar	Cookie.cxx	/^static bool isSpaceChar(char ch) {$/;"	f	file:	signature:(char ch)
isdigitchar	SciTEBuffers.cxx	/^inline bool isdigitchar(int ch) {$/;"	f	signature:(int ch)
isfilenamecharforsel	SciTEBase.cxx	/^bool SciTEBase::isfilenamecharforsel(char ch) {$/;"	f	class:SciTEBase	signature:(char ch)
islexerwordcharforsel	SciTEBase.cxx	/^bool SciTEBase::islexerwordcharforsel(char ch) {$/;"	f	class:SciTEBase	signature:(char ch)
isprefix	StringHelpers.cxx	/^bool isprefix(const char *target, const char *prefix) {$/;"	f	signature:(const char *target, const char *prefix)
isspacechar	SciTEBase.h	/^inline bool isspacechar(unsigned char ch) {$/;"	f	signature:(unsigned char ch)
iswordcharforsel	SciTEBase.cxx	/^bool SciTEBase::iswordcharforsel(char ch) {$/;"	f	class:SciTEBase	signature:(char ch)
italics	StyleDefinition.h	/^	bool italics;$/;"	m	class:StyleDefinition	access:public
item	StripDefinition.h	/^	int item;$/;"	m	class:UserControl	access:public
jobCLI	JobQueue.h	/^    jobCLI = 0, jobGUI = 1, jobShell = 2, jobExtension = 3, jobHelp = 4, jobOtherHelp = 5, jobGrep = 6, jobImmediate = 7};$/;"	e	enum:JobSubsystem
jobExtension	JobQueue.h	/^    jobCLI = 0, jobGUI = 1, jobShell = 2, jobExtension = 3, jobHelp = 4, jobOtherHelp = 5, jobGrep = 6, jobImmediate = 7};$/;"	e	enum:JobSubsystem
jobForceQueue	JobQueue.h	/^    jobForceQueue = 1,$/;"	e	enum:JobFlags
jobGUI	JobQueue.h	/^    jobCLI = 0, jobGUI = 1, jobShell = 2, jobExtension = 3, jobHelp = 4, jobOtherHelp = 5, jobGrep = 6, jobImmediate = 7};$/;"	e	enum:JobSubsystem
jobGrep	JobQueue.h	/^    jobCLI = 0, jobGUI = 1, jobShell = 2, jobExtension = 3, jobHelp = 4, jobOtherHelp = 5, jobGrep = 6, jobImmediate = 7};$/;"	e	enum:JobSubsystem
jobGroupUndo	JobQueue.h	/^    jobGroupUndo = 64$/;"	e	enum:JobFlags
jobHasInput	JobQueue.h	/^    jobHasInput = 2,$/;"	e	enum:JobFlags
jobHelp	JobQueue.h	/^    jobCLI = 0, jobGUI = 1, jobShell = 2, jobExtension = 3, jobHelp = 4, jobOtherHelp = 5, jobGrep = 6, jobImmediate = 7};$/;"	e	enum:JobSubsystem
jobImmediate	JobQueue.h	/^    jobCLI = 0, jobGUI = 1, jobShell = 2, jobExtension = 3, jobHelp = 4, jobOtherHelp = 5, jobGrep = 6, jobImmediate = 7};$/;"	e	enum:JobSubsystem
jobOtherHelp	JobQueue.h	/^    jobCLI = 0, jobGUI = 1, jobShell = 2, jobExtension = 3, jobHelp = 4, jobOtherHelp = 5, jobGrep = 6, jobImmediate = 7};$/;"	e	enum:JobSubsystem
jobProgress	Worker.h	/^	volatile size_t jobProgress;$/;"	m	struct:Worker	access:private
jobQueue	JobQueue.h	/^	Job jobQueue[commandMax];$/;"	m	class:JobQueue	access:public
jobQueue	SciTEBase.h	/^	JobQueue jobQueue;$/;"	m	class:SciTEBase	access:protected
jobQuiet	JobQueue.h	/^    jobQuiet = 4,$/;"	e	enum:JobFlags
jobRepSelAuto	JobQueue.h	/^    jobRepSelAuto = 32,$/;"	e	enum:JobFlags
jobRepSelMask	JobQueue.h	/^    jobRepSelMask = 48,$/;"	e	enum:JobFlags
jobRepSelYes	JobQueue.h	/^    jobRepSelYes = 16,$/;"	e	enum:JobFlags
jobShell	JobQueue.h	/^    jobCLI = 0, jobGUI = 1, jobShell = 2, jobExtension = 3, jobHelp = 4, jobOtherHelp = 5, jobGrep = 6, jobImmediate = 7};$/;"	e	enum:JobSubsystem
jobSize	Worker.h	/^	volatile size_t jobSize;$/;"	m	struct:Worker	access:private
jobType	JobQueue.h	/^	JobSubsystem jobType;$/;"	m	class:Job	access:public
jobType	JobQueue.h	/^	JobSubsystem jobType;$/;"	m	struct:JobMode	access:public
jobUsesOutputPane	JobQueue.h	/^	bool jobUsesOutputPane;$/;"	m	class:JobQueue	access:public
k_Boms	Utf8_16.cxx	/^const Utf8_16::utf8 Utf8_16::k_Boms[][3] = {$/;"	m	class:Utf8_16	file:
k_Boms	Utf8_16.h	/^	static const utf8 k_Boms[eLast][3];$/;"	m	class:Utf8_16	access:public
key	Containers.h	/^		KEY key;$/;"	m	struct:TMap::Association	access:public
label	SciTEBase.h	/^	const char *label;$/;"	m	struct:SearchOption	access:public
language	SciTEBase.h	/^	std::string language;$/;"	m	class:SciTEBase	access:protected
languageCmdID	SciTEBase.h	/^	enum { languageCmdID = IDM_LANGUAGE };$/;"	e	enum:SciTEBase::__anon18
languageMenu	SciTEBase.h	/^	std::vector<LanguageMenuItem> languageMenu;$/;"	m	class:SciTEBase	access:protected
lastPosCallTip	SciTEBase.h	/^	int lastPosCallTip;$/;"	m	class:SciTEBase	access:protected
lastWasCR	SciTEIO.cxx	/^	bool lastWasCR;$/;"	m	class:FileReader	file:	access:private
left	GUI.h	/^	int left;$/;"	m	class:GUI::Rectangle	access:public
lenCurrent	LuaExtension.cxx	/^	int lenCurrent;$/;"	m	struct:StylingContext	file:	access:public
lenDoc	StyleWriter.h	/^	int lenDoc;$/;"	m	class:TextReader	access:protected
lenNext	LuaExtension.cxx	/^	int lenNext;$/;"	m	struct:StylingContext	file:	access:public
length	SciTEBase.h	/^	int length;$/;"	m	class:BufferList	access:public
lengthDoc	LuaExtension.cxx	/^	int lengthDoc;$/;"	m	struct:StylingContext	file:	access:public
lengthVisible	SciTEBase.h	/^	int lengthVisible;$/;"	m	class:BufferList	access:public
lexLPeg	SciTEBase.h	/^	int lexLPeg;$/;"	m	class:SciTEBase	access:protected
lexLanguage	SciTEBase.h	/^	int lexLanguage;$/;"	m	class:SciTEBase	access:protected
lifeState	SciTEBase.h	/^	enum { empty, reading, readAll, open } lifeState;$/;"	m	class:Buffer	typeref:enum:Buffer::__anon6	access:public
lineEnd	MatchMarker.h	/^	int lineEnd;$/;"	m	struct:LineRange	access:public
lineNum	SciTEIO.cxx	/^	int lineNum;$/;"	m	class:FileReader	file:	access:private
lineNumbers	SciTEBase.h	/^	bool lineNumbers;$/;"	m	class:SciTEBase	access:protected
lineNumbersExpand	SciTEBase.h	/^	bool lineNumbersExpand;$/;"	m	class:SciTEBase	access:protected
lineNumbersWidth	SciTEBase.h	/^	int lineNumbersWidth;$/;"	m	class:SciTEBase	access:protected
lineNumbersWidthDefault	SciTEBase.h	/^	enum { lineNumbersWidthDefault = 4 };$/;"	e	enum:SciTEBase::__anon24
lineRanges	MatchMarker.h	/^	std::vector<LineRange> lineRanges;$/;"	m	class:MatchMarker	access:private
lineStart	MatchMarker.h	/^	int lineStart;$/;"	m	struct:LineRange	access:public
lineToCompare	SciTEIO.cxx	/^	std::string lineToCompare;$/;"	m	class:FileReader	file:	access:private
lineToShow	SciTEIO.cxx	/^	std::string lineToShow;$/;"	m	class:FileReader	file:	access:private
link	PropSetFile.cxx	/^	const VarChain *link;$/;"	m	struct:VarChain	file:	access:public
listSepString	FilePath.cxx	/^const GUI::gui_char listSepString[] = ":";$/;"	v
listSepString	FilePath.cxx	/^const GUI::gui_char listSepString[] = GUI_TEXT(";");$/;"	v
listText	StringList.h	/^	std::string listText;$/;"	m	class:StringList	access:private
littleBit	GUI.h	/^	long littleBit;$/;"	m	class:GUI::ElapsedTime	access:private
loaders	SciTEBase.h	/^	int loaders;$/;"	m	struct:BackgroundActivities	access:public
localiser	SciTEBase.h	/^	Localization localiser;$/;"	m	class:SciTEBase	access:protected
lowerKeys	PropSetFile.h	/^	bool lowerKeys;$/;"	m	class:PropSetFile	access:private
luaDisabled	LuaExtension.cxx	/^static bool luaDisabled = false;$/;"	v	file:
luaState	LuaExtension.cxx	/^static lua_State *luaState = 0;$/;"	v	file:
lua_pushglobaltable	LuaExtension.cxx	34;"	d	file:
m_ArrayData	Containers.h	/^	TList<TYPE, ARG_TYPE> m_ArrayData;$/;"	m	class:TArray	access:protected
m_Iter16	Utf8_16.h	/^	Utf16_Iter m_Iter16;$/;"	m	class:Utf8_16_Read	access:private
m_bFirstRead	Utf8_16.h	/^	bool m_bFirstRead;$/;"	m	class:Utf8_16_Read	access:private
m_bFirstWrite	Utf8_16.h	/^	bool m_bFirstWrite;$/;"	m	class:Utf8_16_Write	access:protected
m_eEncoding	Utf8_16.h	/^	encodingType m_eEncoding;$/;"	m	class:Utf16_Iter	access:protected
m_eEncoding	Utf8_16.h	/^	encodingType m_eEncoding;$/;"	m	class:Utf8_16_Read	access:private
m_eEncoding	Utf8_16.h	/^	encodingType m_eEncoding;$/;"	m	class:Utf8_16_Write	access:protected
m_eEncoding	Utf8_16.h	/^	encodingType m_eEncoding;$/;"	m	class:Utf8_Iter	access:protected
m_eState	Utf8_16.h	/^	eState m_eState;$/;"	m	class:Utf16_Iter	access:protected
m_eState	Utf8_16.h	/^	eState m_eState;$/;"	m	class:Utf8_Iter	access:protected
m_leadSurrogate	Utf8_16.h	/^	ubyte m_leadSurrogate[2];$/;"	m	class:Utf8_16_Read	access:private
m_nBufSize	Utf8_16.h	/^	size_t m_nBufSize;$/;"	m	class:Utf8_16_Read	access:private
m_nBufSize	Utf8_16.h	/^	size_t m_nBufSize;$/;"	m	class:Utf8_16_Write	access:protected
m_nCount	Containers.h	/^	int m_nCount;$/;"	m	class:TList	access:protected
m_nCount	Containers.h	/^	int m_nCount;$/;"	m	class:TMap	access:protected
m_nCur	Utf8_16.h	/^	int m_nCur;$/;"	m	class:Utf8_Iter	access:protected
m_nCur	Utf8_16.h	/^	utf8 m_nCur;$/;"	m	class:Utf16_Iter	access:protected
m_nCur16	Utf8_16.h	/^	int m_nCur16;$/;"	m	class:Utf16_Iter	access:protected
m_nHashTableSize	Containers.h	/^	unsigned int m_nHashTableSize;$/;"	m	class:TMap	access:protected
m_nLen	Utf8_16.h	/^	size_t m_nLen;$/;"	m	class:Utf8_16_Read	access:private
m_pBuf	Utf8_16.h	/^	const ubyte* m_pBuf;$/;"	m	class:Utf16_Iter	access:protected
m_pBuf	Utf8_16.h	/^	const ubyte* m_pBuf;$/;"	m	class:Utf8_Iter	access:protected
m_pBuf	Utf8_16.h	/^	ubyte* m_pBuf;$/;"	m	class:Utf8_16_Read	access:private
m_pBuf	Utf8_16.h	/^	utf16* m_pBuf;$/;"	m	class:Utf8_16_Write	access:protected
m_pEnd	Utf8_16.h	/^	const ubyte* m_pEnd;$/;"	m	class:Utf16_Iter	access:protected
m_pEnd	Utf8_16.h	/^	const ubyte* m_pEnd;$/;"	m	class:Utf8_Iter	access:protected
m_pFile	Utf8_16.h	/^	FILE* m_pFile;$/;"	m	class:Utf8_16_Write	access:protected
m_pFreeList	Containers.h	/^	Association* m_pFreeList;$/;"	m	class:TMap	access:protected
m_pHashTable	Containers.h	/^	Association** m_pHashTable;$/;"	m	class:TMap	access:protected
m_pNewBuf	Utf8_16.h	/^	ubyte* m_pNewBuf;$/;"	m	class:Utf8_16_Read	access:private
m_pNodeHead	Containers.h	/^	Node* m_pNodeHead;$/;"	m	class:TList	access:protected
m_pNodeTail	Containers.h	/^	Node* m_pNodeTail;$/;"	m	class:TList	access:protected
m_pRead	Utf8_16.h	/^	const ubyte* m_pRead;$/;"	m	class:Utf16_Iter	access:protected
m_pRead	Utf8_16.h	/^	const ubyte* m_pRead;$/;"	m	class:Utf8_Iter	access:protected
macrosEnabled	SciTEBase.h	/^	bool macrosEnabled;$/;"	m	class:SciTEBase	access:protected
mapss	PropSetFile.h	/^typedef std::map<std::string, std::string> mapss;$/;"	t
margin	SciTEBase.h	/^	bool margin;$/;"	m	class:SciTEBase	access:protected
marginWidth	SciTEBase.h	/^	int marginWidth;$/;"	m	class:SciTEBase	access:protected
marginWidthDefault	SciTEBase.h	/^	enum { marginWidthDefault = 20};$/;"	e	enum:SciTEBase::__anon22
markIncremental	SciTEBase.h	/^	enum MarkPurpose { markWithBookMarks, markIncremental };$/;"	e	enum:Searcher::MarkPurpose
markWithBookMarks	SciTEBase.h	/^	enum MarkPurpose { markWithBookMarks, markIncremental };$/;"	e	enum:Searcher::MarkPurpose
markerBookmark	SciTEBase.h	/^	enum { markerBookmark = 1 };$/;"	e	enum:SciTEBase::__anon17
matchCase	SciTEBase.h	/^	bool matchCase;$/;"	m	class:Searcher	access:public
matchMarker	SciTEBase.h	/^	MatchMarker matchMarker;$/;"	m	class:SciTEBase	access:protected
maxBufferIndex	LuaExtension.cxx	/^static int maxBufferIndex = -1;$/;"	v	file:
maxCallTips	SciTEBase.h	/^	int maxCallTips;$/;"	m	class:SciTEBase	access:protected
maxParam	SciTEBase.h	/^	enum { maxParam = 4 };$/;"	e	enum:SciTEBase::__anon27
mbCancel	SciTEBase.h	/^		mbCancel,$/;"	e	enum:SciTEBase::MessageBoxChoice
mbNo	SciTEBase.h	/^		mbNo$/;"	e	enum:SciTEBase::MessageBoxChoice
mbOK	SciTEBase.h	/^		mbOK,$/;"	e	enum:SciTEBase::MessageBoxChoice
mbYes	SciTEBase.h	/^		mbYes,$/;"	e	enum:SciTEBase::MessageBoxChoice
mbsIconQuestion	SciTEBase.h	/^		mbsIconQuestion = 0x20,$/;"	e	enum:SciTEBase::__anon26
mbsIconWarning	SciTEBase.h	/^		mbsIconWarning = 0x30$/;"	e	enum:SciTEBase::__anon26
mbsOK	SciTEBase.h	/^		mbsOK = 0,$/;"	e	enum:SciTEBase::__anon26
mbsYesNo	SciTEBase.h	/^		mbsYesNo = 4,$/;"	e	enum:SciTEBase::__anon26
mbsYesNoCancel	SciTEBase.h	/^		mbsYesNoCancel = 3,$/;"	e	enum:SciTEBase::__anon26
memDirectory	SciTEBase.h	/^	ComboMemory memDirectory;$/;"	m	class:SciTEBase	access:protected
memFiles	SciTEBase.h	/^	ComboMemory memFiles;$/;"	m	class:SciTEBase	access:protected
memFinds	SciTEBase.h	/^	ComboMemory memFinds;$/;"	m	class:Searcher	access:public
memReplaces	SciTEBase.h	/^	ComboMemory memReplaces;$/;"	m	class:Searcher	access:public
menuAccessIndicator	SciTEProps.cxx	/^const GUI::gui_char menuAccessIndicator[] = GUI_TEXT("&");$/;"	v
menuAccessIndicator	SciTEProps.cxx	/^const GUI::gui_char menuAccessIndicator[] = GUI_TEXT("_");$/;"	v
menuBuffers	SciTEBase.h	/^    menuTools = 4, menuOptions = 5, menuLanguage = 6, menuBuffers = 7,$/;"	e	enum:__anon5
menuCommand	SciTEBase.h	/^	std::string menuCommand; \/\/ the menu command to be passed to "SciTEBase::MenuCommand"$/;"	m	class:ShortcutItem	access:public
menuEdit	SciTEBase.h	/^    menuFile = 0, menuEdit = 1, menuSearch = 2, menuView = 3,$/;"	e	enum:__anon5
menuFile	SciTEBase.h	/^    menuFile = 0, menuEdit = 1, menuSearch = 2, menuView = 3,$/;"	e	enum:__anon5
menuHelp	SciTEBase.h	/^    menuHelp = 8$/;"	e	enum:__anon5
menuItem	SciTEBase.h	/^	std::string menuItem;$/;"	m	class:LanguageMenuItem	access:public
menuKey	SciTEBase.h	/^	std::string menuKey; \/\/ the keyboard short cut$/;"	m	class:ShortcutItem	access:public
menuKey	SciTEBase.h	/^	std::string menuKey;$/;"	m	class:LanguageMenuItem	access:public
menuLanguage	SciTEBase.h	/^    menuTools = 4, menuOptions = 5, menuLanguage = 6, menuBuffers = 7,$/;"	e	enum:__anon5
menuOptions	SciTEBase.h	/^    menuTools = 4, menuOptions = 5, menuLanguage = 6, menuBuffers = 7,$/;"	e	enum:__anon5
menuSearch	SciTEBase.h	/^    menuFile = 0, menuEdit = 1, menuSearch = 2, menuView = 3,$/;"	e	enum:__anon5
menuTools	SciTEBase.h	/^    menuTools = 4, menuOptions = 5, menuLanguage = 6, menuBuffers = 7,$/;"	e	enum:__anon5
menuView	SciTEBase.h	/^    menuFile = 0, menuEdit = 1, menuSearch = 2, menuView = 3,$/;"	e	enum:__anon5
merge_table	LuaExtension.cxx	/^static int merge_table(lua_State *L, int destTableIdx, int srcTableIdx, bool copyMetatable = false) {$/;"	f	file:	signature:(lua_State *L, int destTableIdx, int srcTableIdx, bool copyMetatable = false)
mid	GUI.h	/^	MenuID mid;$/;"	m	class:GUI::Menu	access:private
missing	SciTEBase.h	/^	std::string missing;$/;"	m	class:Localization	access:private
modulus	Credits.cxx	/^	int modulus;$/;"	m	class:__anon1::RandomColour	file:	access:private
mult	Credits.cxx	/^	int mult;$/;"	m	class:__anon1::RandomColour	file:	access:private
mute	Mutex.h	/^	Mutex *mute;$/;"	m	class:Lock	access:private
mutex	JobQueue.h	/^	std::unique_ptr<Mutex> mutex;$/;"	m	class:JobQueue	access:public
mutex	Worker.h	/^	std::unique_ptr<Mutex> mutex;$/;"	m	struct:Worker	access:private
nHashValue	Containers.h	/^		unsigned int nHashValue;  \/\/ needed for efficient iteration$/;"	m	struct:TMap::Association	access:public
name	IFaceTable.h	/^	const char *name;$/;"	m	struct:IFaceConstant	access:public
name	IFaceTable.h	/^	const char *name;$/;"	m	struct:IFaceFunction	access:public
name	IFaceTable.h	/^	const char *name;$/;"	m	struct:IFaceObject	access:public
name	IFaceTable.h	/^	const char *name;$/;"	m	struct:IFaceProperty	access:public
needIdle	SciTEBase.h	/^	bool needIdle;$/;"	m	class:SciTEBase	access:protected
needReadProperties	SciTEBase.h	/^	bool needReadProperties;$/;"	m	class:SciTEBase	access:protected
nextProgress	FileWorker.h	/^	double nextProgress;$/;"	m	struct:FileWorker	access:public
noDelay	SciTEBase.h	/^		noDelay,            \/\/ No delay, and no word at the caret.$/;"	e	enum:CurrentWordHighlight::__anon10
ocCompleteCurrent	SciTEBase.h	/^	enum OpenCompletion { ocSynchronous, ocCompleteCurrent, ocCompleteSwitch };$/;"	e	enum:SciTEBase::OpenCompletion
ocCompleteSwitch	SciTEBase.h	/^	enum OpenCompletion { ocSynchronous, ocCompleteCurrent, ocCompleteSwitch };$/;"	e	enum:SciTEBase::OpenCompletion
ocSynchronous	SciTEBase.h	/^	enum OpenCompletion { ocSynchronous, ocCompleteCurrent, ocCompleteSwitch };$/;"	e	enum:SciTEBase::OpenCompletion
ofForceLoad	SciTEBase.h	/^	    ofForceLoad = 2,	\/\/ Reload file even if already in a buffer$/;"	e	enum:SciTEBase::OpenFlags
ofNoSaveIfDirty	SciTEBase.h	/^	    ofNoSaveIfDirty = 1, 	\/\/ Suppress check for unsaved changes$/;"	e	enum:SciTEBase::OpenFlags
ofNone	SciTEBase.h	/^	    ofNone = 0, 		\/\/ Default$/;"	e	enum:SciTEBase::OpenFlags
ofPreserveUndo	SciTEBase.h	/^	    ofPreserveUndo = 4,	\/\/ Do not delete undo history$/;"	e	enum:SciTEBase::OpenFlags
ofQuiet	SciTEBase.h	/^	    ofQuiet = 8,		\/\/ Avoid "Could not open file" message$/;"	e	enum:SciTEBase::OpenFlags
ofSynchronous	SciTEBase.h	/^	    ofSynchronous = 16	\/\/ Force synchronous read$/;"	e	enum:SciTEBase::OpenFlags
onlyLineEnds	StringList.h	/^	bool onlyLineEnds;	\/\/\/< Delimited by any white space or only line ends$/;"	m	class:StringList	access:private
open	SciTEBase.h	/^	enum { empty, reading, readAll, open } lifeState;$/;"	e	enum:Buffer::__anon6
openFilesHere	SciTEBase.h	/^	bool openFilesHere;$/;"	m	class:SciTEBase	access:protected
operator ()	StringList.cxx	/^	bool operator()(const char *a, const char *b) const {$/;"	f	struct:__anon30::CompareString	access:public	signature:(const char *a, const char *b) const
operator ()	StringList.cxx	/^	bool operator()(const char *a, const char *b) const {$/;"	f	struct:__anon30::CompareStringInsensitive	access:public	signature:(const char *a, const char *b) const
operator ++	Utf8_16.cxx	/^void Utf16_Iter::operator++() {$/;"	f	class:Utf16_Iter	signature:()
operator ++	Utf8_16.cxx	/^void Utf8_Iter::operator++() {$/;"	f	class:Utf8_Iter	signature:()
operator <	FilePath.cxx	/^bool FilePath::operator<(const FilePath &other) const {$/;"	f	class:FilePath	signature:(const FilePath &other) const
operator =	GUI.h	/^	Window &operator=(WindowID wid_) {$/;"	f	class:GUI::Window	access:public	signature:(WindowID wid_)
operator =	PropSetFile.cxx	/^PropSetFile &PropSetFile::operator=(const PropSetFile &assign) {$/;"	f	class:PropSetFile	signature:(const PropSetFile &assign)
operator ==	FilePath.cxx	/^bool FilePath::operator==(const FilePath &other) const {$/;"	f	class:FilePath	signature:(const FilePath &other) const
operator ==	GUI.h	/^	bool operator==(const Rectangle &other) const {$/;"	f	class:GUI::Rectangle	access:public	signature:(const Rectangle &other) const
operator []	Containers.h	/^	TYPE operator[](int nIndex) const {$/;"	f	class:TArray	access:public	signature:(int nIndex) const
operator []	Containers.h	/^	TYPE& operator[](int nIndex) {$/;"	f	class:TArray	access:public	signature:(int nIndex)
operator []	Containers.h	/^	VALUE& operator[](ARG_KEY key) {$/;"	f	class:TMap	access:public	signature:(ARG_KEY key)
operator []	StringList.h	/^	char *operator[](size_t ind) { return words[ind]; }$/;"	f	class:StringList	access:public	signature:(size_t ind)
operator []	StyleWriter.h	/^	char operator[](int position) {$/;"	f	class:TextReader	access:public	signature:(int position)
operator bool	StringList.h	/^	operator bool() const { return !words.empty(); }$/;"	f	class:StringList	access:public	signature:() const
operator bool	Utf8_16.h	/^	operator bool() const { return m_pRead <= m_pEnd; }$/;"	f	class:Utf16_Iter	access:public	signature:() const
operator bool	Utf8_16.h	/^	operator bool() const { return m_pRead <= m_pEnd; }$/;"	f	class:Utf8_Iter	access:public	signature:() const
outlineAlpha	StyleDefinition.h	/^	int outlineAlpha;$/;"	m	struct:IndicatorDefinition	access:public
override	SciTEBase.h	/^	bool FindHasText() const override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	char *Range(Pane p, int start, int end) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	int FindNext(bool reverseDirection, bool showWarnings=true, bool allowRegExp=true) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	int ReplaceAll(bool inSelection) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	sptr_t Send(Pane p, unsigned int msg, uptr_t wParam = 0, sptr_t lParam = 0) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	std::string Property(const char *key) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	uptr_t GetInstance() override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	virtual void HideMatch() override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	virtual void PostOnMainThread(int cmd, Worker *pWorker) override = 0;$/;"	m	class:SciTEBase	access:public
override	SciTEBase.h	/^	void DoMenuCommand(int cmdID) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void Insert(Pane p, int pos, const char *s) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void MarkAll(MarkPurpose purpose=markWithBookMarks) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void MoveBack() override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void Perform(const char *actionList) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void Remove(Pane p, int start, int end) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void ReplaceOnce(bool showWarnings=true) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void ScrollEditorIfNeeded() override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void SetCaretAsStart() override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void SetFind(const char *sFind) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void SetFindText(const char *sFind) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void SetProperty(const char *key, const char *val) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void SetReplace(const char *sReplace) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void ShutDown() override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void Trace(const char *s) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void UIClosed() override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void UIHasFocus() override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void UnsetProperty(const char *key) override;$/;"	m	class:SciTEBase	access:protected
override	SciTEBase.h	/^	void UpdateStatusBar(bool bUpdateSlowData) override;$/;"	m	class:SciTEBase	access:protected
overrideExtension	SciTEBase.h	/^	std::string overrideExtension;	\/\/\/< User has chosen to use a particular language$/;"	m	class:Buffer	access:public
pFileWorker	SciTEBase.h	/^	FileWorker *pFileWorker;$/;"	m	class:Buffer	access:public
pListener	FileWorker.h	/^	WorkerListener *pListener;$/;"	m	struct:FileWorker	access:public
pLoader	FileWorker.h	/^	ILoader *pLoader;$/;"	m	class:FileLoader	access:public
pNext	Containers.h	/^		Association* pNext;$/;"	m	struct:TMap::Association	access:public
pNext	Containers.h	/^		Node* pNext;$/;"	m	struct:TList::Node	access:public
pPrev	Containers.h	/^		Node* pPrev;$/;"	m	struct:TList::Node	access:public
pSci	MatchMarker.h	/^	GUI::ScintillaWindow *pSci;$/;"	m	class:MatchMarker	access:private
pSearcher	SciTEBase.h	/^	Searcher *pSearcher;$/;"	m	class:SearchUI	access:protected
pane	LuaExtension.cxx	/^	ExtensionAPI::Pane pane;$/;"	m	struct:IFacePropertyBinding	file:	access:public
pane	LuaExtension.cxx	/^	ExtensionAPI::Pane pane;$/;"	m	struct:PaneMatchObject	file:	access:public
paneEditor	Extender.h	/^	enum Pane { paneEditor=1, paneOutput=2, paneFindOutput=3 };$/;"	e	enum:ExtensionAPI::Pane
paneFindOutput	Extender.h	/^	enum Pane { paneEditor=1, paneOutput=2, paneFindOutput=3 };$/;"	e	enum:ExtensionAPI::Pane
paneOutput	Extender.h	/^	enum Pane { paneEditor=1, paneOutput=2, paneFindOutput=3 };$/;"	e	enum:ExtensionAPI::Pane
paramType	IFaceTable.h	/^	IFaceType paramType;$/;"	m	struct:IFaceProperty	access:public
paramType	IFaceTable.h	/^	IFaceType paramType[2];$/;"	m	struct:IFaceFunction	access:public
parameterisedCommand	SciTEBase.h	/^	std::string parameterisedCommand;$/;"	m	class:SciTEBase	access:protected
path	FileWorker.h	/^	FilePath path;$/;"	m	struct:FileWorker	access:public
pathAbbreviations	SciTEBase.h	/^	FilePath pathAbbreviations;$/;"	m	class:SciTEBase	access:protected
pathActive	SciTEBase.h	/^	FilePath pathActive;$/;"	m	class:Session	access:public
pathSepChar	FilePath.cxx	/^const GUI::gui_char pathSepChar = '\/';$/;"	v
pathSepChar	FilePath.cxx	/^const GUI::gui_char pathSepChar = '\\\\';$/;"	v
pathSepString	FilePath.cxx	/^const GUI::gui_char pathSepString[] = "\/";$/;"	v
pathSepString	FilePath.cxx	/^const GUI::gui_char pathSepString[] = GUI_TEXT("\\\\");$/;"	v
popup	SciTEBase.h	/^	GUI::Menu popup;$/;"	m	class:SciTEBase	access:protected
pos	SciTEIO.cxx	/^	size_t pos;$/;"	m	class:BufferedFile	file:	access:private
position	SciTEBase.h	/^	int position;$/;"	m	struct:SelectedRange	access:public
ppcDummy	SciTEBase.h	/^	enum PreProcKind { ppcNone, ppcStart, ppcMiddle, ppcEnd, ppcDummy };	\/\/\/< Indicate the kind of preprocessor condition line$/;"	e	enum:SciTEBase::PreProcKind
ppcEnd	SciTEBase.h	/^	enum PreProcKind { ppcNone, ppcStart, ppcMiddle, ppcEnd, ppcDummy };	\/\/\/< Indicate the kind of preprocessor condition line$/;"	e	enum:SciTEBase::PreProcKind
ppcMiddle	SciTEBase.h	/^	enum PreProcKind { ppcNone, ppcStart, ppcMiddle, ppcEnd, ppcDummy };	\/\/\/< Indicate the kind of preprocessor condition line$/;"	e	enum:SciTEBase::PreProcKind
ppcNone	SciTEBase.h	/^	enum PreProcKind { ppcNone, ppcStart, ppcMiddle, ppcEnd, ppcDummy };	\/\/\/< Indicate the kind of preprocessor condition line$/;"	e	enum:SciTEBase::PreProcKind
ppcStart	SciTEBase.h	/^	enum PreProcKind { ppcNone, ppcStart, ppcMiddle, ppcEnd, ppcDummy };	\/\/\/< Indicate the kind of preprocessor condition line$/;"	e	enum:SciTEBase::PreProcKind
prefix	IFaceTable.h	/^	const char *prefix;$/;"	m	struct:IFaceObject	access:public
preprocOfString	SciTEBase.h	/^	std::map<std::string, PreProcKind> preprocOfString; \/\/\/< Map preprocessor keywords to positions$/;"	m	class:SciTEBase	access:protected
preprocessorSymbol	SciTEBase.h	/^	char preprocessorSymbol;	\/\/\/< Preprocessor symbol (in C, #)$/;"	m	class:SciTEBase	access:protected
previousHeightOutput	SciTEBase.h	/^	int previousHeightOutput;$/;"	m	class:SciTEBase	access:protected
prop	LuaExtension.cxx	/^	const IFaceProperty *prop;$/;"	m	struct:IFacePropertyBinding	file:	access:public
propAbbrevFileName	SciTEIO.cxx	/^const GUI::gui_char propAbbrevFileName[] = GUI_TEXT("abbrev.properties");$/;"	v
propDirectoryFileName	SciTEProps.cxx	/^const GUI::gui_char propDirectoryFileName[] = GUI_TEXT("SciTEDirectory.properties");$/;"	v
propGlobalFileName	SciTEIO.cxx	/^const GUI::gui_char propGlobalFileName[] = GUI_TEXT("SciTEGlobal.properties");$/;"	v
propLocalFileName	SciTEProps.cxx	/^const GUI::gui_char propLocalFileName[] = GUI_TEXT("SciTE.properties");$/;"	v
propUserFileName	SciTEIO.cxx	/^const GUI::gui_char propUserFileName[] = GUI_TEXT(".SciTEUser.properties");$/;"	v
propUserFileName	SciTEIO.cxx	/^const GUI::gui_char propUserFileName[] = GUI_TEXT("SciTEUser.properties");$/;"	v
properties	IFaceTable.cxx	/^const IFaceProperty * const IFaceTable::properties = ifaceProperties;$/;"	m	class:IFaceTable	file:
properties	IFaceTable.h	/^	static const IFaceProperty * const properties;$/;"	m	class:IFaceTable	access:public
propertiesToForward	SciTEProps.cxx	/^static const char *propertiesToForward[] = {$/;"	v	file:
propertyCount	IFaceTable.cxx	/^const int IFaceTable::propertyCount = ifacePropertyCount;$/;"	m	class:IFaceTable	file:
propertyCount	IFaceTable.h	/^	static const int propertyCount;$/;"	m	class:IFaceTable	access:public
props	PropSetFile.h	/^	mapss props;$/;"	m	class:PropSetFile	access:private
props	SciTEBase.h	/^	PropSetFile props;$/;"	m	class:Buffer	access:public
props	SciTEBase.h	/^	PropSetFile props;$/;"	m	class:SciTEBase	access:protected
propsAbbrev	SciTEBase.h	/^	PropSetFile propsAbbrev;$/;"	m	class:SciTEBase	access:protected
propsBase	SciTEBase.h	/^	PropSetFile propsBase;$/;"	m	class:SciTEBase	access:protected
propsDirectory	SciTEBase.h	/^	PropSetFile propsDirectory;$/;"	m	class:SciTEBase	access:protected
propsDiscovered	SciTEBase.h	/^	PropSetFile propsDiscovered;$/;"	m	class:SciTEBase	access:protected
propsEmbed	SciTEBase.h	/^	PropSetFile propsEmbed;$/;"	m	class:SciTEBase	access:protected
propsLocal	SciTEBase.h	/^	PropSetFile propsLocal;$/;"	m	class:SciTEBase	access:protected
propsPlatform	SciTEBase.h	/^	PropSetFile propsPlatform;$/;"	m	class:SciTEBase	access:protected
propsSession	SciTEBase.h	/^	PropSetFile propsSession;$/;"	m	class:SciTEBase	access:protected
propsStatus	SciTEBase.h	/^	PropSetFile propsStatus;	\/\/ Not attached to a file but need SetInteger method.$/;"	m	class:SciTEBase	access:protected
propsUser	SciTEBase.h	/^	PropSetFile propsUser;$/;"	m	class:SciTEBase	access:protected
ptStartDrag	SciTEBase.h	/^	GUI::Point ptStartDrag;$/;"	m	class:SciTEBase	access:protected
ptr	GUI.h	/^	sptr_t ptr;$/;"	m	class:GUI::ScintillaWindow	access:private
push_iface_function	LuaExtension.cxx	/^static int push_iface_function(lua_State *L, const char *name) {$/;"	f	file:	signature:(lua_State *L, const char *name)
push_iface_propval	LuaExtension.cxx	/^static int push_iface_propval(lua_State *L, const char *name) {$/;"	f	file:	signature:(lua_State *L, const char *name)
push_pane_object	LuaExtension.cxx	/^void push_pane_object(lua_State *L, ExtensionAPI::Pane p) {$/;"	f	signature:(lua_State *L, ExtensionAPI::Pane p)
pwFocussed	SciTEBase.h	/^	GUI::ScintillaWindow *pwFocussed;$/;"	m	class:SciTEBase	access:protected
quitting	SciTEBase.h	/^	bool quitting;$/;"	m	class:SciTEBase	access:protected
r	Credits.cxx	/^	int r;$/;"	m	class:__anon1::RandomColour	file:	access:public
raise_error	LuaExtension.cxx	/^inline void raise_error(lua_State *L, const char *errMsg=NULL) {$/;"	f	signature:(lua_State *L, const char *errMsg=NULL)
randomValue	Credits.cxx	/^	int randomValue;$/;"	m	class:__anon1::RandomColour	file:	access:private
read	SciTEBase.h	/^	bool read;$/;"	m	class:Localization	access:public
read	Utf8_16.cxx	/^Utf8_16::utf16 Utf16_Iter::read(const ubyte* pRead) const {$/;"	f	class:Utf16_Iter	signature:(const ubyte* pRead) const
readAll	SciTEBase.h	/^	enum { empty, reading, readAll, open } lifeState;$/;"	e	enum:Buffer::__anon6
readAll	SciTEIO.cxx	/^	bool readAll;$/;"	m	class:BufferedFile	file:	access:private
readBlockSize	FilePath.cxx	/^static const size_t readBlockSize = 64 * 1024;$/;"	v	file:
readSoFar	FileWorker.h	/^	size_t readSoFar;$/;"	m	class:FileLoader	access:public
reading	SciTEBase.h	/^	enum { empty, reading, readAll, open } lifeState;$/;"	e	enum:Buffer::__anon6
recentFileStack	SciTEBase.h	/^	RecentFile recentFileStack[fileStackMax];$/;"	m	class:SciTEBase	access:protected
recording	SciTEBase.h	/^	bool recording;$/;"	m	class:SciTEBase	access:protected
regExp	SciTEBase.h	/^	bool regExp;$/;"	m	class:Searcher	access:public
replaceWhat	SciTEBase.h	/^	std::string replaceWhat;$/;"	m	class:Searcher	access:public
replacing	SciTEBase.h	/^	bool replacing;$/;"	m	class:Searcher	access:public
reset	Utf8_16.cxx	/^void Utf16_Iter::reset() {$/;"	f	class:Utf16_Iter	signature:()
reset	Utf8_16.cxx	/^void Utf8_Iter::reset() {$/;"	f	class:Utf8_Iter	signature:()
returnOutputToCommand	SciTEBase.h	/^	bool returnOutputToCommand;$/;"	m	class:SciTEBase	access:protected
returnType	IFaceTable.h	/^	IFaceType returnType;$/;"	m	struct:IFaceFunction	access:public
reverseFind	SciTEBase.h	/^	bool reverseFind;$/;"	m	class:Searcher	access:public
right	GUI.h	/^	int right;$/;"	m	class:GUI::Rectangle	access:public
rlActive	PropSetFile.h	/^	enum ReadLineState { rlActive, rlExcludedModule, rlConditionFalse };$/;"	e	enum:PropSetFile::ReadLineState
rlConditionFalse	PropSetFile.h	/^	enum ReadLineState { rlActive, rlExcludedModule, rlConditionFalse };$/;"	e	enum:PropSetFile::ReadLineState
rlExcludedModule	PropSetFile.h	/^	enum ReadLineState { rlActive, rlExcludedModule, rlConditionFalse };$/;"	e	enum:PropSetFile::ReadLineState
saveBefore	JobQueue.h	/^	int saveBefore;$/;"	m	struct:JobMode	access:public
saveCancelled	SciTEBase.h	/^		saveCancelled$/;"	e	enum:SciTEBase::SaveResult
saveCompleted	SciTEBase.h	/^		saveCompleted,$/;"	e	enum:SciTEBase::SaveResult
sbNum	SciTEBase.h	/^	int sbNum;	\/\/\/< Number of the currently displayed status bar information.$/;"	m	class:SciTEBase	access:protected
sbValue	SciTEBase.h	/^	std::string sbValue;	\/\/\/< Status bar text.$/;"	m	class:SciTEBase	access:protected
sbVisible	SciTEBase.h	/^	bool sbVisible;	\/\/\/< @c true if status bar is visible.$/;"	m	class:SciTEBase	access:protected
scChange	StripDefinition.h	/^enum StripCommand { scUnknown, scClicked, scChange, scFocusIn, scFocusOut };$/;"	e	enum:StripCommand
scClicked	StripDefinition.h	/^enum StripCommand { scUnknown, scClicked, scChange, scFocusIn, scFocusOut };$/;"	e	enum:StripCommand
scFocusIn	StripDefinition.h	/^enum StripCommand { scUnknown, scClicked, scChange, scFocusIn, scFocusOut };$/;"	e	enum:StripCommand
scFocusOut	StripDefinition.h	/^enum StripCommand { scUnknown, scClicked, scChange, scFocusIn, scFocusOut };$/;"	e	enum:StripCommand
scUnknown	StripDefinition.h	/^enum StripCommand { scUnknown, scClicked, scChange, scFocusIn, scFocusOut };$/;"	e	enum:StripCommand
scrollOutput	SciTEBase.h	/^	int scrollOutput;$/;"	m	class:SciTEBase	access:protected
scrollPosition	SciTEBase.h	/^	int scrollPosition;$/;"	m	class:RecentFile	access:public
sdBack	StyleDefinition.h	/^	enum flags { sdNone = 0, sdFont = 0x1, sdSize = 0x2, sdFore = 0x4, sdBack = 0x8,$/;"	e	enum:StyleDefinition::flags
sdCaseForce	StyleDefinition.h	/^	        sdCaseForce = 0x100, sdVisible = 0x200, sdChangeable = 0x400} specified;$/;"	e	enum:StyleDefinition::flags
sdChangeable	StyleDefinition.h	/^	        sdCaseForce = 0x100, sdVisible = 0x200, sdChangeable = 0x400} specified;$/;"	e	enum:StyleDefinition::flags
sdEOLFilled	StyleDefinition.h	/^	        sdWeight = 0x10, sdItalics = 0x20, sdEOLFilled = 0x40, sdUnderlined = 0x80,$/;"	e	enum:StyleDefinition::flags
sdFont	StyleDefinition.h	/^	enum flags { sdNone = 0, sdFont = 0x1, sdSize = 0x2, sdFore = 0x4, sdBack = 0x8,$/;"	e	enum:StyleDefinition::flags
sdFore	StyleDefinition.h	/^	enum flags { sdNone = 0, sdFont = 0x1, sdSize = 0x2, sdFore = 0x4, sdBack = 0x8,$/;"	e	enum:StyleDefinition::flags
sdItalics	StyleDefinition.h	/^	        sdWeight = 0x10, sdItalics = 0x20, sdEOLFilled = 0x40, sdUnderlined = 0x80,$/;"	e	enum:StyleDefinition::flags
sdNone	StyleDefinition.h	/^	enum flags { sdNone = 0, sdFont = 0x1, sdSize = 0x2, sdFore = 0x4, sdBack = 0x8,$/;"	e	enum:StyleDefinition::flags
sdSize	StyleDefinition.h	/^	enum flags { sdNone = 0, sdFont = 0x1, sdSize = 0x2, sdFore = 0x4, sdBack = 0x8,$/;"	e	enum:StyleDefinition::flags
sdUnderlined	StyleDefinition.h	/^	        sdWeight = 0x10, sdItalics = 0x20, sdEOLFilled = 0x40, sdUnderlined = 0x80,$/;"	e	enum:StyleDefinition::flags
sdVisible	StyleDefinition.h	/^	        sdCaseForce = 0x100, sdVisible = 0x200, sdChangeable = 0x400} specified;$/;"	e	enum:StyleDefinition::flags
sdWeight	StyleDefinition.h	/^	        sdWeight = 0x10, sdItalics = 0x20, sdEOLFilled = 0x40, sdUnderlined = 0x80,$/;"	e	enum:StyleDefinition::flags
searchLen	StringList.cxx	/^	size_t searchLen;$/;"	m	struct:__anon30::CompareString	file:	access:public
searchLen	StringList.cxx	/^	size_t searchLen;$/;"	m	struct:__anon30::CompareStringInsensitive	file:	access:public
searchStartPosition	SciTEBase.h	/^	int searchStartPosition;$/;"	m	class:Searcher	access:public
selection	SciTEBase.h	/^	SelectedRange selection;$/;"	m	class:RecentFile	access:public
set	Utf8_16.cxx	/^void Utf16_Iter::set$/;"	f	class:Utf16_Iter	signature:(const ubyte* pBuf, size_t nLen, encodingType eEncoding, ubyte *endSurrogate)
set	Utf8_16.cxx	/^void Utf8_Iter::set$/;"	f	class:Utf8_Iter	signature:(const ubyte* pBuf, size_t nLen, encodingType eEncoding)
setEncoding	Utf8_16.cxx	/^void Utf8_16_Write::setEncoding(Utf8_16::encodingType eType) {$/;"	f	class:Utf8_16_Write	signature:(Utf8_16::encodingType eType)
setfile	Utf8_16.cxx	/^void Utf8_16_Write::setfile(FILE *pFile) {$/;"	f	class:Utf8_16_Write	signature:(FILE *pFile)
setter	IFaceTable.h	/^	int setter;$/;"	m	struct:IFaceProperty	access:public
sfNone	SciTEBase.h	/^	    sfNone = 0, 		\/\/ Default$/;"	e	enum:SciTEBase::SaveFlags
sfProgressVisible	SciTEBase.h	/^	    sfProgressVisible = 1, 	\/\/ Show in background save strip$/;"	e	enum:SciTEBase::SaveFlags
sfSynchronous	SciTEBase.h	/^	    sfSynchronous = 16	\/\/ Write synchronously blocking UI$/;"	e	enum:SciTEBase::SaveFlags
shortCutItemList	SciTEBase.h	/^	std::vector<ShortcutItem> shortCutItemList;$/;"	m	class:SciTEBase	access:protected
size	FileWorker.h	/^	size_t size;$/;"	m	struct:FileWorker	access:public
size	SciTEBase.h	/^	int size() const {$/;"	f	class:BufferList	access:public	signature:() const
size	StyleDefinition.h	/^	int size;$/;"	m	class:StyleDefinition	access:public
sizeFractional	StyleDefinition.h	/^	float sizeFractional;$/;"	m	class:StyleDefinition	access:public
sleepTime	FileWorker.h	/^	int sleepTime;$/;"	m	struct:FileWorker	access:public
slopSize	StyleWriter.h	/^	enum {bufferSize=4000, slopSize=bufferSize\/8};$/;"	e	enum:TextReader::__anon32
sorted	StringList.h	/^	bool sorted;$/;"	m	class:StringList	access:private
sortedNoCase	StringList.h	/^	bool sortedNoCase;$/;"	m	class:StringList	access:private
source	GUI.h	/^	ScintillaWindow(const ScintillaWindow &source) = delete;$/;"	m	class:GUI::ScintillaWindow	access:private
source	StyleWriter.h	/^	StyleWriter(const StyleWriter &source) = delete;$/;"	m	class:StyleWriter	access:private
source	StyleWriter.h	/^	TextReader(const TextReader &source) = delete;$/;"	m	class:TextReader	access:public
specified	StyleDefinition.h	/^	        sdCaseForce = 0x100, sdVisible = 0x200, sdChangeable = 0x400} specified;$/;"	m	class:StyleDefinition	typeref:enum:StyleDefinition::flags	access:public
splitVertical	SciTEBase.h	/^	bool splitVertical;	\/\/\/< @c true if the split bar between editor and output is vertical.$/;"	m	class:SciTEBase	access:protected
stack	SciTEBase.h	/^	std::vector<int> stack;$/;"	m	class:BufferList	access:protected
stackcurrent	SciTEBase.h	/^	int stackcurrent;$/;"	m	class:BufferList	access:protected
startCalltipWord	SciTEBase.h	/^	int startCalltipWord;$/;"	m	class:SciTEBase	access:protected
startPos	LuaExtension.cxx	/^	int startPos;$/;"	m	struct:PaneMatchObject	file:	access:public
startPos	LuaExtension.cxx	/^	unsigned int startPos;$/;"	m	struct:StylingContext	file:	access:public
startPos	StyleWriter.h	/^	int startPos;$/;"	m	class:TextReader	access:protected
startSeg	StyleWriter.h	/^	unsigned int startSeg;$/;"	m	class:StyleWriter	access:protected
startswith	PropSetFile.cxx	/^static bool startswith(const std::string &s, const char *keybase) {$/;"	f	file:	signature:(const std::string &s, const char *keybase)
startupScript	LuaExtension.cxx	/^static std::string startupScript;$/;"	v	file:
stat	FilePath.cxx	/^static int stat(const wchar_t *path, struct _stat *buffer) {$/;"	f	file:	signature:(const wchar_t *path, struct _stat *buffer)
stat	FilePath.cxx	/^static int stat(const wchar_t *path, struct _stat64i32 *buffer) {$/;"	f	file:	signature:(const wchar_t *path, struct _stat64i32 *buffer)
state	LuaExtension.cxx	/^	int state;$/;"	m	struct:StylingContext	file:	access:public
statementEnd	SciTEBase.h	/^	StyleAndWords statementEnd;$/;"	m	class:SciTEBase	access:protected
statementIndent	SciTEBase.h	/^	StyleAndWords statementIndent;$/;"	m	class:SciTEBase	access:protected
statementLookback	SciTEBase.h	/^	int statementLookback;$/;"	m	class:SciTEBase	access:protected
statesOfDelay	SciTEBase.h	/^	} statesOfDelay;$/;"	m	struct:CurrentWordHighlight	typeref:enum:CurrentWordHighlight::__anon10	access:public
status	GUI.h	/^	sptr_t status;$/;"	m	class:GUI::ScintillaWindow	access:public
status	GUI.h	/^	sptr_t status;$/;"	m	struct:GUI::ScintillaFailure	access:public
statusPosWidth	SciTEBase.h	/^    statusPosWidth = 256$/;"	e	enum:__anon8
storers	SciTEBase.h	/^	int storers;$/;"	m	struct:BackgroundActivities	access:public
strchr	FilePath.cxx	/^static wchar_t *strchr(wchar_t *str, wchar_t c) {$/;"	f	file:	signature:(wchar_t *str, wchar_t c)
strcmp	FilePath.cxx	/^static int strcmp(const wchar_t *a, const wchar_t *b) {$/;"	f	file:	signature:(const wchar_t *a, const wchar_t *b)
strcpy	FilePath.cxx	/^static wchar_t *strcpy(wchar_t *strDestination, const wchar_t *strSource) {$/;"	f	file:	signature:(wchar_t *strDestination, const wchar_t *strSource)
stripEol	SciTEBase.h	/^	std::string SelectionExtend(bool (SciTEBase::*ischarforsel)(char ch), bool stripEol = true);$/;"	m	class:SciTEBase	access:protected
strlen	FilePath.cxx	/^static size_t strlen(const wchar_t *str) {$/;"	f	file:	signature:(const wchar_t *str)
strrchr	FilePath.cxx	/^static wchar_t *strrchr(wchar_t *str, wchar_t c) {$/;"	f	file:	signature:(wchar_t *str, wchar_t c)
style	StyleDefinition.h	/^	int style;$/;"	m	struct:IndicatorDefinition	access:public
styleBuf	StyleWriter.h	/^	char styleBuf[bufferSize];$/;"	m	class:StyleWriter	access:protected
styleMatch	MatchMarker.h	/^	int styleMatch;$/;"	m	class:MatchMarker	access:private
styleNumber	SciTEBase.h	/^	int styleNumber;$/;"	m	struct:StyleAndWords	access:public
styler	LuaExtension.cxx	/^	StyleWriter *styler;$/;"	m	struct:StylingContext	file:	access:public
subStyleBases	SciTEBase.h	/^	std::vector<char> subStyleBases;$/;"	m	class:SciTEBase	access:protected
superPS	PropSetFile.h	/^	PropSetFile *superPS;$/;"	m	class:PropSetFile	access:public
sw	StyleWriter.h	/^	GUI::ScintillaWindow &sw;$/;"	m	class:TextReader	access:protected
swapped	Utf8_16.cxx	/^static int swapped(int v) {$/;"	f	file:	signature:(int v)
tBackslash	SciTEBase.h	/^	enum { tWord, tCase, tRegExp, tBackslash, tWrap, tUp };$/;"	e	enum:SearchOption::__anon11
tCase	SciTEBase.h	/^	enum { tWord, tCase, tRegExp, tBackslash, tWrap, tUp };$/;"	e	enum:SearchOption::__anon11
tRegExp	SciTEBase.h	/^	enum { tWord, tCase, tRegExp, tBackslash, tWrap, tUp };$/;"	e	enum:SearchOption::__anon11
tUp	SciTEBase.h	/^	enum { tWord, tCase, tRegExp, tBackslash, tWrap, tUp };$/;"	e	enum:SearchOption::__anon11
tWord	SciTEBase.h	/^	enum { tWord, tCase, tRegExp, tBackslash, tWrap, tUp };$/;"	e	enum:SearchOption::__anon11
tWrap	SciTEBase.h	/^	enum { tWord, tCase, tRegExp, tBackslash, tWrap, tUp };$/;"	e	enum:SearchOption::__anon11
tabHideOne	SciTEBase.h	/^	bool tabHideOne; \/\/ Hide tab bar if one buffer is opened only$/;"	m	class:SciTEBase	access:protected
tabMultiLine	SciTEBase.h	/^	bool tabMultiLine;$/;"	m	class:SciTEBase	access:protected
tabVisible	SciTEBase.h	/^	bool tabVisible;$/;"	m	class:SciTEBase	access:protected
tbVisible	SciTEBase.h	/^	bool tbVisible;$/;"	m	class:SciTEBase	access:protected
texStyle	ExportTEX.cxx	/^static char* texStyle(int style) {$/;"	f	file:	signature:(int style)
text	StripDefinition.h	/^	GUI::gui_string text;$/;"	m	class:UserControl	access:public
textHasChanged	SciTEBase.h	/^	bool textHasChanged;$/;"	m	struct:CurrentWordHighlight	access:public
textMatch	MatchMarker.h	/^	std::string textMatch;$/;"	m	class:MatchMarker	access:private
timeBetweenProgress	FileWorker.cxx	/^const double timeBetweenProgress = 0.4;$/;"	v
timeCommands	JobQueue.h	/^	bool timeCommands;$/;"	m	class:JobQueue	access:public
timerAutoSave	SciTEBase.h	/^	enum { timerAutoSave=1 };$/;"	e	enum:SciTEBase::__anon21
timerMask	SciTEBase.h	/^	int timerMask;$/;"	m	class:SciTEBase	access:protected
toStart	Utf8_16.cxx	/^void Utf8_Iter::toStart() {$/;"	f	class:Utf8_Iter	signature:()
toolMax	SciTEBase.h	/^	enum { toolMax = 50 };$/;"	e	enum:SciTEBase::__anon20
top	GUI.h	/^	int top;$/;"	m	class:GUI::Rectangle	access:public
topMost	SciTEBase.h	/^	bool topMost;$/;"	m	class:SciTEBase	access:protected
totalProgress	SciTEBase.h	/^	size_t totalProgress;$/;"	m	struct:BackgroundActivities	access:public
totalWork	SciTEBase.h	/^	size_t totalWork;$/;"	m	struct:BackgroundActivities	access:public
tracebackEnabled	LuaExtension.cxx	/^static bool tracebackEnabled = true;$/;"	v	file:
ubyte	Utf8_16.h	/^	typedef unsigned char ubyte;$/;"	t	class:Utf8_16	access:public
ucButton	StripDefinition.h	/^	enum UCControlType { ucStatic, ucEdit, ucCombo, ucButton, ucDefaultButton } controlType;$/;"	e	enum:UserControl::UCControlType
ucCombo	StripDefinition.h	/^	enum UCControlType { ucStatic, ucEdit, ucCombo, ucButton, ucDefaultButton } controlType;$/;"	e	enum:UserControl::UCControlType
ucDefaultButton	StripDefinition.h	/^	enum UCControlType { ucStatic, ucEdit, ucCombo, ucButton, ucDefaultButton } controlType;$/;"	e	enum:UserControl::UCControlType
ucEdit	StripDefinition.h	/^	enum UCControlType { ucStatic, ucEdit, ucCombo, ucButton, ucDefaultButton } controlType;$/;"	e	enum:UserControl::UCControlType
ucStatic	StripDefinition.h	/^	enum UCControlType { ucStatic, ucEdit, ucCombo, ucButton, ucDefaultButton } controlType;$/;"	e	enum:UserControl::UCControlType
unSlash	SciTEBase.h	/^	bool unSlash;$/;"	m	class:Searcher	access:public
under	StyleDefinition.h	/^	bool under;$/;"	m	struct:IndicatorDefinition	access:public
underIndicator	SciTEBase.h	/^	bool underIndicator;$/;"	m	class:SciTEBase	access:protected
underlined	StyleDefinition.h	/^	bool underlined;$/;"	m	class:StyleDefinition	access:public
uni16BE	Cookie.h	/^    uni8Bit = 0, uni16BE = 1, uni16LE = 2, uniUTF8 = 3,$/;"	e	enum:UniMode
uni16LE	Cookie.h	/^    uni8Bit = 0, uni16BE = 1, uni16LE = 2, uniUTF8 = 3,$/;"	e	enum:UniMode
uni8Bit	Cookie.h	/^    uni8Bit = 0, uni16BE = 1, uni16LE = 2, uniUTF8 = 3,$/;"	e	enum:UniMode
uniCookie	Cookie.h	/^    uniCookie = 4$/;"	e	enum:UniMode
uniUTF8	Cookie.h	/^    uni8Bit = 0, uni16BE = 1, uni16LE = 2, uniUTF8 = 3,$/;"	e	enum:UniMode
unicodeMode	FileWorker.h	/^	UniMode unicodeMode;$/;"	m	class:FileLoader	access:public
unicodeMode	FileWorker.h	/^	UniMode unicodeMode;$/;"	m	class:FileStorer	access:public
unicodeMode	SciTEBase.h	/^	UniMode unicodeMode;$/;"	m	class:Buffer	access:public
unlink	FilePath.cxx	/^static int unlink(const wchar_t *filename) {$/;"	f	file:	signature:(const wchar_t *filename)
useMonoFont	SciTEBase.h	/^	bool useMonoFont;$/;"	m	class:Buffer	access:public
utf16	Utf8_16.h	/^	typedef unsigned short utf16; \/\/ 16 bits$/;"	t	class:Utf8_16	access:public
utf8	Utf8_16.h	/^	typedef unsigned char utf8; \/\/ 8 bits$/;"	t	class:Utf8_16	access:public
valid	SciTEIO.cxx	/^	size_t valid;$/;"	m	class:BufferedFile	file:	access:private
validLen	StyleWriter.h	/^	int validLen;$/;"	m	class:StyleWriter	access:protected
value	Containers.h	/^		VALUE value;$/;"	m	struct:TMap::Association	access:public
value	IFaceTable.h	/^	int value;$/;"	m	struct:IFaceConstant	access:public
value	IFaceTable.h	/^	int value;$/;"	m	struct:IFaceFunction	access:public
valueType	IFaceTable.h	/^	IFaceType valueType;$/;"	m	struct:IFaceProperty	access:public
var	PropSetFile.cxx	/^	const char *var;$/;"	m	struct:VarChain	file:	access:public
visHeightEditor	SciTEBase.h	/^	int visHeightEditor;$/;"	m	class:SciTEBase	access:protected
visHeightStatus	SciTEBase.h	/^	int visHeightStatus;$/;"	m	class:SciTEBase	access:protected
visHeightTab	SciTEBase.h	/^	int visHeightTab;$/;"	m	class:SciTEBase	access:protected
visHeightTools	SciTEBase.h	/^	int visHeightTools;$/;"	m	class:SciTEBase	access:protected
visible	StyleDefinition.h	/^	bool visible;$/;"	m	class:StyleDefinition	access:public
visibleProgress	FileWorker.h	/^	bool visibleProgress;$/;"	m	class:FileStorer	access:public
w	StripDefinition.h	/^	GUI::Window w;$/;"	m	class:UserControl	access:public
wContent	SciTEBase.h	/^	GUI::Window wContent;    \/\/\/< Contains wEditor and wOutput$/;"	m	class:SciTEBase	access:protected
wEditor	SciTEBase.h	/^	GUI::ScintillaWindow wEditor;$/;"	m	class:SciTEBase	access:protected
wIncrement	SciTEBase.h	/^	GUI::Window wIncrement;$/;"	m	class:SciTEBase	access:protected
wOutput	SciTEBase.h	/^	GUI::ScintillaWindow wOutput;$/;"	m	class:SciTEBase	access:protected
wSciTE	SciTEBase.h	/^	GUI::Window wSciTE;  \/\/\/< Contains wToolBar, wTabBar, wContent, and wStatusBar$/;"	m	class:SciTEBase	access:protected
wStatusBar	SciTEBase.h	/^	GUI::Window wStatusBar;$/;"	m	class:SciTEBase	access:protected
wTabBar	SciTEBase.h	/^	GUI::Window wTabBar;$/;"	m	class:SciTEBase	access:protected
wToolBar	SciTEBase.h	/^	GUI::Window wToolBar;$/;"	m	class:SciTEBase	access:protected
warnExecuteKO	SciTEBase.h	/^    warnExecuteKO$/;"	e	enum:__anon9
warnExecuteOK	SciTEBase.h	/^    warnExecuteOK,$/;"	e	enum:__anon9
warnFindWrapped	SciTEBase.h	/^    warnFindWrapped = 1,$/;"	e	enum:__anon9
warnNoOtherBookmark	SciTEBase.h	/^    warnNoOtherBookmark,$/;"	e	enum:__anon9
warnNotFound	SciTEBase.h	/^    warnNotFound,$/;"	e	enum:__anon9
warnWrongFile	SciTEBase.h	/^    warnWrongFile,$/;"	e	enum:__anon9
weight	StyleDefinition.h	/^	int weight;$/;"	m	class:StyleDefinition	access:public
whitespaceCharacters	SciTEBase.h	/^	std::string whitespaceCharacters;$/;"	m	class:SciTEBase	access:protected
wholeWord	SciTEBase.h	/^	bool wholeWord;$/;"	m	class:Searcher	access:public
wid	GUI.h	/^	WindowID wid;$/;"	m	class:GUI::Window	access:protected
widthAllocated	StripDefinition.h	/^	int widthAllocated;$/;"	m	class:UserControl	access:public
widthAllocated	StripDefinition.h	/^	int widthAllocated;$/;"	m	struct:ColumnWidth	access:public
widthDesired	StripDefinition.h	/^	int widthDesired;$/;"	m	class:UserControl	access:public
widthDesired	StripDefinition.h	/^	int widthDesired;$/;"	m	struct:ColumnWidth	access:public
widths	StripDefinition.h	/^	std::vector<ColumnWidth> widths;$/;"	m	class:StripDefinition	access:public
windowName	SciTEBase.h	/^	GUI::gui_string windowName;$/;"	m	class:SciTEBase	access:protected
wordCharacters	SciTEBase.h	/^	std::string wordCharacters;$/;"	m	class:SciTEBase	access:protected
words	SciTEBase.h	/^	std::string words;$/;"	m	struct:StyleAndWords	access:public
words	StringList.h	/^	std::vector<char *> words;$/;"	m	class:StringList	access:private
wordsNoCase	StringList.h	/^	std::vector<char *> wordsNoCase;$/;"	m	class:StringList	access:private
wrap	SciTEBase.h	/^	bool wrap;$/;"	m	class:SciTEBase	access:protected
wrapFind	SciTEBase.h	/^	bool wrapFind;$/;"	m	class:Searcher	access:public
wrapOutput	SciTEBase.h	/^	bool wrapOutput;$/;"	m	class:SciTEBase	access:protected
wrapStyle	SciTEBase.h	/^	int wrapStyle;$/;"	m	class:SciTEBase	access:protected
writtenSoFar	FileWorker.h	/^	size_t writtenSoFar;$/;"	m	class:FileStorer	access:public
x	GUI.h	/^	int x;$/;"	m	class:GUI::Point	access:public
y	GUI.h	/^	int y;$/;"	m	class:GUI::Point	access:public
~BufferList	SciTEBuffers.cxx	/^BufferList::~BufferList() {$/;"	f	class:BufferList	signature:()
~BufferedFile	SciTEIO.cxx	/^	~BufferedFile() {$/;"	f	class:BufferedFile	access:public	signature:()
~Extension	Extender.h	/^	virtual ~Extension() {}$/;"	f	class:Extension	access:public	signature:()
~ExtensionAPI	Extender.h	/^	virtual ~ExtensionAPI() {$/;"	f	class:ExtensionAPI	access:public	signature:()
~FileLoader	FileWorker.cxx	/^FileLoader::~FileLoader() {$/;"	f	class:FileLoader	signature:()
~FileReader	SciTEIO.cxx	/^	~FileReader() {$/;"	f	class:FileReader	access:public	signature:()
~FileStorer	FileWorker.cxx	/^FileStorer::~FileStorer() {$/;"	f	class:FileStorer	signature:()
~FileWorker	FileWorker.cxx	/^FileWorker::~FileWorker() {$/;"	f	class:FileWorker	signature:()
~JobQueue	JobQueue.h	/^	~JobQueue() {$/;"	f	class:JobQueue	access:public	signature:()
~Lock	Mutex.h	/^	~Lock() {$/;"	f	class:Lock	access:public	signature:()
~LuaExtension	LuaExtension.cxx	/^LuaExtension::~LuaExtension() {}$/;"	f	class:LuaExtension	signature:()
~MatchMarker	MatchMarker.cxx	/^MatchMarker::~MatchMarker() {$/;"	f	class:MatchMarker	signature:()
~MultiplexExtension	MultiplexExtension.cxx	/^MultiplexExtension::~MultiplexExtension() {$/;"	f	class:MultiplexExtension	signature:()
~Mutex	Mutex.h	/^	virtual ~Mutex() {}$/;"	f	class:Mutex	access:public	signature:()
~PropSetFile	PropSetFile.cxx	/^PropSetFile::~PropSetFile() {$/;"	f	class:PropSetFile	signature:()
~SciTEBase	SciTEBase.cxx	/^SciTEBase::~SciTEBase() {$/;"	f	class:SciTEBase	signature:()
~StringList	StringList.h	/^	~StringList() { Clear(); }$/;"	f	class:StringList	access:public	signature:()
~TList	Containers.h	/^	~TList() {$/;"	f	class:TList	access:public	signature:()
~TMap	Containers.h	/^	~TMap() {$/;"	f	class:TMap	access:public	signature:()
~Utf8_16_Read	Utf8_16.cxx	/^Utf8_16_Read::~Utf8_16_Read() {$/;"	f	class:Utf8_16_Read	signature:()
~Utf8_16_Write	Utf8_16.cxx	/^Utf8_16_Write::~Utf8_16_Write() {$/;"	f	class:Utf8_16_Write	signature:()
~Worker	Worker.h	/^	virtual ~Worker() {$/;"	f	struct:Worker	access:public	signature:()
