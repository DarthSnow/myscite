# Define SciTE settings for other simple files.

file.patterns.props=*.properties;*.session;*.ini;*.inf;*.url;*.cfg;*.cnf;*.aut;*.reg
file.patterns.text=*.txt;*.log;*.lst;*.doc;*.diz;*.nfo
file.patterns.batch=*.bat;*.cmd;*.nt
file.patterns.diff=*.diff;*.patch
file.patterns.make=makefile;Makefile;*.mak;configure;*.iface;

*source.patterns.props=$(file.patterns.props);
*source.patterns.batch=$(file.patterns.batch);
*source.patterns.diff=$(file.patterns.diff);
*source.patterns.make=$(file.patterns.make);

*filter.properties=Properties ( ini inf reg url cfg cnf )|$(file.patterns.props)|
*filter.text=Text / Batch ( txt log lst make bat cmd nt )|$(file.patterns.text);$(file.patterns.diff);$(file.patterns.make);$(file.patterns.batch)|

lexer.$(file.patterns.props)=props
lexer.$(file.patterns.batch)=batch
lexer.*.err=errorlist
lexer.$(file.patterns.make)=makefile
lexer.*.iface=makefile
lexer.$(file.patterns.diff)=diff
lexer.$(file.patterns.text)=registry
#*language._text=Text|txt|$(keyText)|
word.characters.$(file.patterns.text)=$(chars.alpha)$(chars.numeric)$(chars.accented)-'

*language.batch=&NTBatch|||
#*language.difference=&Difference|diff||
#*language.errorlist=&Errorlist|err||
#*language.properties=&Properties|properties||
*language.makefile=&Makefile|mak|$(keyMake)|

# ---- Properties styles
# Default
style.props.0=$(colour.style.0)
# Comment
style.props.1=$(colour.comment.line),$(font.comment)
# Section
style.props.2=$(colour.signal),$(colour.accent),eolfilled
# Assignment operator
style.props.3=$(colour.operator)
# Default value (@)
style.props.4=$(colour.preproc)
# Matched Operators
style.props.34=$(colour.operator),notbold
style.props.35=$(colour.operator),notbold
comment.block.props=#~
preprocessor.symbol.$(file.patterns.make)=!
preprocessor.start.$(file.patterns.make)=IF IFDEF IFNDEF
preprocessor.middle.$(file.patterns.make)=ELSE ELSEIF ELSEIFDEF ELSEIFNDEF
preprocessor.end.$(file.patterns.make)=ENDIF


# ---- Batch keywords

# List from http://www.easydos.com/dosindex.html
# I limit here the commands to those built in command.com, ie. I don't list external Dos commands
# if [no] (test) (command) -- test is EXIST (filename) | (string1)==(string2) | ERRORLEVEL (number)
# for %%(variable) IN (set) DO (command) -- variable is [a-zA-Z] -- eg for %%X in (*.txt) do type %%X
keywordclass.batch=append rem set if exist errorlevel for in do \
break call chcp cd chdir choice cls country ctty date del erase dir echo \
exit goto loadfix loadhigh mkdir md move path pause prompt rename ren \
rmdir rd shift time type ver verify vol \
com con lpt nul
keywords.$(file.patterns.batch)=$(keywordclass.batch)

#define the activation of the ProperCase function using batch.api.  0=no change, 1=Propercase functions and keywords
proper.case=0

# ---- Batch calltip and autocomplete Settings, 
# ---- Caution: Whitespace allergic api property.

api.$(file.patterns.batch)=$(SciteDefaultHome)\user\api\batch_win2003.api;$(SciteDefaultHome)\user\api\batch_nt.api

#;$(SciteDefaultHome)\user\api\batch_winreskit.api;$(SciteDefaultHome)\user\api\batch_sysinternals.api;$(SciteDefaultHome)\user\api\batch_unix_utils.api;

calltip.batch.word.characters=$(chars.alpha)$(chars.numeric)%
calltip.batch.ignorecase=1
calltip.batch.parameters.start= 
calltip.batch.parameters.separators= 
calltip.batch.end.definition=;
autocomplete.batch.ignorecase=1
autocomplete.batch.start.characters=$(chars.alpha)$(chars.numeric)%
word.characters.$(file.patterns.batch)=$(chars.alpha)$(chars.numeric)%


# ---- Batch default Styles
# Params /xyz
style.batch.0=$(colour.style.0)
# Comment (rem or ::)
style.batch.1=$(colour.code.comment.line),$(font.comment)
# Keywords
style.batch.2=$(colour.keyword)
# Label (line beginning with ':')
style.batch.3=$(colour.signal),$(colour.accent),eolfilled
# Hide command character ('@')
style.batch.4=$(colour.signal),$(colour.accent),eolfilled
# External commands
style.batch.5=$(colour.extcmd),$(font.monospace)
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=$(colour.identifier)
#style.batch.6=fore:#999999

# Operator: * ? < > |
style.batch.7=$(colour.operator)

comment.block.batch=:: 
comment.box.start.batch=:: *****************************************************
comment.box.middle.batch=:: ** 
comment.box.end.batch=:: *****************************************************
comment.stream.start.batch=:: 
comment.stream.end.batch= 


# ---- Makefile styles

# Default
style.makefile.0=$(colour.style.0)
# Comment: #
style.makefile.1=$(colour.other.comment),$(font.code.comment.box)
# Pre-processor or other comment: !
style.makefile.2=$(colour.preproc)
# Variable: $(x)
style.makefile.3=$(colour.identifier)
# Operator
style.makefile.4=$(colour.operator)
# Target
style.makefile.5=$(colour.userdefinedliterals)
# Error
style.makefile.9=$(colour.error),eolfilled
# Matched Operators
style.makefile.34=$(colour.operator),notbold
style.makefile.35=$(colour.operator),notbold

comment.block.makefile=#~


# ---- Error list styles

#style.errorlist.32=$(colour.foreground),$(font.small)
# Default
style.errorlist.0=$(colour.style.0),$(font.small)
# python Error
style.errorlist.1=fore:#FF0000
# gcc Error
style.errorlist.2=fore:#800080
# Microsoft Error
style.errorlist.3=fore:#808000
# command or return status
style.errorlist.4=fore:#0000FF
# Borland error and warning messages
style.errorlist.5=fore:#B06000
# perl error and warning messages
style.errorlist.6=fore:#FF0000
# .NET tracebacks
style.errorlist.7=fore:#FF0000
# Lua error and warning messages
style.errorlist.8=fore:#FF0000
# ctags
style.errorlist.9=fore:#FF00FF
# diff changed !
style.errorlist.10=fore:#007F00
# diff addition +
style.errorlist.11=fore:#00007F
# diff deletion -
style.errorlist.12=fore:#007F7F
# diff message ---
style.errorlist.13=fore:#7F0000
# PHP error
style.errorlist.14=fore:#FF0000
# Essential Lahey Fortran 90 error
style.errorlist.15=fore:#FF0000
# Intel Fortran Compiler error
style.errorlist.16=fore:#FF0000
# Intel Fortran Compiler v8.0 error/warning
style.errorlist.17=fore:#FF0000
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.errorlist.18=fore:#FF0000
# HTML Tidy
style.errorlist.19=fore:#FF0000
# Java runtime stack trace
style.errorlist.20=fore:#FF0000
# Ensures that spacing is not affected by line number styles
style.errorlist.33=$(font.small)

# ---- Difference styles

# Default
style.diff.0=	$(colour.style.0)
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=fore:#007F00
# Command (diff ...)
style.diff.2=fore:#7F7F00
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=fore:#7F0000
# Position setting (@@ ...)
style.diff.4=fore:#7F007F
# Line removal (-...)
style.diff.5=fore:#007F7F
# Line addition (+...)
style.diff.6=fore:#00007F

# ------ Batchfile specific Tool Commands
		
#---- Live Help for Commands
	command.name.3.*.cmd;*.bat=Windows Command Help
	command.mode.3.*.cmd;*.bat=savebefore:no
	command.3.*.cmd;*.bat=cmd /c $(CurrentSelection) /?

	command.name.14.*.sh=Unix Command Help
	command.mode.14.*.sh=savebefore:no
	command.14.*.sh=$(CurrentSelection) --help

# ---- Build Commands
	command.build.makefile=make
	command.build.*.mak=make

if PLAT_WIN
	command.go.$(file.patterns.batch)=cmd /c $(FileNameExt) $(1) $(2) $(3) $(4)
	command.name.0.*.bat;*.cmd=Execute Selection

	command.3.$(file.patterns.batch)=cmd /c $(CurrentSelection) /?	

	command.name.1.*.mak=nmake
	command.1.*.mak=nmake -f $(FileNameExt)
