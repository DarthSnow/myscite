# Define SciTE settings for other simple files.
file.patterns.props=*.properties;*.session;*.url;*.cfg;*.cnf;*.aut;*.prefs;*.ini
file.patterns.text=*.txt;*.log;*.lst;*.list;*.doc;*.diz;*.nfo;*.readme;readme.*;*.me;news.*;*.gitconfig;*.gitattributes;*.gitignore
file.patterns.markdown=*.diz;*.nfo;*.me;*.md;*.readme;readme.*;changelog.*

file.patterns.batch=*.bat;*.cmd;*.nt
file.patterns.diff=*.diff;*.patch;*.rej
file.patterns.make=GNUmakefile;*.iface;*.mk;*.mak;makefile;Makefile;makefile.*

*source.patterns.props=$(file.patterns.props);
*source.patterns.batch=$(file.patterns.batch);
*source.patterns.diff=$(file.patterns.diff);
*source.patterns.make=$(file.patterns.make);

*filter.properties=Properties ( ini inf reg url cfg cnf )|$(file.patterns.props)|
*filter.text=Text / Batch ( txt log lst make bat cmd nt )|$(file.patterns.text);$(file.patterns.diff);$(file.patterns.make);$(file.patterns.batch)|
word.characters.$(file.patterns.text)=$(chars.alpha)$(chars.numeric)$(chars.accented)-'

# use markdown lexer for .txt, so allowing for simple plainText styling... :)
#lexer.$(file.patterns.text)=markdown
lexer.$(file.patterns.text)=makefile
lexer.$(file.patterns.markdown)=markdown
lexer.$(file.patterns.props)=props
lexer.$(file.patterns.batch)=batch
lexer.*.err=errorlist
lexer.$(file.patterns.make)=makefile
lexer.*.iface=makefile
lexer.$(file.patterns.diff)=diff

#*language.batch=&NTBatch|cmd||
#*language.makefile=&Makefile|mak|$(keyMake)|
*language._text=Text|txt||
#*language.difference=&Difference|diff||
#*language.errorlist=&Errorlist|err||
#*language.properties=&Properties|properties||

# ---- Properties styles
# Default
style.props.0=$(colour.default)
# Comment
style.props.1=$(colour.comment.line),$(font.comment)
# Section
style.props.2=$(colour.signal),$(colour.accent.back),eolfilled
# Assignment operator
style.props.3=$(colour.operator)
# Default value (@)
style.props.4=$(colour.preproc)
# Matched Operators
style.props.34=$(colour.operator),notbold
style.props.35=$(colour.operator),notbold
comment.block.props=#~

# ----- Markdown styles
# Default
style.unknown=$(colour.identifier)
# Normal
style.markdown.0=$(colour.default)
# Special, e.g. end-of-line codes if enabled
style.markdown.1=$(colour.accent.back)
# STRONG **double asterisk**
style.markdown.2=$(colour.keyword1),italics
# STRONG 2 (not used)
style.markdown.3=$(style.unknown)
# EM1 *single asterisk*
style.markdown.4=$(colour.keyword1),italics
# EM2 _single underline_
style.markdown.5=fore:#663300,italics
# H1-H3 ## Hash signs ##
style.markdown.6=fore:#FF7700,bold,$(font.monospace)
style.markdown.7=fore:#DD6600,bold,$(font.monospace)
style.markdown.8=fore:#BB5500,bold,$(font.monospace)
# H4
style.markdown.9=$(style.unknown),bold
# H5
style.markdown.10=$(style.unknown),bold
# H6
style.markdown.11=$(style.unknown),bold
# prechar (up to three indent spaces, eg for a second-level list)
style.markdown.12=fore:#203010,$(color.accent.back)
# list
style.markdown.13=fore:#33CC00
# list
style.markdown.14=$(style.unknown)
# BLOCKQUOTE
style.markdown.15=$(style.unknown)
# STRIKEOUT ~~double tilde~~ (apparently not in Markdown)
style.markdown.16=$(style.unknown)
# HRULE --- (three or more hyphens)
style.markdown.17=$(colour.keyword)
# LINK
style.markdown.18=fore:#0000AA
# CODE `single backticks`
style.markdown.19=fore:#7F007F,$(font.monospace),$(color.accent.back)
# CODE2 ``double backticks`` (quotes code containing a single backtick)
style.markdown.20=$(style.markdown.19)
# CODEBLOCK
style.markdown.21=$(style.unknown)
# COMMENT
style.markdown.22=$(style.unknown)
# OPTION
style.markdown.23=$(style.unknown)
# PREPROC
style.markdown.24=$(style.unknown)
# POSTPROC
style.markdown.25=$(style.unknown)
style.markdown.18=$(colour.signal)

# ---- Batch keywords

# List from http://www.easydos.com/dosindex.html
# I limit here the commands to those built in command.com, ie. I don't list external Dos commands
# if [no] (test) (command) -- test is EXIST (filename) | (string1)==(string2) | ERRORLEVEL (number)
# for %%(variable) IN (set) DO (command) -- variable is [a-zA-Z] -- eg for %%X in (*.txt) do type %%X
keywordclass.batchFlow=defined if else equ geq gtr leq lss neq not delims do eol exist for in skip tokens usebackq goto do

keywordclass.batchCmd=assoc break cd chdir cls color con copy date del dir endlocal erase \
exit ftype mkdir md move nul path pause popd pushd rd ren rename rmdir setlocal shift time title type ver verify vol arp at atmadm attrib bootcfg \
cacls chcp chkdsk chkntfs cipher cmd cmstp comp compact convert cprofile defrag diskcomp diskcopy diskpart doskey driverquery eventcreate eventquery eventtriggers \
expand fc find findstr format fsutil ftp getmac gpresult gpupdate graftabl help ipconfig ipxroute label lodctr logman lpq lpr mode more mountvol msiexec nbtstat netsh netstat \
ntbackup openfiles pathping ping print rasdial rcp recover reg regsvr32 relog replace rexec robocopy route runas sc schtasks shutdown sort subst systeminfo sfc taskkill tasklist \
telnet tftp tracerpt tracert tree typeperf unlodctr vssadmin w32tm xcopy append debug edit edlin exe2bin fastopen forcedos graphics loadfix mem nlsfunc setver share \
start choice echo call do loadhigh lh call echo  prompt set errorlevel

keywordclass.batchEnv=allusersprofile appdata clientname cmdcmdline cmdextversion comspec commonprogramfiles computername errorlevel homedrive homepath localappdata logonserver number_of_processors os pathext processor_architecture processor_identifier processor_level processor_revision programfiles random sessionname systemdrive systemroot temp tmp userdnsdomain userdomain username userprofile windir

keywords.$(file.patterns.batch)=$(keywordclass.batchFlow) $(keywordclass.batchCmd)
keywords2.$(file.patterns.batch)=$(keywordclass.batchEnv)

#define the activation of the ProperCase function using batch.api.  0=no change, 1=Propercase functions and keywords
proper.case=0

# ---- Batch calltip and autocomplete Settings,
# ---- Caution: Whitespace allergic api property.

api.$(file.patterns.batch)=\
$(SciteDefaultHome)/languages/system/batch_win2003.api;$(SciteDefaultHome)/user/languages/system/batch_win2003.api;\
$(SciteDefaultHome)/languages/system/batch_nt.api;$(SciteDefaultHome)/user/languages/system/batch_nt.api

calltip.batch.word.characters=$(chars.alpha)$(chars.numeric)%
calltip.batch.ignorecase=1
calltip.batch.parameters.start= |
calltip.batch.parameters.separators= |
calltip.batch.end.definition=;
autocomplete.batch.ignorecase=1
autocomplete.batch.start.characters=$(chars.alpha)$(chars.numeric)%
word.characters.$(file.patterns.batch)=$(chars.alpha)$(chars.numeric)%

# ---- Batch default Styles
# Params /xyz
style.batch.0=$(colour.default)
# Comment (rem or ::)
style.batch.1=$(colour.comment.line)
# Keywords
style.batch.2=$(colour.extcmd),$(colour.background)
# Label (line beginning with ':')
style.batch.3=$(colour.signal),$(colour.accent.back),eolfilled
# Hide command character ('@')
style.batch.4=$(colour.signal),$(colour.accent.back),eolfilled
# External commands SCE_BAT_COMMAND
style.batch.5=$(colour.keyword6)
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=$(colour.identifier)
# Operator: * ? < > |
style.batch.7=$(colour.operator),$(colour.background)

comment.block.batch=::
comment.box.start.batch=:: *****************************************************
comment.box.middle.batch=:: **
comment.box.end.batch=:: *****************************************************
comment.stream.start.batch=::
comment.stream.end.batch=

# ... GNU make keywords https://www.gnu.org/software/make/manual/html_node/Quick-Reference.html
# ... Rule: @line start or prepended by whitespace and end before {\t\r\n ;}
keywordclass.make.directives= \
define endef undefine if ifdef ifndef ifeq ifneq else endif include override export unexport vpath .PHONY
# ... Rule: vars start with [  ({ ] 
keywordclass.make.variables= \
VPATH SHELL MAKESHELL MAKE MAKE_HOST MAKELEVEL MAKEFLAGS GNUMAKEFLAGS MAKECMDGOALS MAKEFILES MAKEFILE_LIST CURDIR SUFFIXES .LIBPATTERNS .VARIABLES OVERRIDES 
keywordclass.make.functions=\
subst patsubst findstring filter filter-out sort sort-list word words wordlist firstword lastword dir notdir suffixes basename \
addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if then and call eval file value
# ... Rule: extCmds have to be prepended by lineStart or [ &|-@\t\r\n \":, '({ ] and end before [\t\r\n ;]
keywordclass.make.extcmd=\
autoconf autoheader ar awk break case cc chmod curl cp cd gcc g++ cl cat copy date del diff do done echo elif esac exist \
exit exec export false find for in if fi lib link ln ls make mkdir nmake pwd not return rmdir sed sort sudo then true rm mv test touch print \
printf while xargs expand grep egrep printf php python sh sleep tar read unzip wget zip gpg

keywords.$(file.patterns.make)=$(keywordclass.make.directives) 
keywords2.$(file.patterns.make)=$(keywordclass.make.functions) $(keywordclass.make.variables)
keywords3.$(file.patterns.make)=$(keywordclass.make.extcmd)

# ---- Makefile styles

# Default
style.makefile.0=$(colour.default)
# Comment: #
style.makefile.1=$(colour.comment.line),$(font.comment.box)
# Pre-processor or other comment: !
style.makefile.2=$(colour.preproc)
# Identifier (User Variable Definition)
style.makefile.3=$(colour.identifier)
# Operator
style.makefile.4=$(colour.operator)
# Target
style.makefile.5=$(colour.userdefinedliterals),underlined
# User Variable
style.makefile.6=$(colour.keyword6)
# Automatic Variables, internal Variables
style.makefile.7=$(colour.extcmd),$(font.small) 
# Directive
style.makefile.8=$(colour.number)
# Error (unclosed String)
style.makefile.9=$(colour.error),eolfilled
# Flags
style.makefile.10=$(colour.preproc)
# External Commands
style.makefile.11=$(colour.extcmd),$(font.small)
# Strings
style.makefile.12=$(colour.string),$(colour.background)

# Matched Operators
style.makefile.34=$(colour.operator),notbold
style.makefile.35=$(colour.operator),notbold

comment.block.makefile=#~
preprocessor.symbol.$(file.patterns.make)=!
preprocessor.start.$(file.patterns.make)=IF IFDEF IFNDEF
preprocessor.middle.$(file.patterns.make)=ELSE ELSEIF ELSEIFDEF ELSEIFNDEF
preprocessor.end.$(file.patterns.make)=ENDIF

# ---- Error list styles

#style.errorlist.32=$(colour.foreground),$(font.small)
# Default
style.errorlist.0=$(colour.style.0),$(font.small)
# python Error
style.errorlist.1=fore:#FF0000
# gcc Error
style.errorlist.2=fore:#800080
# Microsoft Error
style.errorlist.3=fore:#808000
# command or return status
style.errorlist.4=fore:#0000FF
# Borland error and warning messages
style.errorlist.5=fore:#B06000
# perl error and warning messages
style.errorlist.6=fore:#FF0000
# .NET tracebacks
style.errorlist.7=fore:#FF0000
# Lua error and warning messages
style.errorlist.8=fore:#FF0000
# ctags
style.errorlist.9=fore:#FF00FF
# diff changed !
style.errorlist.10=fore:#007F00
# diff addition +
style.errorlist.11=fore:#00007F
# diff deletion -
style.errorlist.12=fore:#007F7F
# diff message ---
style.errorlist.13=fore:#7F0000
# PHP error
style.errorlist.14=fore:#AA0303
# Essential Lahey Fortran 90 error
style.errorlist.15=fore:#AA0303
# Intel Fortran Compiler error
style.errorlist.16=fore:#AA0303
# Intel Fortran Compiler v8.0 error/warning
style.errorlist.17=fore:#AA0303
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.errorlist.18=fore:#AA0303
# HTML Tidy
style.errorlist.19=fore:#AA0303
# Java runtime stack trace
style.errorlist.20=fore:#AA0303
# Ensures that spacing is not affected by line number styles
style.errorlist.33=$(font.small)

# ---- Difference styles
# http://www.markusbe.com/2009/12/how-to-read-a-patch-or-diff-and-understand-its-structure-to-apply-it-manually/

# Default
style.diff.32=$(colour.default)
style.diff.0=$(colour.default),$(font.small)
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=$(colour.comment.block)
# Command (diff ...)
style.diff.2=$(colour.signal)
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=$(colour.keyword2)
# Position setting (@@ ...)
style.diff.4=$(colour.signal)
# Line removal (-...)
style.diff.5=$(colour.keyword6),$(colour.accent.back),$(font.monospace)
# Line addition (+...)
style.diff.6=$(colour.keyword4),$(colour.accent.back),$(font.monospace)


# ---- Build Commands
	command.build.makefile=make
	command.build.*.mak=make

if PLAT_WIN
	command.go.$(file.patterns.batch)=cmd /c $(FileNameExt) $(1) $(2) $(3) $(4)
	command.name.0.*.bat;*.cmd=Execute Selection

	command.3.$(file.patterns.batch)=cmd /c $(CurrentSelection) /?

	command.name.1.*.mak=nmake
	command.1.*.mak=nmake -f $(FileNameExt)
