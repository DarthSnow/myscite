void assert (int expression);|assert|Evaluate assertion (macro)|(expression)|Expression to be evaluated. If this expression evaluates to 0, this causes an assertion failure that terminates the program.|macro|c90 c99 arm cpp98 cpp11|<cassert> (assert.h)|header|C Diagnostics Library
int isalnum ( int c );|isalnum|Check if character is alphanumeric (function)|(c)|Character to be checked, casted as an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int isalpha ( int c );|isalpha|Check if character is alphabetic (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int isblank ( int c );|isblank|Check if character is blank (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c99 cpp11|<cctype> (ctype.h)|header|Character handling functions
int iscntrl ( int c );|iscntrl|Check if character is a control character (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int isdigit ( int c );|isdigit|Check if character is decimal digit (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int isgraph ( int c );|isgraph|Check if character has graphical representation (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int islower ( int c );|islower|Check if character is lowercase letter (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int isprint ( int c );|isprint|Check if character is printable (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int ispunct ( int c );|ispunct|Check if character is a punctuation character (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int isspace ( int c );|isspace|Check if character is a white-space (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int isupper ( int c );|isupper|Check if character is uppercase letter (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int isxdigit ( int c );|isxdigit|Check if character is hexadecimal digit (function)|(c)|Character to be checked, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int tolower ( int c );|tolower|Convert uppercase letter to lowercase (function)|(c)|Character to be converted, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
int toupper ( int c );|toupper|Convert lowercase letter to uppercase (function)|(c)|Character to be converted, casted to an int, or EOF.|function|c90 c99 arm cpp98 cpp11|<cctype> (ctype.h)|header|Character handling functions
no-proto|errno|Last error number (macro)|()||macro|c90 c99 arm cpp98 cpp11|<cerrno> (errno.h)|header|C Errors
int feclearexcept (int excepts);|feclearexcept|Clear floating-point exceptions (function)|(excepts)|Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation:\n\t\n\t\n\tmacro value\n\t\n\tdescription\n\t\n\tFE_DIVBYZEROPole error: division by zero, or some other asymptotically infinite result (from finite arguments).\n\tFE_INEXACTInexact: the result is not exact.\n\tFE_INVALIDDomain error: At least one of the arguments is a value for which the function is not defined.\n\tFE_OVERFLOWOverflow range error: The result is too large in magnitude to be represented as a value of the return type.\n\tFE_UNDERFLOWUnderflow range error: The result is too small in magnitude to be represented as a value of the return type.\n\tFE_ALL_EXCEPTAll exceptions (selects all of the exceptions supported by the implementation).\n\tCertain library implementations may support additional floating-point exception values (with their corresponding macros also beginning with FE_).\n\t\n\t\n\tC99\n\t\n\t\n\tC++11\n\t\n\t\n\t\n\t\n\t\n\tLibraries may define in <fenv.h> only the macro values above they support (the others may not be defined).\n\t\n\t\n\tAt least all of the above macro values are defined in <cfenv> (even if not supported by the implementation).|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int fegetenv (fenv_t* envp);|fegetenv|Get floating-point environment (function)|(envp)|Pointer to a fenv_t object where the state of the floating-point environment is stored.|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int fegetexceptflag (fexcept_t* flagp, int excepts);|fegetexceptflag|Get floating-point exception flags (function)|(flagp)|Pointer to a fexcept_t object where the representation is stored.|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int fegetround (void);|fegetround|Get rounding direction mode (function)|()|void|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int feholdexcept (fenv_t* envp);|feholdexcept|Hold floating-point exceptions (function)|(envp)|Pointer to a fenv_t object where the state of the floating-point environment is stored.|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int feraiseexcept (int excepts);|feraiseexcept|Raise floating-point exception (function)|(excepts)|Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation:\n\t\n\t\n\tmacro value\n\t\n\tdescription\n\t\n\tFE_DIVBYZEROPole error: division by zero, or some other asymptotically infinite result (from finite arguments).\n\tFE_INEXACTInexact: the result is not exact.\n\tFE_INVALIDDomain error: At least one of the arguments is a value for which the function is not defined.\n\tFE_OVERFLOWOverflow range error: The result is too large in magnitude to be represented as a value of the return type.\n\tFE_UNDERFLOWUnderflow range error: The result is too small in magnitude to be represented as a value of the return type.\n\tFE_ALL_EXCEPTAll exceptions (selects all of the exceptions supported by the implementation).\n\tCertain library implementations may support additional floating-point exception values (with their corresponding macros also beginning with FE_).\n\t\n\t\n\tC99\n\t\n\t\n\tC++11\n\t\n\t\n\t\n\t\n\t\n\tLibraries may define in <fenv.h> only the macro values above they support (the others may not be defined).\n\t\n\t\n\tAt least all of the above macro values are defined in <cfenv> (even if not supported by the implementation).|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int fesetenv (const fenv_t* envp);|fesetenv|Set floating-point environment (function)|(envp)|Either a pointer to a fenv_t value (filled by a previous call to fegetenv or feholdexcept), or one of the floating-point environment macro values:\n\t\n\t\n\tvalue\n\t\n\tdescription\n\t\n\tFE_DFL_ENVDefault floating-point environment (the same as at program startup).\n\tCertain library implementations may support additional floating-point environment state values (with their corresponding macros also beginning with FE_).|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int fesetexceptflag (const fexcept_t* flagp, int excepts);|fesetexceptflag|Set floating-point exception flags (function)|(flagp)|Pointer to a fexcept_t object with a representation of floating-point exceptions.\n\t The value pointed by flagp shall have been previously set by a call to fegetexceptflag with at least the exceptions specified by excepts.|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int fesetround (int rdir);|fesetround|Set rounding direction mode (function)|(rdir)|One of the values defined as rounding direction mode:\n\t\n\t\n\tmacro value\n\t\n\tdescription\n\t\n\tFE_DOWNWARDRound downward.\n\tFE_TONEARESTRound to nearest.\n\tFE_TOWARDZERORound toward zero.\n\tFE_UPWARDRound upward.\n\tCertain library implementations may support additional floating-point rounding directions values (with their corresponding macros also beginning with FE_).\n\t\n\t\n\tC99\n\t\n\t\n\tC++11\n\t\n\t\n\t\n\t\n\t\n\tLibraries may define in <fenv.h> only the macro values above they support (the others may not be defined).\n\t\n\t\n\tAt least all of the above macro values are defined in <cfenv>.\n\t\n\tIf an int value other than those defined by these macros is passed, the function does not change the rounding direction mode and returns a non-zero value.|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int fetestexcept (int excepts);|fetestexcept|Test for floating-point exceptions (function)|(excepts)|Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation:\n\t\n\t\n\tmacro value\n\t\n\tdescription\n\t\n\tFE_DIVBYZEROPole error: division by zero, or some other asymptotically infinite result (from finite arguments).\n\tFE_INEXACTInexact: the result is not exact.\n\tFE_INVALIDDomain error: At least one of the arguments is a value for which the function is not defined.\n\tFE_OVERFLOWOverflow range error: The result is too large in magnitude to be represented as a value of the return type.\n\tFE_UNDERFLOWUnderflow range error: The result is too small in magnitude to be represented as a value of the return type.\n\tFE_ALL_EXCEPTAll exceptions (selects all of the exceptions supported by the implementation).\n\tCertain library implementations may support additional floating-point exception values (with their corresponding macros also beginning with FE_).\n\t\n\t\n\tC99\n\t\n\t\n\tC++11\n\t\n\t\n\t\n\t\n\t\n\tLibraries may define in <fenv.h> only the macro values above they support (the others may not be defined).\n\t\n\t\n\tAt least all of the above macro values are defined in <cfenv> (even if not supported by the implementation).|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
int feupdateenv (const fenv_t* envp);|feupdateenv|Update floating-point environment (function)|(envp)|Either a pointer to a fenv_t value (filled by a previous call to fegetenv or feholdexcept), or one of the floating-point environment macro values:\n\t\n\t\n\tvalue\n\t\n\tdescription\n\t\n\tFE_DFL_ENVDefault floating-point environment (the same as at program startup).\n\tCertain library implementations may support additional floating-point environment state values (with their corresponding macros also beginning with FE_).|function|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|fenv_t|Floating-point environment type (type)|()||type|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|fexcept_t|Floating-point exceptions type (type)|()||type|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
\n\ton (1)\n\t#pragma STDC FENV_ACCESS on\n\t\n\t\n\t\n\toff (2)\n\t#pragma STDC FENV_ACCESS off|FENV_ACCESS|Access to Floating-point environment (pragma)|()||pragma|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_ALL_EXCEPT|All exceptions (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
fenv_t*|FE_DFL_ENV|Default environment (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_DIVBYZERO|Pole error exception (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_DOWNWARD|Downward rounding direction mode (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_INEXACT|Inexact result exception (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_INVALID|Invalid argument exception (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_OVERFLOW|Overflow range error exception (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_TONEAREST|To-nearest rounding direction mode (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_TOWARDZERO|Toward-zero rounding direction mode (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_UNDERFLOW|Underflow range error exception (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
no-proto|FE_UPWARD|Upward rounding direction mode (macro)|()||macro|c99 cpp11|<cfenv> (fenv.h)|header|Floating-point environment
struct lconv* localeconv (void);|localeconv|Get locale formatting parameters for quantities (function)|()|void|function|c90 c99 arm cpp98 cpp11|<clocale> (locale.h)|header|C localization library
char* setlocale (int category, const char* locale);|setlocale|Set or retrieve locale (function)|(category)|Portion of the locale affected. It is one of the following constant values defined as macros in <clocale>:\n\t\n\t\n\tvalue\n\t\n\tPortion of the locale affected\n\t\n\tLC_ALLThe entire locale.\n\tLC_COLLATEAffects the behavior of strcoll and strxfrm.\n\tLC_CTYPEAffects character handling functions (all functions of <cctype>, except isdigit and isxdigit), and the multibyte and wide character functions.\n\tLC_MONETARYAffects monetary formatting information returned by localeconv.\n\tLC_NUMERICAffects the decimal-point character in formatted input/output operations and string formatting functions, as well as non-monetary information returned by localeconv.\n\tLC_TIMEAffects the behavior of strftime.|function|c90 c99 arm cpp98 cpp11|<clocale> (locale.h)|header|C localization library
no-proto|NULL|no-Description (other)|()||other|c90 c99 arm cpp98 cpp11|<clocale> (locale.h)|header|C localization library
struct lconv;|struct lconv|Formatting info for numeric values (type)|()||type|c90 c99 arm cpp98 cpp11|<clocale> (locale.h)|header|C localization library
double abs (double x);    float abs (float x);long double abs (long double x);|abs|Compute absolute value (function)|(x)|Value whose absolute value is returned.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double acos (double x);|acos|Compute arc cosine (function)|(x)|Value whose arc cosine is computed, in the interval [-1,+1].\n\t If the argument is out of this interval, a domain error occurs.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double acosh  (double x);    float acoshf (float x);long double acoshl (long double x);|acosh|Compute arc hyperbolic cosine (function)|(x)|Value whose arc hyperbolic cosine is computed.\n\t If the argument is less than 1, a domain error occurs.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double asin(double x);|asin|Compute arc sine (function)|(x)|Value whose arc sine is computed, in the interval [-1,+1].\n\t If the argument is out of this interval, a domain error occurs.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double asinh  (double x);    float asinhf (float x);long double asinhl (long double x);|asinh|Compute arc hyperbolic sine (function)|(x)|Value whose arc hyperbolic sine is computed.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double atan(double x);|atan|Compute arc tangent (function)|(x)|Value whose arc tangent is computed.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double atan2(double y, double x);|atan2|Compute arc tangent with two parameters (function)|(y)|Value representing the proportion of the y-coordinate.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double atanh  (double x);    float atanhf (float x);long double atanhl (long double x);|atanh|Compute arc hyperbolic tangent (function)|(x)|Value whose arc hyperbolic tangent is computed, in the interval [-1,+1].\n\t If the argument is out of this interval, a domain error occurs.\n\t For values of -1 and +1, a pole error may occur.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double cbrt  (double x);    float cbrtf (float x);long double cbrtl (long double x);|cbrt|Compute cubic root (function)|(x)|Value whose cubit root is computed.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double ceil (double x);|ceil|Round up value (function)|(x)|Value to round up.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double copysign  (double x   , double y);    float copysignf (float x    , float y);long double copysignl (long double x, long double y);|copysign|Copy sign (function)|(x)|Value with the magnitude of the resulting value.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double erf  (double x);    float erff (float x);long double erfl (long double x);|erf|Compute error function (function)|(x)|Parameter for the error function.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double erfc  (double x);    float erfcf (float x);long double erfcl (long double x);|erfc|Compute complementary error function (function)|(x)|Parameter for the complementary error function.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double exp (double x);|exp|Compute exponential function (function)|(x)|Value of the exponent.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double exp2  (double x);    float exp2f (float x);long double exp2l (long double x);|exp2|Compute binary exponential function (function)|(x)|Value of the exponent.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double expm1  (double x);    float expm1f (float x);long double expm1l (long double x);|expm1|Compute exponential minus one (function)|(x)|Value of the exponent.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double fabs (double x);|fabs|Compute absolute value (function)|(x)|Value whose absolute value is returned.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double fdim  (double x   , double y);    float fdimf (float x    , float y);long double fdiml (long double x, long double y);|fdim|Positive difference (function)|(x, y)|Values whose difference is calculated.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double floor (double x);|floor|Round down value (function)|(x)|Value to round down.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double fma  (double x   , double y   , double z);    float fmaf (float x    , float y    , float z);long double fmal (long double x, long double y, long double z);|fma|Multiply-add (function)|(x, y)|Values to be multiplied.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double fmax  (double x   , double y);    float fmaxf (float x    , float y);long double fmaxl (long double x, long double y);|fmax|Maximum value (function)|(x, y)|Values among which the function selects a maximum.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double fmin  (double x   , double y);    float fminf (float x    , float y);long double fminl (long double x, long double y);|fmin|Minimum value (function)|(x, y)|Values among which the function selects a minimum.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double fmod (double numer, double denom);|fmod|Compute remainder of division (function)|(numer)|Value of the quotient numerator.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
fpclassify(x)|fpclassify|Classify floating-point value (macro/function)|(x)||macro/function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double frexp (double x, int* exp);|frexp|Get significand and exponent (function)|(x)|Value to be decomposed.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double hypot  (double x   , double y);    float hypotf (float x    , float y);long double hypotl (long double x, long double y);|hypot|Compute hypotenuse (function)|(x, y)|Floating point values corresponding to the legs of a right-angled triangle for which the hypotenuse is computed.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
int ilogb  (double x);int ilogbf (float x);int ilogbl (long double x);|ilogb|Integer binary logarithm (function)|(x)|Value whose ilogb is returned.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
isfinite(x)|isfinite|Is finite value (macro)|(x)|A floating-point value.|macro|c99 cpp11|<cmath> (math.h)|header|C numerics library
isgreater(x,y)|isgreater|Is greater (macro)|(x, y)|Values to be compared.|macro|c99 cpp11|<cmath> (math.h)|header|C numerics library
isgreaterequal(x,y)|isgreaterequal|Is greater or equal (macro)|(x, y)|Values to be compared.|macro|c99 cpp11|<cmath> (math.h)|header|C numerics library
isinf(x)|isinf|Is infinity (macro/function)|(x)|A floating-point value.|macro/function|c99 cpp11|<cmath> (math.h)|header|C numerics library
isless(x,y)|isless|Is less (macro)|(x, y)|Values to be compared.|macro|c99 cpp11|<cmath> (math.h)|header|C numerics library
islessequal(x,y)|islessequal|Is less or equal (macro)|(x, y)|Values to be compared.|macro|c99 cpp11|<cmath> (math.h)|header|C numerics library
islessgreater(x,y)|islessgreater|Is less or greater (macro)|(x, y)|Values to be compared.|macro|c99 cpp11|<cmath> (math.h)|header|C numerics library
isnan(x)|isnan|Is Not-A-Number (macro/function)|(x)|A floating-point value.|macro/function|c99 cpp11|<cmath> (math.h)|header|C numerics library
isnormal(x)|isnormal|Is normal (macro/function)|(x)|A floating-point value.|macro/function|c99 cpp11|<cmath> (math.h)|header|C numerics library
isunordered(x,y)|isunordered|Is unordered (macro)|(x, y)|Values to check whether they are unordered.|macro|c99 cpp11|<cmath> (math.h)|header|C numerics library
double ldexp (double x, int exp);|ldexp|Generate value from significand and exponent (function)|(x)|Floating point value representing the significand.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double lgamma  (double x);    float lgammaf (float x);long double lgammal (long double x);|lgamma|Compute log-gamma function (function)|(x)|Parameter for the log-gamma function.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
long long int llrint  (double x);long long int llrintf (float x);long long int llrintl (long double x);|llrint|Round and cast to long long integer (function)|(x)|Value to round.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
long long int llround  (double x);long long int llroundf (float x);long long int llroundl (long double x);|llround|Round to nearest and cast to long long integer (function)|(x)|Value to round.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double log10 (double x);|log10|Compute common logarithm (function)|(x)|Value whose logarithm is calculated.\n\t If the argument is negative, a domain error occurs.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double log1p  (double x);    float log1pf (float x);long double log1pl (long double x);|log1p|Compute logarithm plus one (function)|(x)|Value whose logarithm is calculated.\n\t If the argument is less than -1, a domain error occurs.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double log2  (double x);    float log2f (float x);long double log2l (long double x);|log2|Compute binary logarithm (function)|(x)|Value whose logarithm is calculated.\n\t If the argument is negative, a domain error occurs.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double modf (double x, double* intpart);|modf|Break into fractional and integral parts (function)|(x)|Floating point value to break into parts.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
float nanf (const char* tagp);|nanf|no-Description (other)|(tagp)|An implementation-specific C-string.\n\t If this is an empty string (""), the function returns a generic NaN value (the same as returned by passing "NAN" to strtof).|other|c99 cpp11|<cmath> (math.h)|header|C numerics library
float nanl (const char* tagp);|nanl|no-Description (other)|(tagp)|An implementation-specific C-string.\n\t If this is an empty string (""), the function returns a generic NaN value (the same as returned by passing "NAN" to strtold).|other|c99 cpp11|<cmath> (math.h)|header|C numerics library
double nearbyint  (double x);    float nearbyintf (float x);long double nearbyintl (long double x);|nearbyint|Round to nearby integral value (function)|(x)|Value to round.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double nextafter  (double x   , double y);    float nextafterf (float x    , float y);long double nextafterl (long double x, long double y);|nextafter|Next representable value (function)|(x)|Base value.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double nexttoward  (double x   , long double y);    float nexttowardf (float x    , long double y);long double nexttowardl (long double x, long double y);|nexttoward|Next representable value toward precise value (function)|(x)|Base value.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double pow (double base, double exponent);|pow|Raise to power (function)|(base)|Base value.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double remainder  (double numer   , double denom);    float remainderf (float numer    , float denom);long double remainderl (long double numer, long double denom);|remainder|Compute remainder (IEC 60559) (function)|(numer)|Value of the quotient numerator.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double remquo  (double numer   , double denom   , int* quot);    float remquof (float numer    , float denom    , int* quot);long double remquol (long double numer, long double denom, int* quot);|remquo|Compute remainder and quotient (function)|(numer)|Floating point value with the quotient numerator.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double scalbln  (double x   , long int n);    float scalblnf (float x    , long int n);long double scalblnl (long double x, long int n);|scalbln|Scale significand using floating-point base exponent (long) (function)|(Value representing the significand.</dd>)|significand|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double scalbn  (double x   , int n);    float scalbnf (float x    , int n);long double scalbnl (long double x, int n);|scalbn|Scale significand using floating-point base exponent (function)|(x)|Value representing the significand.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
signbit(x)|signbit|Sign bit (macro/function)|(x)|A floating-point value.|macro/function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double sqrt (double x);|sqrt|Compute square root (function)|(x)|Value whose square root is computed.\n\t If the argument is negative, a domain error occurs.|function|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
double tgamma  (   double x);    float tgammaf (    float x);long double tgammal (long double x);|tgamma|Compute gamma function (function)|(x)|Parameter for the gamma function.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
double trunc  (   double x);    float truncf (    float x);long double truncl (long double x);|trunc|Truncate value (function)|(x)|Value to truncate.|function|c99 cpp11|<cmath> (math.h)|header|C numerics library
no-proto|HUGE_VAL|Huge value (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cmath> (math.h)|header|C numerics library
no-proto|HUGE_VALF|Huge float value|()||custom|c99 cpp11|<cmath> (math.h)|header|C numerics library
no-proto|HUGE_VALL|Huge long double value (constant)|()||constant|c99 cpp11|<cmath> (math.h)|header|C numerics library
no-proto|INFINITY|Infinity (constant)|()||constant|c99 cpp11|<cmath> (math.h)|header|C numerics library
no-proto|math_errhandling|Error handling (macro)|()||macro|c99 cpp11|<cmath> (math.h)|header|C numerics library
float|NAN|Not-A-Number (constant)|()||constant|cpp99 cpp11|<cmath> (math.h)|header|C numerics library
no-proto|double_t|Floating-point type (type)|()||type|c99 cpp11|<cmath> (math.h)|header|C numerics library
no-proto|float_t|Floating-point type (type)|()||type|cpp99 cpp11|<cmath> (math.h)|header|C numerics library
no-proto|jmp_buf|Type to hold information to restore calling environment (type)|()||type|c90 c99 arm cpp98 cpp11|<csetjmp> (setjmp.h)|header|Non local jumps
void longjmp (jmp_buf env, int val);|longjmp|Long jump (function)|(env)|Object of type jmp_buf filled by a previous call to setjmp that contains information to restore the environment to that point.|function|c90 c99 arm cpp98 cpp11|<csetjmp> (setjmp.h)|header|Non local jumps
int setjmp (jmp_buf env);|setjmp|Save calling environment for long jump (macro)|(env)|Object of type jmp_buf where the environment information is stored.|macro|c90 c99 arm cpp98 cpp11|<csetjmp> (setjmp.h)|header|Non local jumps
void (*signal(int sig, void (*func)(int)))(int);|signal|Set function to handle signal (function)|(sig)|The signal value to which a handling function is set. The following macro constant expressions identify standard signal values:\n\t\n\t\n\t\n\tmacro\n\t\n\tsignal\n\t\n\tSIGABRT(Signal Abort) Abnormal termination, such as is initiated by the abort function.\n\tSIGFPE(Signal Floating-Point Exception) Erroneous arithmetic operation, such as zero divide or an operation resulting in overflow (not necessarily with a floating-point operation).\n\tSIGILL(Signal Illegal Instruction) Invalid function image, such as an illegal instruction. This is generally due to a corruption in the code or to an attempt to execute data.\n\tSIGINT(Signal Interrupt) Interactive attention signal. Generally generated by the application user.\n\tSIGSEGV(Signal Segmentation Violation) Invalid access to storage: When a program tries to read or write outside the memory it has allocated.\n\tSIGTERM(Signal Terminate) Termination request sent to program.\n\t\n\t Each library implementation may provide additional signal value macro constants that can be used with this function.\n\t\n\t Notice that not all running environments are required to generate automatic signals, not even in the specific cases described above, although all running environments must deliver signals generated by a explicit call to the raise function.|function|c90 c99 arm cpp98 cpp11|<csignal> (signal.h)|header|C library to handle signals
no-proto|sig_atomic_t|Integral type (type)|()||type|c90 c99 arm cpp98 cpp11|<csignal> (signal.h)|header|C library to handle signals
type va_arg (va_list ap, type)|va_arg|Retrieve next argument (macro)|(ap)|Object of type va_list carrying information about the current retrieval state of a variable argument list. This object shall have been initialized by an initial call to va_start or va_copy and not have been released with va_end.|macro|c90 c99 arm cpp98 cpp11|<cstdarg> (stdarg.h)|header|Variable arguments handling
void va_copy (va_list dest, va_list src);|va_copy|Copy variable argument list (macro)|(dest)|Uninitialized object of type va_list.\n\t After the call, it carries the information needed to retrieve the same additional arguments as src.\n\t If dest has already been passed as first argument to a previous call to va_start or va_copy, it shall be passed to va_end before calling this function.|macro|c99 cpp11|<cstdarg> (stdarg.h)|header|Variable arguments handling
void va_end (va_list ap);|va_end|End using variable argument list (macro)|(ap)|va_list object previously initialized by va_start or va_copy.|macro|c90 c99 arm cpp98 cpp11|<cstdarg> (stdarg.h)|header|Variable arguments handling
void va_start (va_list ap, paramN);|va_start|Initialize a variable argument list (macro)|(ap)|Uninitialized object of type va_list.\n\t After the call, it carries the information needed to retrieve the additional arguments using va_arg.\n\t If ap has already been passed as first argument to a previous call to va_start or va_copy, it shall be passed to va_end before calling this function.|macro|c90 c99 arm cpp98 cpp11|<cstdarg> (stdarg.h)|header|Variable arguments handling
no-proto|va_list|Type to hold information about variable arguments (type)|()||type|c90 c99 arm cpp98 cpp11|<cstdarg> (stdarg.h)|header|Variable arguments handling
offsetof (type,member)|offsetof|Return member offset (macro)|(type)|A type in which member is a valid member designator.\n\t\n\t\n\tC\n\t\n\t\n\tC++98\n\t\n\t\n\tC++11\n\t\n\t\n\t\n\t\n\t\n\ttype shall be a structure or union type.\n\t\n\t\n\ttype shall be a POD class (including unions).\n\t\n\t\n\ttype shall be a standard-layout class (including unions).|macro|c90 c99 arm cpp98 cpp11|<cstddef> (stddef.h)|header|C Standard definitions
no-proto|max_align_t|Type with widest scalar alignment (type)|()||type|cpp11|<cstddef> (stddef.h)|header|C Standard definitions
typedef decltype(nullptr) nullptr_t;|nullptr_t|Null pointer type (C++) (type)|()||type|cpp11|<cstddef> (stddef.h)|header|C Standard definitions
no-proto|ptrdiff_t|Result of pointer subtraction (type)|()||type|c90 c99 arm cpp98 cpp11|<cstddef> (stddef.h)|header|C Standard definitions
no-proto|size_t|Unsigned integral type (type)|()||type|c90 c99 arm cpp98 cpp11|<cstddef> (stddef.h)|header|C Standard definitions
void clearerr ( FILE * stream );|clearerr|Clear error indicators (function)|(stream)|Pointer to a FILE object that identifies the stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fclose ( FILE * stream );|fclose|Close file (function)|(stream)|Pointer to a FILE object that specifies the stream to be closed. |function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int feof ( FILE * stream );|feof|Check end-of-file indicator (function)|(stream)|Pointer to a FILE object that identifies the stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int ferror ( FILE * stream );|ferror|Check error indicator (function)|(stream)|Pointer to a FILE object that identifies the stream. |function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fflush ( FILE * stream );|fflush|Flush stream (function)|(stream)|Pointer to a FILE object that specifies a buffered stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fgetc ( FILE * stream );|fgetc|Get character from stream (function)|(stream)|Pointer to a FILE object that identifies an input stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fgetpos ( FILE * stream, fpos_t * pos );|fgetpos|Get current position in stream (function)|(stream)|Pointer to a FILE object that identifies the stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
char * fgets ( char * str, int num, FILE * stream );|fgets|Get string from stream (function)|(str)|Pointer to an array of chars where the string read is copied.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
FILE * fopen ( const char * filename, const char * mode );|fopen|Open file (function)|(filename)|C string containing the name of the file to be opened.\n\t Its value shall follow the file name specifications of the running environment and can include a path (if supported by the system).|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fprintf ( FILE * stream, const char * format, ... );|fprintf|Write formatted data to stream (function)|(stream)|Pointer to a FILE object that identifies an output stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fputc ( int character, FILE * stream );|fputc|Write character to stream (function)|(character)|The int promotion of the character to be written.\n\t The value is internally converted to an unsigned char when written.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fputs ( const char * str, FILE * stream );|fputs|Write string to stream (function)|(str)|C string with the content to be written to stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );|fread|Read block of data from stream (function)|(ptr)|Pointer to a block of memory with a size of at least (size*count) bytes, converted to a void*.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
FILE * freopen ( const char * filename, const char * mode, FILE * stream );|freopen|Reopen stream with different file or mode (function)|(filename)|C string containing the name of the file to be opened.\n\t Its value shall follow the file name specifications of the running environment and can include a path (if supported by the system).\n\t If this parameter is a null pointer, the function attempts to change the mode of the stream, as if the file name currently associated with that stream had been used.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fscanf ( FILE * stream, const char * format, ... );|fscanf|Read formatted data from stream (function)|(stream)|Pointer to a FILE object that identifies the input stream to read data from.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fseek ( FILE * stream, long int offset, int origin );|fseek|Reposition stream position indicator (function)|(stream)|Pointer to a FILE object that identifies the stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int fsetpos ( FILE * stream, const fpos_t * pos );|fsetpos|Set position indicator of stream (function)|(stream)|Pointer to a FILE object that identifies the stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
long int ftell ( FILE * stream );|ftell|Get current position in stream (function)|(stream)|Pointer to a FILE object that identifies the stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );|fwrite|Write block of data to stream (function)|(ptr)|Pointer to the array of elements to be written, converted to a const void*.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int getchar ( void );|getchar|Get character from stdin (function)|()|void|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
void perror ( const char * str );|perror|Print error message (function)|(str)|C string containing a custom message to be printed before the error message itself.\n\t If it is a null pointer, no preceding custom message is printed, but the error message is still printed.\n\t By convention, the name of the application itself is generally used as parameter.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int putchar ( int character );|putchar|Write character to stdout (function)|(character)|The int promotion of the character to be written.\n\t The value is internally converted to an unsigned char when written.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int remove ( const char * filename );|remove|Remove file (function)|(filename)|C string containing the name of the file to be deleted.\n\t Its value shall follow the file name specifications of the running environment and can include a path (if supported by the system).|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int rename ( const char * oldname, const char * newname );|rename|Rename file (function)|(oldname)|C string containing the name of an existing file to be renamed and/or moved.\n\t Its value shall follow the file name specifications of the running environment and can include a path (if supported by the system).|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
void rewind ( FILE * stream );|rewind|Set position of stream to the beginning (function)|(stream)|Pointer to a FILE object that identifies the stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
void setbuf ( FILE * stream, char * buffer );|setbuf|Set stream buffer (function)|(stream)|Pointer to a FILE object that identifies an open stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int setvbuf ( FILE * stream, char * buffer, int mode, size_t size );|setvbuf|Change stream buffering (function)|(stream)|Pointer to a FILE object that identifies an open stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int snprintf ( char * s, size_t n, const char * format, ... );|snprintf|Write formatted output to sized buffer (function)|(s)|Pointer to a buffer where the resulting C-string is stored.\n\t The buffer should have a size of at least n characters.|function|c99 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int sprintf ( char * str, const char * format, ... );|sprintf|Write formatted data to string (function)|(str)|Pointer to a buffer where the resulting C-string is stored.\n\t The buffer should be large enough to contain the resulting string.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int sscanf ( const char * s, const char * format, ...);|sscanf|Read formatted data from string (function)|(s)|C string that the function processes as its source to retrieve the data.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
FILE * tmpfile ( void );|tmpfile|Open a temporary file (function)|()|void|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
char * tmpnam ( char * str );|tmpnam|Generate temporary filename (function)|(str)|Pointer to an array of characters where the proposed temporary name will be stored as a C string. The suggested size of this array is at least L_tmpnam characters.\n\t Alternativelly, a null pointer can be specified to use an internal static array to store the proposed temporary name, whose pointer is returned by the function.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int ungetc ( int character, FILE * stream );|ungetc|Unget character from stream (function)|(character)|The int promotion of the character to be put back.\n\t The value is internally converted to an unsigned char when put back.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int vfprintf ( FILE * stream, const char * format, va_list arg );|vfprintf|Write formatted data from variable argument list to stream (function)|(stream)|Pointer to a FILE object that identifies an output stream.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int vfscanf ( FILE * stream, const char * format, va_list arg );|vfscanf|Read formatted data from stream into variable argument list (function)|(stream)|Pointer to a FILE object that identifies an input stream.|function|c99 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int vprintf ( const char * format, va_list arg );|vprintf|Print formatted data from variable argument list to stdout (function)|(format)|C string that contains a format string that follows the same specifications as format in printf (see printf for details).|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int vscanf ( const char * format, va_list arg );|vscanf|Read formatted data into variable argument list (function)|(format)|C string that contains a format string that follows the same specifications as format in scanf (see scanf for details).|function|c99 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int vsnprintf (char * s, size_t n, const char * format, va_list arg );|vsnprintf|Write formatted data from variable argument list to sized buffer (function)|(s)|Pointer to a buffer where the resulting C-string is stored.\n\t The buffer should have a size of at least n characters.|function|c99 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int vsprintf (char * s, const char * format, va_list arg );|vsprintf|Write formatted data from variable argument list to string (function)|(s)|Pointer to a buffer where the resulting C-string is stored.\n\t The buffer should be large enough to contain the resulting string.|function|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
int vsscanf ( const char * s, const char * format, va_list arg );|vsscanf|Read formatted data from string into variable argument list (function)|(s)|C string that the function processes as its source to retrieve the data.|function|c99 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
FILE * stderr;|stderr|no-Description (other)|()||other|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
FILE * stdin;|stdin|no-Description (other)|()||other|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
FILE * stdout;|stdout|no-Description (other)|()||other|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
no-proto|FILE|Object containing information to control a stream (type)|()||type|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
no-proto|fpos_t|Object containing information to specify a position within a file (type)|()||type|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
no-proto|BUFSIZ|Buffer size (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
no-proto|EOF|End-of-File (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
no-proto|FILENAME_MAX|Maximum length of file names (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
no-proto|FOPEN_MAX|Potential limit of simultaneous open streams (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
no-proto|L_tmpnam|Minimum length for temporary file name (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
no-proto|TMP_MAX|Number of temporary files (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cstdio> (stdio.h)|header|C library to perform Input/Output operations
void abort (void);|abort|Abort current process (function)|()|void|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
int atexit (void (*func)(void));|atexit|Set function to be executed on exit (function)|(function)|Function to be called. The function shall return no value and take no arguments.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
double atof (const char* str);|atof|Convert string to double (function)|(str)|C-string beginning with the representation of a floating-point number.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
int atoi (const char * str);|atoi|Convert string to integer (function)|(str)|C-string beginning with the representation of an integral number.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
long int atol ( const char * str );|atol|Convert string to long integer (function)|(str)|C-string containing the representation of an integral number.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
long long int atoll ( const char * str );|atoll|Convert string to long long integer (function)|(str)|C-string containing the representation of an integral number.|function|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
int at_quick_exit (void (*func)(void));|at_quick_exit|Set function to be executed on quick exit (function)|(function)|Function to be called. The function shall return no value and take no arguments.|function|c11 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
void* bsearch (const void* key, const void* base,\n\t    size_t num, size_t size,\n\t    int (*compar)(const void*,const void*));|bsearch|Binary search in array (function)|(key)|Pointer to the object that serves as key for the search, type-casted to a void*.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
void* calloc (size_t num, size_t size);|calloc|Allocate and zero-initialize array (function)|(num)|Number of elements to allocate.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
div_t div (int numer, int denom);|div|Integral division (function)|(numer)|Numerator.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
void free (void* ptr);|free|Deallocate memory block (function)|(ptr)|Pointer to a memory block previously allocated with malloc, calloc or realloc.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
long int labs (long int n);|labs|Absolute value (function)|(n)|Integral value.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
ldiv_t ldiv (long int numer, long int denom);|ldiv|Integral division (function)|(numer)|Numerator.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
long long int llabs (long long int n);|llabs|Absolute value (function)|(n)|Integral value.|function|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
lldiv_t lldiv (long long int numer, long long int denom);|lldiv|Integral division (function)|(numer)|Numerator.|function|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
void* malloc (size_t size);|malloc|Allocate memory block (function)|(size)|Size of the memory block, in bytes.\n\tsize_t is an unsigned integral type.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
int mblen (const char* pmb, size_t max);|mblen|Get length of multibyte character (function)|(pmb)|Pointer to the first byte of a multibyte character.\n\t Alternativelly, the function may be called with a null pointer, in which case the function resets its internal shift state to the initial value and returns whether multibyte characters use a state-dependent encoding.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
size_t mbstowcs (wchar_t* dest, const char* src, size_t max);|mbstowcs|Convert multibyte string to wide-character string (function)|(dest)|Pointer to an array of wchar_t elements long enough to contain the resulting sequence (at most, max wide characters).|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
int mbtowc (wchar_t* pwc, const char* pmb, size_t max);|mbtowc|Convert multibyte sequence to wide character (function)|(pwc)|Pointer to an object of type wchar_t.\n\t Alternativelly, this argument can be a null pointer, in which case the function does not store the wchar_t translation, but still returns the length in bytes of the multibyte character.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
void qsort (void* base, size_t num, size_t size,\n\t int (*compar)(const void*,const void*));|qsort|Sort elements of array (function)|(base)|Pointer to the first object of the array to be sorted, converted to a void*.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
int rand (void);|rand|Generate random number (function)|()|void|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
void* realloc (void* ptr, size_t size);|realloc|Reallocate memory block (function)|(ptr)|Pointer to a memory block previously allocated with malloc, calloc or realloc.\n\t Alternatively, this can be a null pointer, in which case a new block is allocated (as if malloc was called).|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
void srand (unsigned int seed);|srand|Initialize random number generator (function)|(seed)|An integer value to be used as seed by the pseudo-random number generator algorithm.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
double strtod (const char* str, char** endptr);|strtod|Convert string to double (function)|(str)|C-string beginning with the representation of a floating-point number.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
float strtof (const char* str, char** endptr);|strtof|Convert string to float (function)|(str)|C-string beginning with the representation of a floating-point number.|function|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
long int strtol (const char* str, char** endptr, int base);|strtol|Convert string to long integer (function)|(str)|C-string beginning with the representation of an integral number.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
long double strtold (const char* str, char** endptr);|strtold|Convert string to long double (function)|(str)|C string beginning with the representation of a floating-point number.|function|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
long long int strtoll (const char* str, char** endptr, int base);|strtoll|Convert string to long long integer (function)|(str)|C-string beginning with the representation of an integral number.|function|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
unsigned long int strtoul (const char* str, char** endptr, int base);|strtoul|Convert string to unsigned long integer (function)|(str)|C-string containing the representation of an integral number.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
unsigned long long int strtoull (const char* str, char** endptr, int base);|strtoull|Convert string to unsigned long long integer (function)|(str)|C-string beginning with the representation of an integral number.|function|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
int system (const char* command);|system|Execute system command (function)|(command)|C-string containing the system command to be executed.\n\t Or, alternatively, a null pointer, to check for a command processor.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
size_t wcstombs (char* dest, const wchar_t* src, size_t max);|wcstombs|Convert wide-character string to multibyte string (function)|(dest)|Pointer to an array of char elements long enough to contain the resulting sequence (at most, max bytes).|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
int wctomb (char* pmb, wchar_t wc);|wctomb|Convert wide character to multibyte sequence (function)|(pmb)|Pointer to an array large enough to hold a multibyte sequence.\n\t The maximum length of a multibyte sequence for a character in the current locale is MB_CUR_MAX bytes.\n\t Alternativelly, the function may be called with a null pointer, in which case the function resets its internal shift state to the initial value and returns whether multibyte sequences use a state-dependent encoding.|function|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
void _Exit (int status);|_Exit|Terminate calling process (function)|(status)|Status code.\n\t If this is 0 or EXIT_SUCCESS, it indicates success.\n\t If it is EXIT_FAILURE, it indicates failure.|function|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
char *  itoa ( int value, char * str, int base );|itoa|no-Description (other)|(value)|Value to be converted to a string.|other|arm|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
no-proto|div_t|Structure returned by div (type)|(quot)|Represents the quotient of the integral division operation performed by div, which is the integer of lesser magnitude that is nearest to the algebraic quotient.|type|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
no-proto|ldiv_t|Structure returned by ldiv (type)|(quot)|Represents the quotient of the integral division operation performed by ldiv, which is the integer of lesser magnitude that is nearest to the algebraic quotient.|type|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
no-proto|lldiv_t|Structure returned by lldiv (type)|(quot)|Represents the quotient of the integral division operation performed by lldiv, which is the integer of lesser magnitude that is nearest to the algebraic quotient.|type|c99 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
no-proto|EXIT_FAILURE|Failure termination code (macro)|()||macro|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
no-proto|EXIT_SUCCESS|Success termination code (macro)|()||macro|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
no-proto|MB_CUR_MAX|Maximum size of multibyte characters (macro)|()||macro|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
no-proto|RAND_MAX|Maximum value returned by rand (macro)|()||macro|c90 c99 arm cpp98 cpp11|<cstdlib> (stdlib.h)|header|C Standard General Utilities Library
const void * memchr ( const void * ptr, int value, size_t num );\n\t      void * memchr (       void * ptr, int value, size_t num );|memchr|Locate character in block of memory (function)|(ptr)|Pointer to the block of memory where the search is performed.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
int memcmp ( const void * ptr1, const void * ptr2, size_t num );|memcmp|Compare two blocks of memory (function)|(ptr1)|Pointer to block of memory.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
void * memcpy ( void * destination, const void * source, size_t num );|memcpy|Copy block of memory (function)|(destination)|Pointer to the destination array where the content is to be copied, type-casted to a pointer of type void*.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
void * memmove ( void * destination, const void * source, size_t num );|memmove|Move block of memory (function)|(destination)|Pointer to the destination array where the content is to be copied, type-casted to a pointer of type void*.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
void * memset ( void * ptr, int value, size_t num );|memset|Fill block of memory (function)|(ptr)|Pointer to the block of memory to fill.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
char * strcat ( char * destination, const char * source );|strcat|Concatenate strings (function)|(destination)|Pointer to the destination array, which should contain a C string, and be large enough to contain the concatenated resulting string.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
const char * strchr ( const char * str, int character );\n\t      char * strchr (       char * str, int character );|strchr|Locate first occurrence of character in string (function)|(str)|C string.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
int strcmp ( const char * str1, const char * str2 );|strcmp|Compare two strings (function)|(str1)|C string to be compared.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
int strcoll ( const char * str1, const char * str2 );|strcoll|Compare two strings using locale (function)|(str1)|C string to be compared.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
char * strcpy ( char * destination, const char * source );|strcpy|Copy string (function)|(destination)|Pointer to the destination array where the content is to be copied.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
size_t strcspn ( const char * str1, const char * str2 );|strcspn|Get span until character in string (function)|(str1)|C string to be scanned.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
char * strerror ( int errnum );|strerror|Get pointer to error message string (function)|(errnum)|Error number.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
size_t strlen ( const char * str );|strlen|Get string length (function)|(str)|C string.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
char * strncat ( char * destination, const char * source, size_t num );|strncat|Append characters from string (function)|(destination)|Pointer to the destination array, which should contain a C string, and be large enough to contain the concatenated resulting string, including the additional null-character.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
int strncmp ( const char * str1, const char * str2, size_t num );|strncmp|Compare characters of two strings (function)|(str1)|C string to be compared.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
char * strncpy ( char * destination, const char * source, size_t num );|strncpy|Copy characters from string (function)|(destination)|Pointer to the destination array where the content is to be copied.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
const char * strpbrk ( const char * str1, const char * str2 );\n\t      char * strpbrk (       char * str1, const char * str2 );|strpbrk|Locate characters in string (function)|(str1)|C string to be scanned.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
const char * strrchr ( const char * str, int character );\n\t      char * strrchr (       char * str, int character );|strrchr|Locate last occurrence of character in string (function)|(str)|C string.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
size_t strspn ( const char * str1, const char * str2 );|strspn|Get span of character set in string (function)|(str1)|C string to be scanned.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
const char * strstr ( const char * str1, const char * str2 );\n\t      char * strstr (       char * str1, const char * str2 );|strstr|Locate substring (function)|(str1)|C string to be scanned.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
char * strtok ( char * str, const char * delimiters );|strtok|Split string into tokens (function)|(str)|C string to truncate.\n\t Notice that this string is modified by being broken into smaller strings (tokens).\n\t Alternativelly, a null pointer may be specified, in which case the function continues scanning where a previous successful call to the function ended.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
size_t strxfrm ( char * destination, const char * source, size_t num );|strxfrm|Transform string using locale (function)|(destination)|Pointer to the destination array where the content is to be copied.\n\t It can be a null pointer if the argument for num is zero.|function|c90 c99 arm cpp98 cpp11|<cstring> (string.h)|header|C Strings
char* asctime (const struct tm * timeptr);|asctime|Convert tm structure to string (function)|(timeptr)|Pointer to a tm structure that contains a calendar time broken down into its components (see struct tm).|function|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
clock_t clock (void);|clock|Clock program (function)|()|void|function|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
double difftime (time_t end, time_t beginning);|difftime|Return difference between two times (function)|(end)|Higher bound of the time interval whose length is calculated.|function|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
struct tm * gmtime (const time_t * timer);|gmtime|Convert time_t to tm as UTC time (function)|(timer)|Pointer to an object of type time_t that contains a time value.\n\ttime_t is an alias of a fundamental arithmetic type capable of representing times as returned by function time.|function|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
struct tm * localtime (const time_t * timer);|localtime|Convert time_t to tm as local time (function)|(timer)|Pointer to an object of type time_t that contains a time value.\n\ttime_t is an alias of a fundamental arithmetic type capable of representing times as returned by function time.|function|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
time_t mktime (struct tm * timeptr);|mktime|Convert tm structure to time_t (function)|(timeptr)|Pointer to a tm structure that contains a calendar time broken down into its components (see struct tm).|function|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
size_t strftime (char* ptr, size_t maxsize, const char* format,\n\t      const struct tm* timeptr );|strftime|Format time as string (function)|(ptr)|Pointer to the destination array where the resulting C string is copied.|function|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
no-proto|CLOCKS_PER_SEC|Clock ticks per second (macro)|()||macro|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
no-proto|clock_t|Clock type (type)|()||type|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
no-proto|time_t|Time type (type)|()||type|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
no-proto|struct tm|Time structure (type)|()||type|c90 c99 arm cpp98 cpp11|<ctime> (time.h)|header|C Time Library
size_t c16rtomb ( char * pmb, char16_t c16, mbstate_t * ps );|c16rtomb|Convert 16-bit character to multibyte sequence (function)|(pmb)|Pointer to an array large enough to hold a multibyte sequence.\n\t The maximum length of a multibyte sequence for a character in the current locale is MB_CUR_MAX bytes.\n\t\n\t Alternativelly, the function may be called with a null pointer, in which case the function resets the shift state (either ps or its own internal state) to the initial state and returns zero.|function|c11 cpp11|<cuchar> (uchar.h)|header|Unicode characters
size_t c32rtomb ( char * pmb, char32_t c32, mbstate_t * ps );|c32rtomb|Convert 32-bit character to multibyte sequence (function)|(pmb)|Pointer to an array large enough to hold a multibyte sequence.\n\t The maximum length of a multibyte sequence for a character in the current locale is MB_CUR_MAX bytes.\n\t\n\t Alternativelly, the function may be called with a null pointer, in which case the function resets the shift state (either ps or its own internal state) to the initial state and returns zero.|function|c11 cpp11|<cuchar> (uchar.h)|header|Unicode characters
size_t mbrtoc16 ( char16_t * pc16, const char * pmb, size_t max, mbstate_t * ps);|mbrtoc16|Convert multibyte sequence to 16-bit character (function)|(pc16)|Pointer to an object of type char16_t.\n\t Alternativelly, this argument can be a null pointer, in which case the function does not store the char16_t translation, but still returns the length in bytes of the character.|function|c11 cpp11|<cuchar> (uchar.h)|header|Unicode characters
size_t mbrtoc32 ( char32_t * pc32, const char * pmb, size_t max, mbstate_t * ps);|mbrtoc32|Convert multibyte sequence to 32-bit character (function)|(pc32)|Pointer to an object of type char32_t.\n\t Alternativelly, this argument can be a null pointer, in which case the function does not store the char32_t translation, but still returns the length in bytes of the character.|function|c11 cpp11|<cuchar> (uchar.h)|header|Unicode characters
wint_t fgetwc (FILE * stream);|fgetwc|Get wide character from stream (function)|(stream)|Pointer to a FILE object that identifies an input stream.\n\t The stream shall not have an orientation yet, or be wide-oriented (the first i/o operation on a stream determines whether it is byte- or wide- oriented, see fwide).|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* fgetws (wchar_t* ws, int num, FILE* stream);|fgetws|Get wide string from stream (function)|(ws)|Pointer to an array of wchar_t where the wide string read is copied.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wint_t fputwc (wchar_t wc, FILE * stream);|fputwc|Write wide character to stream (function)|(wc)|The wide character to write.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int fputws (const wchar_t* ws, FILE* stream);|fputws|Write wide string to stream (function)|(ws)|C wide string with the content to write to the stream.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int fwide (FILE* stream, int mode);|fwide|Stream orientation (function)|(stream)|Pointer to a FILE object that identifies a stream.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int fwprintf (FILE* stream, const wchar_t* format, ...);|fwprintf|Write formatted data to stream (function)|(stream)|Pointer to a FILE object that identifies an output stream.\n\t The stream shall not have an orientation yet, or be wide-oriented (the first i/o operation on a stream determines whether it is byte- or wide- oriented, see fwide).|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int fwscanf (FILE* stream, const wchar_t* format, ...);|fwscanf|Read formatted data from stream (function)|(stream)|Pointer to a FILE object that identifies the input stream to read data from.\n\t The stream shall not have an orientation yet, or be wide-oriented (the first i/o operation on a stream determines whether it is byte- or wide- oriented, see fwide).|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wint_t getwchar (void);|getwchar|Get wide character from stdin (function)|()|void|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t mbrlen (const char* pmb, size_t max, mbstate_t* ps);|mbrlen|Get length of multibyte character (function)|(pmb)|Pointer to the first byte of a multibyte character.\n\t Alternativelly, the function may be called with a null pointer, in which case the function resets the shift state (either ps or its own internal state) to the initial state and returns zero.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t mbrtowc (wchar_t* pwc, const char* pmb, size_t max, mbstate_t* ps);|mbrtowc|Convert multibyte sequence to wide character (function)|(pwc)|Pointer to an object of type wchar_t.\n\t Alternativelly, this argument can be a null pointer, in which case the function does not store the wchar_t translation, but still returns the length in bytes of the multibyte character.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int mbsinit (const mbstate_t* ps);|mbsinit|Check if initial conversion state (function)|(ps)|Pointer to an mbstate_t object.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t mbsrtowcs (wchar_t* dest, const char** src, size_t max, mbstate_t* ps);|mbsrtowcs|Convert multibyte string to wide-character string (function)|(dest)|Pointer to an array of wchar_t elements long enough to store a string of max wide characters.\n\t If this is a null pointer, the function does not store the resulting string, but still counts how many bytes from src form a valid string (parameter max is ignored in this case).|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wint_t putwchar (wchar_t wc);|putwchar|Write wide character to stdout (function)|(wc)|The wide character to be written.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int swprintf (wchar_t* ws, size_t len, const wchar_t* format, ...);|swprintf|Write formatted data to wide string (function)|(ws)|Pointer to a buffer where the resulting C wide string is stored.\n\t The buffer should have a size of at least n wide characters.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int swscanf (const wchar_t* ws, const wchar_t* format, ...);|swscanf|Read formatted data from string (function)|(ws)|C wide string that the function processes as its source to retrieve the data.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wint_t ungetwc (wint_t wc, FILE* stream);|ungetwc|Unget wide character from stream (function)|(wc)|The wint_t promotion of the wide character to be put back.\n\t The value is internally converted to a wchar_t when put back.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int vfwprintf (FILE* stream, const wchar_t* format, va_list arg);|vfwprintf|Write formatted data from variable argument list to stream (function)|(stream)|Pointer to a FILE object that identifies an output stream.\n\t The stream shall not have an orientation yet, or be wide-oriented (the first i/o operation on a stream determines whether it is byte- or wide- oriented, see fwide).|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int vfwscanf (FILE* stream, const wchar_t* format, va_list arg);|vfwscanf|Read formatted data from stream into variable argument list (function)|(stream)|Pointer to a FILE object that identifies an input stream.\n\t The stream shall not have an orientation yet, or be wide-oriented (the first i/o operation on a stream determines whether it is byte- or wide- oriented, see fwide).|function|c99 cpp11|<cwchar> (wchar.h)|header|Wide characters
int vswprintf (wchar_t * ws, size_t len, const wchar_t * format, va_list arg );|vswprintf|Write formatted data from variable argument list to sized buffer (function)|(ws)|Pointer to a buffer where the resulting C wide string is stored.\n\t The buffer should have a size of at least len wide characters.|function|c99 cpp11|<cwchar> (wchar.h)|header|Wide characters
int vswscanf (const wchar_t* ws, const wchar_t* format, va_list arg);|vswscanf|Read formatted data from wide string into variable argument list (function)|(ws)|C wide string that the function processes as its source to retrieve the data.|function|c99 cpp11|<cwchar> (wchar.h)|header|Wide characters
int vwprintf (const wchar_t* format, va_list arg);|vwprintf|Print formatted data from variable argument list to stdout (function)|(format)|C wide string that contains a format string that follows the same specifications as format in printf (see printf for details).\n\t Notice that all format specifiers have the same meaning as in printf; therefore, %lc shall be used to write a wide character (and not %c), as well as %ls shall be used for wide strings (and not %s).|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int vwscanf ( const wchar_t * format, va_list arg );|vwscanf|Read formatted data into variable argument list (function)|(format)|C wide string that contains a format string that follows the same specifications as format in scanf (see scanf for details).\n\t Notice though, that all format specifiers have the same meaning as in scanf; therefore, %lc shall be used to read a wide character (and not %c), as well as %ls shall be used for wide strings (and not %s).|function|c99 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t wcrtomb (char* pmb, wchar_t wc, mbstate_t* ps);|wcrtomb|Convert wide character to multibyte sequence (function)|(pmb)|Pointer to an array large enough to hold a multibyte sequence.\n\t The maximum length of a multibyte sequence for a character in the current locale is MB_CUR_MAX bytes.\n\t\n\t Alternativelly, the function may be called with a null pointer, in which case the function always resets the shift state to the initial state, as if wc was L'\0' (ignoring the actual value passed as wc).|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* wcscat (wchar_t* destination, const wchar_t* source);|wcscat|Concatenate wide strings (function)|(destination)|Pointer to the destination array, which should contain a C wide string, and be large enough to contain the concatenated resulting string.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
const wchar_t* wcschr (const wchar_t* ws, wchar_t wc);\n\t      wchar_t* wcschr (      wchar_t* ws, wchar_t wc);|wcschr|Locate first occurrence of character in wide string (function)|(ws)|C wide string.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int wcscmp (const wchar_t* wcs1, const wchar_t* wcs2);|wcscmp|Compare two strings (function)|(wcs1)|C wide string to be compared.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int wcscoll (const wchar_t* wcs1, const wchar_t* wcs2);|wcscoll|Compare two wide strings using locale (function)|(wcs1)|C wide string to be compared.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* wcscpy (wchar_t* destination, const wchar_t* source);|wcscpy|Copy wide string (function)|(destination)|Pointer to the destination array where the content is to be copied.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t wcscspn (const wchar_t* wcs1, const wchar_t* wcs2);|wcscspn|Get span until character in wide string (function)|(wcs1)|C wide string to be scanned.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t wcsftime (wchar_t* ptr, size_t maxsize, const wchar_t* format,\n\t      const struct tm* timeptr);|wcsftime|Format time as wide string (function)|(ptr)|Pointer to the destination array where the resulting C wide string is copied.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t wcslen (const wchar_t* wcs);|wcslen|Get wide string length (function)|(wcs)|C wide string.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* wcsncat (wchar_t* destination, const wchar_t* source, size_t num);|wcsncat|Append characters from wide string (function)|(destination)|Pointer to the destination array, which should contain a C wide string, and be large enough to contain the concatenated resulting string, including the additional null wide character.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int wcsncmp (const wchar_t* wcs1, const wchar_t* wcs2, size_t num);|wcsncmp|Compare characters of two wide strings (function)|(wcs1)|C wide string to be compared.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* wcsncpy (wchar_t* destination, const wchar_t* source, size_t num);|wcsncpy|Copy characters from wide string (function)|(destination)|Pointer to the destination array where the content is to be copied.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
const wchar_t* wcspbrk (const wchar_t* wcs1, const wchar_t* wcs2);\n\t      wchar_t* wcspbrk (      wchar_t* wcs1, const wchar_t* wcs2);|wcspbrk|Locate characters in wide string (function)|(wcs1)|C wide string to be scanned.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
const wchar_t* wcsrchr (const wchar_t* ws, wchar_t wc);\n\t      wchar_t* wcsrchr (      wchar_t* ws, wchar_t wc);|wcsrchr|Locate last occurrence of character in wide string (function)|(ws)|C wide string.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t wcsrtombs (char* dest, const wchar_t** src, size_t max, mbstate_t* ps);|wcsrtombs|Convert wide-character string to multibyte string (function)|(dest)|Pointer to an array of char elements long enough to store a C string of max bytes.\n\t If this is a null pointer, the function does not store the resulting sequence, but still counts how many bytes are needed to store the translation of src (parameter max is ignored in this case).|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t wcsspn (const wchar_t* wcs1, const wchar_t* wcs2);|wcsspn|Get span of character set in wide string (function)|(wcs1)|C wide string to be scanned.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
const wchar_t* wcsstr (const wchar_t* wcs1, const wchar_t* wcs2);\n\t      wchar_t* wcsstr (      wchar_t* wcs1, const wchar_t* wcs2);|wcsstr|Locate substring of wide string (function)|(wcs1)|C wide string to be scanned.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
double wcstod (const wchar_t* str, wchar_t** endptr);|wcstod|Convert wide string to double (function)|(str)|C wide string beginning with the representation of a floating-point number.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
float wcstof (const wchar_t* str, wchar_t** endptr);|wcstof|Convert wide string to float (function)|(str)|C wide string beginning with the representation of a floating-point number.|function|c99 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* wcstok (wchar_t* wcs, const wchar_t* delimiters);|wcstok|Split wide string into tokens (function)|(wcs)|C wide string to truncate.\n\t Notice that the contents of this string are modified and broken into smaller strings (tokens).\n\t Alternativelly, a null pointer may be specified, in which case the function continues scanning where a previous successful call to the function ended.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
long int wcstol (const wchar_t* str, wchar_t** endptr, int base);|wcstol|Convert wide string to long integer (function)|(str)|C wide string beginning with the representation of an integral number.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
long double wcstold (const wchar_t* str, wchar_t** endptr);|wcstold|Convert wide string to long double (function)|(str)|C wide string beginning with the representation of a floating-point number.|function|c99 cpp11|<cwchar> (wchar.h)|header|Wide characters
long long int strtoll (const wchar_t* str, wchar_t** endptr, int base);|wcstoll|Convert wide string to long long integer (function)|(str)|C wide string beginning with the representation of an integral number.|function|c99 cpp11|<cwchar> (wchar.h)|header|Wide characters
unsigned long int wcstoul (const wchar_t* str, wchar_t** endptr, int base);|wcstoul|Convert wide string to unsigned long integer (function)|(str)|C wide string containing the representation of an integral number.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
unsigned long long int wcstoull (const wchar_t* str, wchar_t** endptr, int base);|wcstoull|Convert wide string to unsigned long long integer (function)|(str)|C wide string beginning with the representation of an integral number.|function|c99 cpp11|<cwchar> (wchar.h)|header|Wide characters
size_t wcsxfrm (wchar_t* destination, const wchar_t* source, size_t num);|wcsxfrm|Transform wide string using locale (function)|(destination)|Pointer to the destination array where the content is to be copied.\n\t It can be a null pointer if the argument for num is zero.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int wctob (wint_t wc);|wctob|Convert wide character to single byte (function)|(wc)|The wint_t promotion of a wide character.\n\t The value is internally converted to a wchar_t to be interpreted.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
const wchar_t* wmemchr (const wchar_t* ptr, wchar_t wc, size_t num);\n\t      wchar_t* wmemchr (      wchar_t* ptr, wchar_t wc, size_t num);|wmemchr|Locate character in block of wide characters (function)|(ptr)|Pointer to the array of wchar_t elements to be searched.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int wmemcmp (const wchar_t* ptr1, const wchar_t* ptr2, size_t num);|wmemcmp|Compare two blocks of wide characters (function)|(ptr1)|Pointer to block of elements of type wchar_t.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* wmemcpy (wchar_t* destination, const wchar_t* source, size_t num);|wmemcpy|Copy block of wide characters (function)|(destination)|Pointer to the destination array where the content is to be copied.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* wmemmove (wchar_t* destination, const wchar_t* source, size_t num);|wmemmove|Move block of wide characters (function)|(destination)|Pointer to the destination array where the content is to be copied.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
wchar_t* wmemset (wchar_t* ptr, wchar_t wc, size_t num);|wmemset|Fill array of wide characters (function)|(ptr)|Pointer to the array to fill.|function|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
no-proto|mbstate_t|Multibyte conversion state (type)|()||type|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
no-proto|wchar_t|Wide character (type)|()||type|c99|<cwchar> (wchar.h)|header|Wide characters
no-proto|wint_t|Wide int type (type)|()||type|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
no-proto|WCHAR_MAX|Maximum value of wchar_t (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
no-proto|WCHAR_MIN|Minimum value of wchar_t (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
no-proto|WEOF|Wide end-of-file (constant)|()||constant|c90 c99 arm cpp98 cpp11|<cwchar> (wchar.h)|header|Wide characters
int iswalnum (wint_t c);|iswalnum|Check if wide character is alphanumeric (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswalpha (wint_t c);|iswalpha|Check if wide character is alphabetic (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswblank (wint_t c);|iswblank|Check if wide character is blank (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c99 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswcntrl (wint_t c);|iswcntrl|Check if wide character is a control character (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswctype(wint_t c, wctype_t desc);|iswctype|Check if wide character has property (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswdigit (wint_t c);|iswdigit|Check if wide character is decimal digit (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswgraph (wint_t c);|iswgraph|Check if wide character has graphical representation (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswlower (wint_t c);|iswlower|Check if wide character is lowercase letter (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswprint (wint_t c);|iswprint|Check if wide character is printable (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswpunct (wint_t c);|iswpunct|Check if wide character is punctuation character (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswspace (wint_t c);|iswspace|Check if wide character is a white-space (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswupper (wint_t c);|iswupper|Check if wide character is uppercase letter (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
int iswxdigit (wint_t c);|iswxdigit|Check if wide character is hexadecimal digit (function)|(c)|Wide character to be checked, casted to a wint_t, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
wint_t towctrans(wint_t c, wctrans_t desc);|towctrans|Convert using transformation (function)|(c)|Wide character to be transformed, casted to a wint_t value, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
wint_t towlower ( wint_t c );|towlower|Convert uppercase wide character to lowercase (function)|(c)|Wide character to be converted, casted to a wint_t value, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
wint_t towupper (wint_t c);|towupper|Convert lowercase wide character to uppercase (function)|(c)|Wide character to be converted, casted to a wint_t value, or WEOF.\n\twint_t is an integral type.|function|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
no-proto|wctrans_t|Wide character transformation (type)|()||type|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
no-proto|wctype_t|Wide character type (type)|()||type|c90 c99 arm cpp98 cpp11|<cwctype> (wctype.h)|header|Wide character type
template < class T, size_t N > class array;|array|Array class (class template)|(T)|Type of the elements contained.\n\t Aliased as member type array::value_type.|class template|cpp11 folder|<array>|header|Array header
template < class T, class Alloc = allocator<T> > class deque;|deque|Double ended queue (class template)|(T)|Type of the elements.\n\t Aliased as member type deque::value_type.|class template|cpp98 cpp11 folder|<deque>|header|Deque header
template < class T, class Alloc = allocator<T> > class forward_list;|forward_list|Forward list (class template)|(T)|Type of the elements.\n\t Aliased as member type forward_list::value_type.|class template|cpp11 folder|<forward_list>|header|Forward list
long-proto|map|Map (class template)|(Key)|Type of the keys. Each element in a map is uniquely identified by its key value.\n\t Aliased as member type map::key_type.|class template|cpp98 cpp11 folder|<map>|header|Map header
long-proto|multimap|Multiple-key map (class template)|(Key)|Type of the keys. Each element in a map is identified by its key value.\n\t Aliased as member type multimap::key_type.|class template|cpp98 cpp11 folder|<map>|header|Map header
template <class T, class Container = vector<T>,  class Compare = less<typename Container::value_type> > class priority_queue;|priority_queue|Priority queue (class template)|(T)|Type of the elements.\n\t Aliased as member type priority_queue::value_type.|class template|cpp98 cpp11 folder|<queue>|header|Queue header
long-proto|multiset|Multiple-key set (class template)|(T)|Type of the elements. Each element in a multiset container is also identified by this value (each value is itself also the element's key).\n\t Aliased as member types multiset::key_type and multiset::value_type.|class template|cpp98 cpp11 folder|<set>|header|Set header
template <class T, class Container = deque<T> > class stack;|stack|LIFO stack (class template)|(T)|Type of the elements.\n\t Aliased as member type stack::value_type.|class template|cpp98 cpp11 folder|<stack>|header|Stack header
long-proto|unordered_map|Unordered Map (class template)|(Key)|Type of the key values. Each element in an unordered_map is uniquely identified by its key value.\n\t Aliased as member type unordered_map::key_type.|class template|cpp11 folder|<unordered_map>|header|Unordered map header
long-proto|unordered_multimap|Unordered Multimap (class template)|(Key)|Type of the key values. Each element in an unordered_multimap is identified by a key value.\n\t Aliased as member type unordered_multimap::key_type.|class template|cpp11 folder|<unordered_map>|header|Unordered map header
long-proto|unordered_multiset|Unordered Multiset (class template)|(Key)|Type of the elements. Each element in an unordered_multiset is also identified by this value.\n\t Aliased as member types unordered_multiset::key_type and unordered_multiset::value_type.|class template|cpp11 folder|<unordered_set>|header|Unordered set header
long-proto|unordered_set|Unordered Set (class template)|(Key)|Type of the elements. Each element in an unordered_set is also uniquely identified by this value.\n\t Aliased as member types unordered_set::key_type and unordered_set::value_type.|class template|cpp11 folder|<unordered_set>|header|Unordered set header
template < class T, class Alloc = allocator<T> > class vector; // generic template|vector|Vector (class template)|(T)|Type of the elements.\n\t Only if T is guaranteed to not throw while moving, implementations can optimize to move elements instead of copying them during reallocations.\n\t Aliased as member type vector::value_type.|class template|cpp98 cpp11 folder|<vector>|header|Vector header
template < class charT, class traits = char_traits<charT> >\n\t  class basic_filebuf;|basic_filebuf|File stream buffer (class template)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_filebuf::char_type.|class template|cpp98 cpp11 folder|<fstream>|header|File streams
template < class charT, class traits = char_traits<charT> >\n\t  class basic_fstream;|basic_fstream|File stream (class template)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_fstream::char_type.|class template|cpp98 cpp11 folder|<fstream>|header|File streams
template < class charT, class traits = char_traits<charT> >\n\t  class basic_ifstream;|basic_ifstream|Input file stream (class template)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_ifstream::char_type.|class template|cpp98 cpp11 folder|<fstream>|header|File streams
template < class charT, class traits = char_traits<charT> >\n\t  class basic_ofstream;|basic_ofstream|Output file stream (class template)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_ofstream::char_type.|class template|cpp98 cpp11 folder|<fstream>|header|File streams
typedef basic_filebuf<wchar_t> wfilebuf;|wfilebuf|File stream buffer (wide) (class)|()||class|cpp98 cpp11|<fstream>|header|File streams
typedef basic_fstream<wchar_t> wfstream;|wfstream|File stream (wide) (class)|()||class|cpp98 cpp11|<fstream>|header|File streams
typedef basic_ifstream<wchar_t> wifstream;|wifstream|Input file stream (wide) (class)|()||class|cpp98 cpp11|<fstream>|header|File streams
typedef basic_ofstream<wchar_t> wofstream;|wofstream|Output file stream (wide) (class)|()||class|cpp98 cpp11|<fstream>|header|File streams
template <class moneyT>\n\t/*unspecified*/ get_money (moneyT& mon, bool intl = false);|get_money|Get monetary value (function)|(mon)|Object where the monetary value is stored.\n\tmoneyT shall be either long double or a basic_string instantiation.|function|cpp11|<iomanip>|header|IO Manipulators
template <class charT>\n\t/*unspecified*/ get_time (struct tm* tmb, const charT* fmt);|get_time|Get date and time (function)|(tmb)|Pointer to an object of type struct tm where the time and date information extracted is stored.\n\tstruct tm is a class defined in header <ctime>.|function|cpp11|<iomanip>|header|IO Manipulators
template <class moneyT>\n\t/*unspecified*/ put_money (const moneyT& mon, bool intl = false);|put_money|Put monetary value (function)|(mon)|Monetary value.\n\tmoneyT shall be either long double or a basic_string instantiation.|function|cpp11|<iomanip>|header|IO Manipulators
template <class charT>\n\t/*unspecified*/ put_time (const struct tm* tmb, const charT* fmt);|put_time|Put date and time (function)|(tmb)|Pointer to the object of type struct tm with the date and time information to format.\n\tstruct tm is a class defined in header <ctime>.|function|cpp11|<iomanip>|header|IO Manipulators
/*unspecified*/ resetiosflags (ios_base::fmtflags mask);|resetiosflags|Reset format flags (function)|(mask)|Mask representing the flags to be reset.\n\tfmtflags is a bitmask type.|function|arm cpp98 cpp11|<iomanip>|header|IO Manipulators
/*unspecified*/ setbase (int base);|setbase|Set basefield flag (function)|(base)|Numerical radix to be used:\n\t\n\t\n\tbase argument\n\t\n\tsame as inserting...\n\t\n\t8oct\n\t10dec\n\t16hex\n\tany otherresetiosflags(ios_base::basefield)|function|arm cpp98 cpp11|<iomanip>|header|IO Manipulators
/*unspecified*/ setfill (char_type c);|setfill|Set fill character (function)|(c)|The new fill character for the stream.\n\tchar_type is the type of characters used by the stream (i.e., its first class template parameter, charT).|function|arm cpp98 cpp11|<iomanip>|header|IO Manipulators
/*unspecified*/ setprecision (int n);|setprecision|Set decimal precision (function)|(n)|New value for the decimal precision.|function|arm cpp98 cpp11|<iomanip>|header|IO Manipulators
/*undefined*/ setw (int n);|setw|Set field width (function)|(n)|Number of characters to be used as field width.|function|arm cpp98 cpp11|<iomanip>|header|IO Manipulators
template <class charT, class traits = char_traits<charT> >\n\t  class basic_ios;|basic_ios|Base class for streams (type-dependent components) (class template)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_ios::char_type.|class template|cpp98 cpp11 folder|<ios>|header|Input-Output base classes
class ios_base;|ios_base|Base class for streams (class)|()||class|arm cpp98 cpp11 folder|<ios>|header|Input-Output base classes
enum class io_errc;|io_errc|Input/output error conditions (enum class)|()||enum class|cpp11 folder|<ios>|header|Input-Output base classes
no-proto|streamoff|Stream offset type (type)|()||type|arm cpp98 cpp11|<ios>|header|Input-Output base classes
typedef fpos<mbstate_t> streampos;|streampos|Stream position type (type)|()||type|arm cpp98 cpp11|<ios>|header|Input-Output base classes
no-proto|streamsize|Stream size type (type)|()||type|arm cpp98 cpp11|<ios>|header|Input-Output base classes
typedef basic_ios<wchar_t> ios;|wios|Base class for wide character streams (class)|()||class|cpp98 cpp11|<ios>|header|Input-Output base classes
typedef fpos<mbstate_t> wstreampos;|wstreampos|Wide stream position type (type)|()||type|cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& boolalpha (ios_base& str);|boolalpha|Alphanumerical bool values (function)|(str)|Stream object whose format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& dec (ios_base& str);|dec|Use decimal base (function)|(str)|Stream object whose basefield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& defaultfloat (ios_base& str);|defaultfloat|no-Description (other)|(str)|Stream object whose floatfield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|other|cpp11|<ios>|header|Input-Output base classes
ios_base& fixed (ios_base& str);|fixed|Use fixed floating-point notation (function)|(str)|Stream object whose floatfield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& hex (ios_base& str);|hex|Use hexadecimal base (function)|(str)|Stream object whose basefield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& hexfloat (ios_base& str);|hexfloat|no-Description (other)|(str)|Stream object whose floatfield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|other|cpp11|<ios>|header|Input-Output base classes
ios_base& internal (ios_base& str);|internal|Adjust field by inserting characters at an internal position (function)|(str)|Stream object whose adjustfield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& left (ios_base& str);|left|Adjust output to the left (function)|(str)|Stream object whose adjustfield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& noboolalpha (ios_base& str);|noboolalpha|No alphanumerical bool values (function)|(str)|Stream object whose format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& noshowbase (ios_base& str);|noshowbase|Do not show numerical base prefixes (function)|(str)|Stream object whose format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& noshowpoint (ios_base& str);|noshowpoint|Do not show decimal point (function)|(str)|Stream object whose format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& noshowpos (ios_base& str);|noshowpos|Do not show positive signs (function)|(str)|Stream object whose format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& noskipws (ios_base& str);|noskipws|Do not skip whitespaces (function)|(str)|Stream object whose format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& nounitbuf (ios_base& str);|nounitbuf|Do not force flushes after insertions (function)|(str)|Stream object whose format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& nouppercase (ios_base& str);|nouppercase|Do not generate upper case letters (function)|(str)|Stream object whose format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& oct (ios_base& str);|oct|Use octal base (function)|(str)|Stream object whose basefield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& right (ios_base& str);|right|Adjust output to the right (function)|(str)|Stream object whose adjustfield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
ios_base& scientific (ios_base& str);|scientific|Use scientific floating-point notation (function)|(str)|Stream object whose floatfield format flag is affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) and extraction (>>) operations on streams (see example below).|function|arm cpp98 cpp11|<ios>|header|Input-Output base classes
const error_category& iostream_category();|iostream_category|Return iostream category (function)|()|void|function|cpp11|<ios>|header|Input-Output base classes
extern ostream cerr;|cerr|Standard output stream for errors (object)|()||object|arm cpp98 cpp11|<iostream>|header|Standard Input / Output Streams Library
extern istream cin;|cin|Standard input stream (object)|()||object|arm cpp98 cpp11|<iostream>|header|Standard Input / Output Streams Library
extern ostream clog;|clog|Standard output stream for logging (object)|()||object|arm cpp98 cpp11|<iostream>|header|Standard Input / Output Streams Library
extern ostream cout;|cout|Standard output stream (object)|()||object|arm cpp98 cpp11|<iostream>|header|Standard Input / Output Streams Library
extern basic_ostream<wchar_t> wcerr;|wcerr|Standard output stream for errors (wide-oriented) (object)|()||object|cpp98 cpp11|<iostream>|header|Standard Input / Output Streams Library
extern basic_istream<wchar_t> wcin;|wcin|Standard input stream (wide) (object)|()||object|cpp98 cpp11|<iostream>|header|Standard Input / Output Streams Library
extern basic_ostream<wchar_t> wclog;|wclog|Standard output stream for logging (wide) (object)|()||object|cpp98 cpp11|<iostream>|header|Standard Input / Output Streams Library
extern basic_ostream<wchar_t> wcout;|wcout|Standard output stream (wide) (object)|()||object|cpp98 cpp11|<iostream>|header|Standard Input / Output Streams Library
template <class charT, class traits = char_traits<charT> >  class basic_iostream;|basic_iostream|Input/output stream (class template)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_iostream::char_type.|class template|cpp98 cpp11 folder|<istream>|header|Input stream
template <class charT, class traits = char_traits<charT> >\n\t  class basic_istream;|basic_istream|Input stream (class template)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_istream::char_type.|class template|cpp98 cpp11 folder|<istream>|header|Input stream
typedef basic_iostream<wchar_t> wiostream;|wiostream|Input/output stream (wide) (class)|()||class|arm cpp98 cpp11|<istream>|header|Input stream
typedef basic_istream<wchar_t> wistream;|wistream|Input stream (wide) (class)|()||class|cpp98 cpp11|<istream>|header|Input stream
template <class charT, class traits = char_traits<charT> >\n\t  class basic_ostream;|basic_ostream|Output stream (class)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_istream::char_type.|class|cpp98 cpp11 folder|<ostream>|header|Output stream
typedef basic_ostream<wchar_t> wostream;|wostream|Output stream (wide) (class)|()||class|arm cpp98 cpp11|<ostream>|header|Output stream
\n\tfor ostream\n\tostream& endl (ostream& os);\n\t\n\t\n\t\n\tbasic template\n\ttemplate <class charT, class traits>\n\tbasic_ostream<charT,traits>& endl (basic_ostream<charT,traits>& os);|endl|Insert newline and flush (function)|(os)|Output stream object affected.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) operations on output streams (see example below).|function|arm cpp98 cpp11|<ostream>|header|Output stream
\n\tfor ostream\n\tostream& ends (ostream& os);\n\t\n\t\n\t\n\tbasic template\n\ttemplate <class charT, class traits>\n\tbasic_ostream<charT,traits>& ends (basic_ostream<charT,traits>& os);|ends|Insert null character (function)|(os)|Output stream object where character is inserted.\n\t Because this function is a manipulator, it is designed to be used alone with no arguments in conjunction with the insertion (<<) operations on output streams.|function|arm cpp98 cpp11|<ostream>|header|Output stream
long-proto|basic_istringstream|Input string stream (class template)|(charT)|Character type used by both the stream and the basic_string objects it accepts or generates.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_istringstream::char_type.|class template|cpp98 cpp11 folder|<sstream>|header|String streams
long-proto|basic_ostringstream|Output string stream (class template)|(charT)|Character type used by both the stream and the basic_string objects it accepts or generates.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_ostringstream::char_type.|class template|cpp98 cpp11 folder|<sstream>|header|String streams
long-proto|basic_stringbuf|String stream buffer (class template)|(charT)|Character type used by both the stream buffer and the basic_string objects it accepts or generates.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_stringbuf::char_type.|class template|cpp98 cpp11 folder|<sstream>|header|String streams
long-proto|basic_stringstream|String stream (class template)|(charT)|Character type used by both the stream and the basic_string objects it accepts or generates.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_stringstream::char_type.|class template|cpp98 cpp11 folder|<sstream>|header|String streams
typedef basic_istringstream<wchar_t> wistringstream;|wistringstream|Input string stream (wide) (class)|()||class|cpp98 cpp11|<sstream>|header|String streams
typedef basic_ostringstream<wchar_t> wostringstream;|wostringstream|Output string stream (wide) (class)|()||class|cpp98 cpp11|<sstream>|header|String streams
typedef basic_stringbuf<wchar_t> wstringbuf;|wstringbuf|String stream buffer (wide) (class)|()||class|cpp98 cpp11|<sstream>|header|String streams
typedef basic_stringstream<wchar_t> wstringstream;|wstringstream|Input/output string stream (wide) (class)|()||class|cpp98 cpp11|<sstream>|header|String streams
template <class charT, class traits = char_traits<charT> >\n\t  class basic_streambuf;|basic_streambuf|Base buffer class for streams (class template)|(charT)|Character type.\n\t This shall be a non-array POD type.\n\t Aliased as member type basic_streambuf::char_type.|class template|cpp98 cpp11 folder|<streambuf>|header|Stream buffer
typedef basic_streambuf<wchar_t> wstreambuf;|wstreambuf|Base buffer class for streams (wide) (class)|()||class|cpp98 cpp11|<streambuf>|header|Stream buffer
struct atomic_flag;|atomic_flag|Atomic flag (class)|()||class|cpp11 folder|<atomic>|header|Atomic
enum memory_order;|memory_order|Memory order (enum)|()||enum|cpp11|<atomic>|header|Atomic
extern "C" void atomic_signal_fence (memory_order sync) noexcept;|atomic_signal_fence|Signal fence (function)|(sync)|Synchronization mode for the operation.\n\t This shall be one of these possible values of the enum type memory_order:\n\t\n\t\n\tvalue\n\t\n\tmemory order\n\t\n\tdescription\n\t\n\tmemory_order_relaxedRelaxedThe call has no effects.\n\tmemory_order_consumeConsumeSets up an acquire signal fence:\n\t Orders instructions with respect to the last release or sequentially consistent operation in the same thread.\n\t\n\tmemory_order_acquireAcquire\n\tmemory_order_releaseReleaseSets up a release signal fence:\n\t Orders instructions with respect to the next acquire operation in the same thread.\n\tmemory_order_acq_relAcquire/ReleaseSets up a signal fence that is both an acquire fence and a release fence:\n\t All instructions are ordered with respect to the last release or sequentially consistent operation and with the next acquire operation in the same thread.\n\tmemory_order_seq_cstSequentially consistentSets up a sequentially consistent acquire and release signal fence:\n\t All instructions are ordered with respect to the other sequentially consistent operations in the same thread.|function|cpp11|<atomic>|header|Atomic
extern "C" void atomic_thread_fence (memory_order sync) noexcept;|atomic_thread_fence|Thread fence (function)|(sync)|Synchronization mode for the operation.\n\t This shall be one of these possible values of the enum type memory_order:\n\t\n\t\n\tvalue\n\t\n\tmemory order\n\t\n\tdescription\n\t\n\tmemory_order_relaxedRelaxedThe call has no effects.\n\tmemory_order_consumeConsumeSets up an acquire fence:\n\t Synchronizes all visible side effects from the last release or sequentially consistent operation.\n\t\n\tmemory_order_acquireAcquire\n\tmemory_order_releaseReleaseSets up a release fence:\n\t Synchronizes side effects with the next acquire operation.\n\tmemory_order_acq_relAcquire/ReleaseSets up a fence that is both an acquire fence and a release fence:\n\t Synchronizes all visible side effects from the last release or sequentially consistent operation and with the next acquire operation.\n\tmemory_order_seq_cstSequentially consistentSets up a sequentially consistent acquire and release fence:\n\t Synchronizes all visible side effects with the other sequentially consistent operations, following a single total order.|function|cpp11|<atomic>|header|Atomic
template <class T>\n\t  T kill_dependency (T y) noexcept;|kill_dependency|Kill dependency (function)|(y)|A value.|function|cpp11|<atomic>|header|Atomic
ATOMIC_FLAG_INIT|ATOMIC_FLAG_INIT|Initialization of atomic flag (macro)|()||macro|cpp11|<atomic>|header|Atomic
ATOMIC_VAR_INIT(val)|ATOMIC_VAR_INIT|Initialization of atomic variable (macro)|(val)|Value to use for initialization.\n\t The object contained in the atomic object shall support constant initialization from this value.|macro|cpp11|<atomic>|header|Atomic
long-proto|atomic_compare_exchange_strong|Compare and exchange contained value (strong) (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_compare_exchange_strong_explicit|Compare and exchange contained value (strong, explicit) (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_compare_exchange_weak|Compare and exchange contained value (weak) (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_compare_exchange_weak_explicit|Compare and exchange contained value (weak, explicit) (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_exchange|Read and modify contained value (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_exchange_explicit|Read  and modify contained value (explicit memory order) (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_add|Add to contained value (function)|(obj)|Pointer to an atomic object that contains either an integral or a pointer value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_add_explicit|Add to contained value (explicit memory order) (function)|(obj)|Pointer to an atomic object that contains either an integral or a pointer value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_and|Apply bitwise AND to contained value (function)|(obj)|Pointer to an atomic object that contains an integral value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_and_explicit|Apply bitwise AND to contained value (explicit memory order) (function)|(obj)|Pointer to an atomic object that contains an integral value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_or|Apply bitwise OR to contained value (function)|(obj)|Pointer to an atomic object that contains an integral value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_or_explicit|Apply bitwise OR to contained value (explicit memory order) (function)|(obj)|Pointer to an atomic object that contains an integral value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_sub|Subtract from contained value (function)|(obj)|Pointer to an atomic object that contains either an integral or a pointer value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_sub_explicit|Subtract from contained value (explicit memory order) (function)|(obj)|Pointer to an atomic object that contains either an integral or a pointer value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_xor|Apply bitwise XOR to contained value (function)|(obj)|Pointer to an atomic object that contains an integral value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_fetch_xor_explicit|Apply bitwise XOR to contained value (explicit memory order) (function)|(obj)|Pointer to an atomic object that contains an integral value.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
void atomic_flag_clear (volatile atomic_flag* obj) noexcept;\n\tvoid atomic_flag_clear (atomic_flag* obj) noexcept;|atomic_flag_clear|Clear atomic flag (function)|(obj)|Pointer to the atomic_flag object to clear.|function|cpp11|<atomic>|header|Atomic
void atomic_flag_clear (volatile atomic_flag* obj, memory_order sync) noexcept;\n\tvoid atomic_flag_clear (atomic_flag* obj, memory_order sync) noexcept;|atomic_flag_clear_explicit|Clear atomic flag (explicit memory order) (function)|(obj)|Pointer to the atomic_flag object to clear.|function|cpp11|<atomic>|header|Atomic
bool atomic_flag_test_and_set (volatile atomic_flag* obj) noexcept;\n\tbool atomic_flag_test_and_set (atomic_flag* obj) noexcept;|atomic_flag_test_and_set|Test and set atomic flag (function)|(obj)|Pointer to the atomic_flag object to set.|function|cpp11|<atomic>|header|Atomic
bool atomic_flag_test_and_set (volatile atomic_flag* obj, memory_order sync) noexcept;\n\tbool atomic_flag_test_and_set (atomic_flag* obj, memory_order sync) noexcept;|atomic_flag_test_and_set_explicit|Test and set atomic flag (explicit memory order) (function)|(obj)|Pointer to the atomic_flag object to set.|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_init|Initialize atomic object (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_is_lock_free|Is lock-free (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (in case the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_load|Read contained value (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_load_explicit|Read contained value (explicit memory order) (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_store|Modify contained value (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
long-proto|atomic_store_explicit|Modify contained value (explicit memory order) (function)|(obj)|Pointer to an atomic object.\n\t Type A represents other overloaded atomic types (if the library does not implement the C-style atomic types as instantiations of atomic).|function|cpp11|<atomic>|header|Atomic
class condition_variable;|condition_variable|Condition variable (class)|()||class|cpp11 folder|<condition_variable>|header|Condition variable
class condition_variable_any;|condition_variable_any|Condition variable (any lock) (class)|()||class|cpp11 folder|<condition_variable>|header|Condition variable
enum class cv_status;|cv_status|Condition variable status (enum class)|()||enum class|cpp11|<condition_variable>|header|Condition variable
void notify_all_at_thread_exit (condition_variable& cond, unique_lock<mutex> lck);|notify_all_at_thread_exit|Notify all at thread exit (function)|(cond)|A condition_variable object to notify all at thread exit.|function|cpp11|<condition_variable>|header|Condition variable
template <class T>  future;\n\ttemplate <class R&> future<R&>;     // specialization : T is a reference type (R&)\n\ttemplate <>         future<void>;   // specialization : T is void|future|Future (class template)|()||class template|cpp11 folder|<future>|header|Future
class future_error : public logic_error;|future_error|Future error exception (class)|()||class|cpp11 folder|<future>|header|Future
template <class T> packaged_task;     // undefined\n\ttemplate <class Ret, class... Args> class packaged_task<Ret(Args...)>;|packaged_task|Packaged task (class template)|()||class template|cpp11 folder|<future>|header|Future
template <class T>  promise;\n\ttemplate <class R&> promise<R&>;     // specialization : T is a reference type (R&)\n\ttemplate <>         promise<void>;   // specialization : T is void|promise|Promise (class template)|()||class template|cpp11 folder|<future>|header|Future
template <class T>  shared_future;\n\ttemplate <class R&> shared_future<R&>;   // specialization : T is a reference type (R&)\n\ttemplate <>         shared_future<void>; // specialization : T is void|shared_future|Shared future (class template)|()||class template|cpp11 folder|<future>|header|Future
enum class future_errc;|future_errc|Error conditions for future objects (enum class)|()||enum class|cpp11 folder|<future>|header|Future
enum class future_status;|future_status|Return value for timed future operations (enum class)|()||enum class|cpp11|<future>|header|Future
enum class launch;|launch|Launching policy for async (enum class)|()||enum class|cpp11|<future>|header|Future
long-proto|async|Call function asynchronously (function template)|(policy)|A bitmask value of type launch indicating the launching policy:\n\t\n\t\n\tpolicy\n\t\n\tdescription\n\t\n\tlaunch::asyncAsynchronous: Launches a new thread to call fn (as if a thread object is constructed with fn and args as arguments, and accessing the shared state of the returned future joins it).\n\tlaunch::deferredDeferred: The call to fn is deferred until the shared state of the returned future is accessed (with wait or get). At that point, fn is called and the function is no longer considered deferred. When this call returns, the shared state of the returned future is made ready.\n\tlaunch::async|launch::deferredAutomatic: The function chooses the policy automatically (at some point). This depends on the system and library implementation, which generally optimizes for the current availability of concurrency in the system.\n\tParticular library implementations may support additional launching policies, with the proper label defined in type launch. Combining multiple values is possible, in which case, the function automatically chooses one among them.|function template|cpp11|<future>|header|Future
const error_category& future_category() noexcept;|future_category|Return future category (function)|()|void|function|cpp11|<future>|header|Future
struct adopt_lock_t {};|adopt_lock_t|Type of adopt_lock (class)|()||class|cpp11|<mutex>|header|Mutex
struct defer_lock_t {};|defer_lock_t|Type of defer_lock (class)|()||class|cpp11|<mutex>|header|Mutex
template <class Mutex> class lock_guard;|lock_guard|Lock guard (class template)|(Mutex)|A mutex-like type.\n\t It shall be a basic lockable type, such as mutex (see BasicLockable for requirements).|class template|cpp11 folder|<mutex>|header|Mutex
class mutex;|mutex|Mutex class (class)|()||class|cpp11 folder|<mutex>|header|Mutex
struct once_flag;|once_flag|Flag argument type for call_once (class)|()||class|cpp11|<mutex>|header|Mutex
class recursive_mutex;|recursive_mutex|Recursive mutex class (class)|()||class|cpp11 folder|<mutex>|header|Mutex
class recursive_timed_mutex;|recursive_timed_mutex|Recursive timed mutex (class)|()||class|cpp11 folder|<mutex>|header|Mutex
struct try_to_lock_t {};|try_to_lock_t|Type of try_to_lock (class)|()||class|cpp11|<mutex>|header|Mutex
template <class Mutex> class unique_lock;|unique_lock|Unique lock (class template)|(Mutex)|A mutex-like type.\n\t It shall be a basic lockable type, such as mutex (see BasicLockable for requirements).|class template|cpp11 folder|<mutex>|header|Mutex
template <class Fn, class... Args>  void call_once (once_flag& flag, Fn&& fn, Args&&... args);|call_once|Call function once (public member function)|(flag)|Object used by the function to track the state of invocations.\n\t Using the same object for calls in different threads, results in a single call if called concurrently.\n\t\n\t\n\tC++11\n\t\n\t\n\tC++14\n\t\n\t\n\t\n\t\n\t\n\tIf flag has a state that is not valid, the function throws a system_error exception with an invalid_argument error condition.\n\t\n\t\n\tIf flag has a state that is not valid, the call causes undefined behavior.\n\t\n\tcall_once is a specific type defined in header <mutex> to be used as argument to this function.|public member function|cpp11|<mutex>|header|Mutex
template <class Mutex1, class Mutex2, class... Mutexes>\n\t  int try_lock (Mutex1& a, Mutex2& b, Mutexes&... cde);|try_lock|Try to lock multiple mutexes (function template)|(a, b, cde)|Objects to try-lock.\n\tMutex1, Mutex2 and Mutexes shall be lockable types.|function template|cpp11|<mutex>|header|Mutex
no-proto|this_thread|This thread (namespace)|()||namespace|cpp11 folder|<thread>|header|Thread
long-proto|adjacent_find|Find equal adjacent elements in range (function template)|(first, last)|Forward iterators to the initial and final positions of the searched sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class UnaryPredicate>\n\t  bool all_of (InputIterator first, InputIterator last, UnaryPredicate pred);|all_of|Test condition on all elements in range (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class UnaryPredicate>\n\t  bool any_of (InputIterator first, InputIterator last, UnaryPredicate pred);|any_of|Test if any element in range fulfills condition (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|binary_search|Test if value exists in sorted sequence (function template)|(first, last)|Forward iterators to the initial and final positions of a sorted (or properly partitioned) sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|copy_backward|Copy range of elements backward (function template)|(first, last)|Bidirectional iterators to the initial and final positions in a sequence to be copied. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class OutputIterator, class UnaryPredicate>\n\t  OutputIterator copy_if (InputIterator first, InputIterator last,\n\t    OutputIterator result, UnaryPredicate pred);|copy_if|Copy certain elements of range (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range copied is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\tInputIterator shall point to a type assignable to the elements pointed by OutputIterator.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class Size, class OutputIterator>\n\t  OutputIterator copy_n (InputIterator first, Size n, OutputIterator result);|copy_n|Copy elements (function template)|(first)|Input iterators to the initial position in a sequence of at least n elements to be copied.\n\tInputIterator shall point to a type assignable to the elements pointed by OutputIterator.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class T>\n\t  typename iterator_traits<InputIterator>::difference_type\n\t    count (InputIterator first, InputIterator last, const T& val);|count|Count appearances of value in range (function template)|(first, last)|Input iterators to the initial and final positions of the sequence of elements. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class UnaryPredicate>\n\t  typename iterator_traits<InputIterator>::difference_type\n\t    count_if (InputIterator first, InputIterator last, UnaryPredicate pred);|count_if|Return number of elements in range satisfying condition (function template)|(first, last)|Input iterators to the initial and final positions of the sequence of elements. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|equal_range|Get subrange of equal elements (function template)|(first, last)|Forward iterators to the initial and final positions of a sorted (or properly partitioned) sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class OutputIterator, class Size, class T>  void fill_n (OutputIterator first, Size n, const T& val);|fill_n|Fill sequence with value (function template)|(first)|Output iterators to the initial position in a sequence of at least n elements that support being assigned a value of type T.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator1, class ForwardIterator2>   ForwardIterator1 find_end (ForwardIterator1 first1, ForwardIterator1 last1,        ForwardIterator2 first2, ForwardIterator2 last2);|find_end|Find last subsequence in range (function template)|(first1, last1)|Forward iterators to the initial and final positions of the searched sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator1, class ForwardIterator2>   ForwardIterator1 find_first_of (ForwardIterator1 first1, ForwardIterator1 last1,    ForwardIterator2 first2, ForwardIterator2 last2);|find_first_of|Find element from set in range (function template)|(first1, last1)|\n\tC++98\n\t\n\t\n\tC++11\n\t\n\t\n\t\n\t\n\t\n\tForward iterators to the initial and final positions of the searched sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.\n\t\n\t\n\tInput iterators to the initial and final positions of the searched sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class UnaryPredicate>\n\t   InputIterator find_if (InputIterator first, InputIterator last, UnaryPredicate pred);|find_if|Find element in range (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class UnaryPredicate>\n\t   InputIterator find_if_not (InputIterator first, InputIterator last, UnaryPredicate pred);|find_if_not|Find element in range (negative condition) (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class Function>   Function for_each (InputIterator first, InputIterator last, Function fn);|for_each|Apply function to range (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator, class Generator>\n\t  void generate (ForwardIterator first, ForwardIterator last, Generator gen);|generate|Generate values for range with function (function template)|(first, last)|Forward iterators to the initial and final positions in a sequence. The range affected is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class OutputIterator, class Size, class Generator>  void generate_n (OutputIterator first, Size n, Generator gen);|generate_n|Generate values for sequence with function (function template)|(first)|Output iterators to the initial positions in a sequence of at least n elements that support being assigned a value of the type returned by gen.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|includes|Test whether sorted range includes another sorted range (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sorted sequence (which is tested on whether it contains the second sequence). The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|inplace_merge|Merge consecutive sorted ranges (function template)|(first)|Bidirectional iterator to the initial position in the first sorted sequence to merge. This is also the initial position where the resulting merged range is stored.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|is_heap|Test if range is heap (function template)|(first, last)|RandomAccess iterators to the initial and final positions of the sequence. The range checked is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|is_heap_until|Find first element not in heap order (function template)|(first, last)|Random-access iterators to the initial and final positions in a sequence. The range checked is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class UnaryPredicate>\n\t  bool is_partitioned (InputIterator first, InputIterator last, UnaryPredicate pred);|is_partitioned|Test whether range is partitioned (function template)|(first, last)|Input iterators to the initial and final positions of the sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|is_permutation|Test whether range is permutation of another (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|is_sorted|Check whether range is sorted (function template)|(first, last)|Forward iterators to the initial and final positions of the sequence. The range checked is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|is_sorted_until|Find first unsorted element in range (function template)|(first, last)|Forward iterators to the initial and final positions in a sequence. The range checked is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator1, class ForwardIterator2>\n\t  void iter_swap (ForwardIterator1 a, ForwardIterator2 b);|iter_swap|Exchange values of objects pointed to by two iterators (function template)|(a, b)|Forward iterators to the objects to swap.\n\tswap shall be defined to exchange values of the type pointed to by the iterators.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|lexicographical_compare|Lexicographical less-than comparison (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|lower_bound|Return iterator to lower bound (function template)|(first, last)|Forward iterators to the initial and final positions of a sorted (or properly partitioned) sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|make_heap|Make heap from range (function template)|(first, last)|Random-access iterators to the initial and final positions of the sequence to be transformed into a heap. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\tRandomAccessIterator shall point to a type for which swap is properly defined and which is both move-constructible and move-assignable.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|max_element|Return largest element in range (function template)|(first, last)|Input iterators to the initial and final positions of the sequence to compare. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class T>  pair <const T&,const T&> minmax (const T& a, const T& b);|minmax|Return smallest and largest elements (function template)|(a, b)|Values to compare.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|minmax_element|Return smallest and largest elements in range (function template)|(first, last)|Input iterators to the initial and final positions of the sequence to compare. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|min_element|Return smallest element in range (function template)|(first, last)|Input iterators to the initial and final positions of the sequence to compare. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|mismatch|Return first position where two ranges differ (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|move_backward|Move range of elements backward (function template)|(first, last)|Bidirectional iterators to the initial and final positions in a sequence to be moved. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|next_permutation|Transform range to next permutation (function template)|(first, last)|Bidirectional iterators to the initial and final positions of the sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\tBidirectionalIterator shall point to a type for which swap is properly defined.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class UnaryPredicate>\n\t  bool none_of (InputIterator first, InputIterator last, UnaryPredicate pred);|none_of|Test if no elements fulfill condition (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class RandomAccessIterator>  void nth_element (RandomAccessIterator first, RandomAccessIterator nth,         RandomAccessIterator last);|nth_element|Sort element in range (function template)|(first, last)|Random-access iterators to the initial and final positions of the sequence to be used. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\t Notice that in this function, these are not consecutive parameters, but the first and the third.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|partial_sort|Partially sort elements in range (function template)|(first, last)|Random-access iterators to the initial and final positions of the sequence to be partially sorted. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\t Notice that in this function these are not consecutive parameters, but the first and the third.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|partial_sort_copy|Copy and partially sort range (function template)|(first, last)|Input iterators to the initial and final positions of the sequence to copy from. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\tInputIterator shall point to a type assignable to the elements pointed by RandomAccessIterator.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|partition_copy|Partition range into two (function template)|(first, last)|Input iterators to the initial and final positions of the range to be copy-partitioned. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator, class UnaryPredicate>\n\t  ForwardIterator partition_point (ForwardIterator first, ForwardIterator last,\n\t    UnaryPredicate pred);|partition_point|Get partition point (function template)|(first, last)|Forward iterators to the initial and final positions of the partitioned sequence. The range checked is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|pop_heap|Pop element from heap range (function template)|(first, last)|Random-access iterators to the initial and final positions of the heap to be shrank by one. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\t This shall not be an empty range.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|prev_permutation|Transform range to previous permutation (function template)|(first, last)|Bidirectional iterators to the initial and final positions of the sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\tBidirectionalIterator shall point to a type for which swap is properly defined.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|push_heap|Push element into heap range (function template)|(first, last)|Random-access iterators to the initial and final positions of the new heap range, including the pushed element. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class RandomAccessIterator>  void random_shuffle (RandomAccessIterator first, RandomAccessIterator last);|random_shuffle|Randomly rearrange elements in range (function template)|(first, last)|Random-access iterators to the initial and final positions of the sequence to be shuffled. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class OutputIterator, class T>\n\t  OutputIterator remove_copy (InputIterator first, InputIterator last,\n\t        OutputIterator result, const T& val);|remove_copy|Copy range removing value (function template)|(first, last)|Forward iterators to the initial and final positions in a sequence of elements supporting being compared to a value of type T. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class InputIterator, class OutputIterator, class UnaryPredicate>\n\t  OutputIterator remove_copy_if (InputIterator first, InputIterator last,\n\t  OutputIterator result, UnaryPredicate pred);|remove_copy_if|Copy range removing values (function template)|(first, last)|Forward iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator, class UnaryPredicate>  ForwardIterator remove_if (ForwardIterator first, ForwardIterator last,       UnaryPredicate pred);|remove_if|Remove elements from range (function template)|(first, last)|Forward iterators to the initial and final positions in a sequence of move-assignable elements. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator, class T>\n\t  void replace (ForwardIterator first, ForwardIterator last,\n\t     const T& old_value, const T& new_value);|replace|Replace value in range (function template)|(first, last)|Forward iterators to the initial and final positions in a sequence of elements that support being compared and assigned a value of type T. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|replace_copy|Copy range replacing value (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range copied is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|replace_copy_if|Copy range replacing value (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range copied is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator, class UnaryPredicate, class T>\n\t  void replace_if (ForwardIterator first, ForwardIterator last,\n\t        UnaryPredicate pred, const T& new_value );|replace_if|Replace values in range (function template)|(first, last)|Forward iterators to the initial and final positions in a sequence of elements that support being assigned a value of type T. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class BidirectionalIterator>\n\t  void reverse (BidirectionalIterator first, BidirectionalIterator last);|reverse|Reverse range (function template)|(first, last)|Bidirectional iterators to the initial and final positions of the sequence to be reversed. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\tBidirectionalIterator shall point to a type for which swap is properly defined.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class BidirectionalIterator, class OutputIterator>\n\t  OutputIterator reverse_copy (BidirectionalIterator first,\n\t         BidirectionalIterator last, OutputIterator result);|reverse_copy|Copy range reversed (function template)|(first, last)|Bidirectional iterators to the initial and final positions of the sequence to be copied. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator>  void rotate (ForwardIterator first, ForwardIterator middle,    ForwardIterator last);|rotate|Rotate left the elements in range (function template)|(first, last)|Forward iterators to the initial and final positions of the sequence to be rotated left. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\t Notice that in this function these are not consecutive parameters, but the first and the third.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator, class OutputIterator>\n\t  OutputIterator rotate_copy (ForwardIterator first, ForwardIterator middle,\n\t        ForwardIterator last, OutputIterator result);|rotate_copy|Copy range rotated left (function template)|(first, last)|Forward iterators to the initial and final positions of the range to be copy-rotated. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\t Notice that in this function, these are not consecutive parameters, but the first and third ones.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|search_n|Search range for elements (function template)|(first, last)|Forward iterators to the initial and final positions of the searched sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|set_difference|Difference of two sorted ranges (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sorted sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|set_intersection|Intersection of two sorted ranges (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sorted sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|set_symmetric_difference|Symmetric difference of two sorted ranges (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sorted sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|set_union|Union of two sorted ranges (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sorted sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|sort_heap|Sort elements of heap (function template)|(first, last)|Random-access iterators to the initial and final positions of the heap range to be sorted. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|stable_partition|Partition range in two - stable ordering (function template)|(first, last)|Bidirectional iterators to the initial and final positions of the sequence to partition. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\tBidirectionalIterator shall point to a type for which swap is defined (and swaps the value of its arguments) and which is both move-constructible and move-assignable.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|stable_sort|Sort elements preserving order of equivalents (function template)|(first, last)|Random-access iterators to the initial and final positions of the sequence to be sorted. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\tRandomAccessIterator shall point to a type for which swap is properly defined and which is both move-constructible and move-assignable.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <class ForwardIterator1, class ForwardIterator2>\n\t  ForwardIterator2 swap_ranges (ForwardIterator1 first1, ForwardIterator1 last1,\n\t ForwardIterator2 first2);|swap_ranges|Exchange values of two ranges (function template)|(first1, last1)|Forward iterators to the initial and final positions in one of the sequences to be swapped. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|transform|Transform range (function template)|(first1, last1)|Input iterators to the initial and final positions of the first sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed to by first1 but not the element pointed to by last1.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|unique_copy|Copy range removing duplicates (function template)|(first, last)|Forward iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.\n\t If InputIterator is a single-pass iterator, the type it points to shall be copy-constructible and copy-assignable.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
long-proto|upper_bound|Return iterator to upper bound (function template)|(first, last)|Forward iterators to the initial and final positions of a sorted (or properly partitioned) sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<algorithm>|library|Standard Template Library: Algorithms
template <size_t N> class bitset;|bitset|Bitset (class template)|(N)|Size of the bitset, in terms of number of bits.\n\t It is returned by member function bitset::size.\n\tsize_t is an unsigned integral type.|class template|cpp98 cpp11 folder|<bitset>|header|Bitset header
template <class Rep1, class Period1, class Rep2, class Period2>\n\tclass common_type<chrono::duration<Rep1,Period1>,chrono::duration<Rep2,Period2>>;|common_type (duration)|Specialization of common_type for duration (class template)|(Rep1, Rep2)|Count representation types.\n\t These can either be arithmetic types, or classes emulating an arithmetic type.|class template|cpp11|<chrono>|header|Time library
template <class Clock, class Duration1, class Duration2>\n\tclass common_type<chrono::time_point<Clock, Duration1>, chrono::time_point<Clock, Duration2>>;|common_type (time_point)|no-Description (other)|(Clock)|The clock used by both time_point types.|other|cpp11|<chrono>|header|Time library
template <class Rep> class duration_values;|duration_values|Duration values (class template)|(Rep)|Count representation type.\n\t This is an arithmetic type, or a class emulating an arithmetic type.|class template|cpp11 folder|<chrono>|header|Time library
class high_resolution_clock;|high_resolution_clock|High resolution clock (class)|()||class|cpp11 folder|<chrono>|header|Time library
class steady_clock;|steady_clock|Steady clock (class)|()||class|cpp11 folder|<chrono>|header|Time library
class system_clock;|system_clock|System clock (class)|()||class|cpp11 folder|<chrono>|header|Time library
template <class Rep> struct treat_as_floating_point : is_floating_point<Rep> {};|treat_as_floating_point|Treat as floating point (class template)|(Rep)|Count representation type.\n\t This is an arithmetic type, or a class emulating an arithmetic type.|class template|cpp11|<chrono>|header|Time library
template <class ToDuration, class Rep, class Period>\n\t  constexpr ToDuration duration_cast (const duration<Rep,Period>& dtn);|duration_cast|Duration cast (function template)|(dtn)|A duration object.|function template|cpp11|<chrono>|header|Time library
template <class ToDuration, class Clock, class Duration>\n\t  time_point<Clock,ToDuration> time_point_cast (const time_point<Clock,Duration>& tp);|time_point_cast|Time_point cast (function template)|(tp)|A time_point object.|function template|cpp11|<chrono>|header|Time library
typedef duration < /*see rep below*/, ratio<3600,1> > hours;|hours|Duration in hours (class)|()||class|cpp11|<chrono>|header|Time library
typedef duration < /* see rep below */, micro > microseconds;|microseconds|Duration in microseconds (class)|()||class|cpp11|<chrono>|header|Time library
typedef duration < /* see rep below */, milli > milliseconds;|milliseconds|Duration in milliseconds (class)|()||class|cpp11|<chrono>|header|Time library
typedef duration < /*see rep below*/, ratio<60,1> > minutes;|minutes|Duration in minutes (class)|()||class|cpp11|<chrono>|header|Time library
typedef duration < /* see rep below */, nano > nanoseconds;|nanoseconds|Duration in nanoseconds (class)|()||class|cpp11|<chrono>|header|Time library
template < class Elem, unsigned long MaxCode = 0x10ffffUL, codecvt_mode Mode = (codecvt_mode)0 >\n\t  class codecvt_utf16 : public codecvt <Elem, char, mbstate_t>|codecvt_utf16|Convert UTF-16 (class template)|(Elem)|The internal character type, aliased as member intern_type. This shall be a wide character type: wchar_t, char16_t or char32_t.\n\t For 16bit-wide characters, conversions in of characters outside the Basic Multilingual Plane may cause conversion errors.\n\t The external character type in this facet is always char.|class template|cpp11|<codecvt>|header|Unicode conversion facets
template < class Elem, unsigned long MaxCode = 0x10ffffUL, codecvt_mode Mode = (codecvt_mode)0 >\n\t  class codecvt_utf8 : public codecvt <Elem, char, mbstate_t>|codecvt_utf8|Convert UTF-8 (class template)|(Elem)|The internal character type, aliased as member intern_type. This shall be a wide character type: wchar_t, char16_t or char32_t.\n\t For 16bit-wide characters, conversions in of characters outside the Basic Multilingual Plane may cause conversion errors.\n\t The external character type in this facet is always char.|class template|cpp11|<codecvt>|header|Unicode conversion facets
template < class Elem, unsigned long MaxCode = 0x10ffffUL, codecvt_mode Mode = (codecvt_mode)0 >\n\t  class codecvt_utf8_utf16 : public codecvt <Elem, char, mbstate_t>|codecvt_utf8_utf16|Convert between UTF-8 and UTF-16 (class template)|(Elem)|The internal character type, aliased as member intern_type. This shall be a wide character type: wchar_t, char16_t or char32_t.\n\t For 32bit-wide characters, conversions in of characters result in one UTF-16 code unit stored per wide character (as a 32-bit value).\n\t The external character type in this facet is always char.|class template|cpp11|<codecvt>|header|Unicode conversion facets
enum codecvt_mode {\n\t  consume_header = 4,\n\t  generate_header = 2,\n\t  little_endian = 1\n\t};|codecvt_mode|Codecvt mode (enum)|()||enum|cpp11|<codecvt>|header|Unicode conversion facets
template <class T> class complex;|complex|Complex number class (class template)|(T)|Type of both the real and imaginary components of the complex number.\n\t The effect of instantiating a complex with a T other than float, double or long double is undefined (certain library implementations may support it, but the resulting code is non-portable).|class template|cpp98 cpp11 folder|<complex>|header|Complex numbers library
template<class T> complex<T> conj (const complex<T>& x);|conj|Complex conjugate (function template)|(x)|Complex value.|function template|cpp98 cpp11|<complex>|header|Complex numbers library
template<class T> T imag (const complex<T>& x);|imag|Imaginary part of complex (function template)|(x)|Complex value.|function template|cpp98 cpp11|<complex>|header|Complex numbers library
template<class T> complex<T> polar (const T& rho, const T& theta = 0);|polar|Complex from polar components (function template)|(rho)|Magnitude (modulus) of the complex number.|function template|cpp98 cpp11|<complex>|header|Complex numbers library
template<class T> complex<T> proj (const complex<T>& x);|proj|Complex projection. (function template)|(x)|Complex value.|function template|cpp11|<complex>|header|Complex numbers library
exception_ptr current_exception() noexcept;|current_exception|Get smart pointer to current exception (function)|()|void|function|cpp11|<exception>|header|Standard exceptions
terminate_handler get_terminate() noexcept;|get_terminate|Get terminate handler function (function)|()|void|function|cpp11|<exception>|header|Standard exceptions
unexpected_handler get_unexpected() noexcept;|get_unexpected|Get unexpected handler function (function)|()|void|function|cpp11|<exception>|header|Standard exceptions
template <class E>\n\t  exception_ptr make_exception_ptr (E e) noexcept;|make_exception_ptr|Make exception_ptr (function template)|(e)|An object or reference.|function template|cpp11|<exception>|header|Standard exceptions
[[noreturn]] void rethrow_exception (exception_ptr p);|rethrow_exception|Rethrow exception (function)|(p)|An exception_ptr object pointing to an exception object.\n\t This argument shall not be a null exception_ptr.\n\texception_ptr is a pointer-like type that points to exceptions.|function|cpp11|<exception>|header|Standard exceptions
template <class T>\n\t  void rethrow_if_nested (const T& e);|rethrow_if_nested|Rethrow if nested (function)|(e)|An object or reference.\n\t If this is derived from nested_exception, the function throws the nested exception.|function|cpp11|<exception>|header|Standard exceptions
terminate_handler set_terminate (terminate_handler f) throw();|set_terminate|Set terminate handler function (function)|(f)|Function that takes no parameters and returns no value (void).\n\t The function shall terminate execution of the program without returning to the caller.\n\tterminate_handler is a function pointer type taking no parameters and returning void.|function|cpp98 cpp11|<exception>|header|Standard exceptions
unexpected_handler set_unexpected (unexpected_handler f) throw();|set_unexpected|Set unexpected handler function (function)|(f)|Function that takes no parameters and returns no value (void).\n\t The function shall not return. It shall either throw an exception or terminate.\n\tunexpected_handler is a function pointer type taking no parameters and returning void.|function|cpp98 cpp11|<exception>|header|Standard exceptions
[[noreturn]] template <class T>\n\t  void throw_with_nested (T&& e);|throw_with_nested|Throw with nested (function)|(e)|An object or reference of a non-union class not derived from nested_exception.|function|cpp11|<exception>|header|Standard exceptions
bool uncaught_exception() throw();|uncaught_exception|Return exception status (function)|()||function|cpp98 cpp11|<exception>|header|Standard exceptions
class bad_exception;|bad_exception|Exception thrown by unexpected handler (class)|()||class|cpp98 cpp11|<exception>|header|Standard exceptions
class nested_exception;|nested_exception|Nested exception class (class)|()||class|cpp11 folder|<exception>|header|Standard exceptions
typedef void (*terminate_handler)();|terminate_handler|Type of terminate handler function (type)|()||type|cpp98 cpp11|<exception>|header|Standard exceptions
typedef void (*unexpected_handler)();|unexpected_handler|Type of unexpected handler function (type)|()||type|cpp98 cpp11|<exception>|header|Standard exceptions
long-proto|bind|Bind function arguments (function template)|(fn)|A function object, pointer to function or pointer to member.\n\tFn shall have a decay type which is move-constructible from fn.|function template|cpp11|<functional>|header|Function objects
long-proto|cref|Construct reference_wrapper to const (function template)|(elem)|An lvalue reference, whose const reference is stored in the object.|function template|cpp11|<functional>|header|Function objects
template <class Ret, class T>\n\t  /* unspecified */ mem_fn (Ret T::* pm);|mem_fn|Convert member function to function object (function template)|(pm)|Pointer to a member function.|function template|cpp11|<functional>|header|Function objects
template <class Predicate>\n\t  unary_negate<Predicate> not1 (const Predicate& pred);|not1|Return negation of unary function object (function template)|(pred)|Unary function object of a class type with member argument_type defined.|function template|cpp98 cpp11|<functional>|header|Function objects
template <class Predicate>\n\t  binary_negate<Predicate> not2 (const Predicate& pred);|not2|Return negation of binary function object (function template)|(Predicate)|Binary function object derived from binary_function.|function template|cpp98 cpp11|<functional>|header|Function objects
template <class Predicate> class binary_negate;|binary_negate|Negate binary function object class (class template)|(Predicate)|A binary function object class, with members first_argument_type and second_argument_type defined.|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> function;     // undefined\n\ttemplate <class Ret, class... Args> class function<Ret(Args...)>;|function|Function wrapper (class template)|(T)|A type.\n\t The generic template is not defined. Only the one that specializes T as the function type Ret(Args...).|class template|cpp11 folder|<functional>|header|Function objects
template <class T> class reference_wrapper;|reference_wrapper|Reference wrapper (class template)|(T)|Type of the referred element.\n\t This can either be an object or a function.|class template|cpp11 folder|<functional>|header|Function objects
template <class Predicate> class unary_negate;|unary_negate|Negate unary function object class (class template)|(Predicate)|A unary function object class, with member argument_type defined.|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct bit_and;|bit_and|Bitwise AND function object class (class template)|(T)|Type of the arguments and return type of the functional call.\n\t The type shall support the operation (operator&).|class template|cpp11|<functional>|header|Function objects
template <class T> struct bit_or;|bit_or|Bitwise OR function object class (class template)|(T)|Type of the arguments and return type of the functional call.\n\t The type shall support the operation (operator|).|class template|cpp11|<functional>|header|Function objects
template <class T> struct bit_xor;|bit_xor|Bitwise XOR function object class (class template)|(T)|Type of the arguments and return type of the functional call.\n\t The type shall support the operation (operator^).|class template|cpp11|<functional>|header|Function objects
template <class T> struct divides;|divides|Division function object class (class template)|(T)|Type of the arguments and return type of the functional call.\n\t The type shall support the operation (operator/).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct equal_to;|equal_to|Function object class for equality comparison (class template)|(T)|Type of the arguments to compare by the functional call.\n\t The type shall support the operation (operator==).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct greater_equal;|greater_equal|Function object class for greater-than-or-equal-to comparison (class template)|(T)|Type of the arguments to compare by the functional call.\n\t The type shall support the operation (operator>=).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct less_equal;|less_equal|Function object class for less-than-or-equal-to comparison (class template)|(T)|Type of the arguments to compare by the functional call.\n\t The type shall support the operation (operator<=).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct logical_and;|logical_and|Logical AND function object class (class template)|(T)|Type of the arguments passed to the functional call.\n\t The type shall support the operation (operator&&).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct logical_not;|logical_not|Logical NOT function object class (class template)|(T)|Type of the argument passed to the functional call.\n\t The type shall support the operation (operator!).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct logical_or;|logical_or|Logical OR function object class (class template)|(T)|Type of the arguments passed to the functional call.\n\t The type shall support the operation (operator||).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct minus;|minus|Subtraction function object class (class template)|(T)|Type of the arguments and return type of the functional call.\n\t The type shall support the operation (binary operator-).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct modulus;|modulus|Modulus function object class (class template)|(T)|Type of the arguments and return type of the functional call.\n\t The type shall support the operation (operator%).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct multiplies;|multiplies|Multiplication function object class (class template)|(T)|Type of the arguments and return type of the functional call.\n\t The type shall support the operation (operator*).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct not_equal_to;|not_equal_to|Function object class for non-equality comparison (class template)|(T)|Type of the arguments to compare by the functional call.\n\t The type shall support the operation (operator!=).|class template|cpp98 cpp11|<functional>|header|Function objects
template <class T> struct plus;|plus|Addition function object class (class template)|(T)|Type of the arguments and return type of the functional call.\n\t The type shall support the operation (operator+).|class template|cpp98 cpp11|<functional>|header|Function objects
class bad_function_call;|bad_function_call|Exception thrown on bad call (class)|()||class|cpp11|<functional>|header|Function objects
template <class T> struct hash;|hash|Default hash function object class (class template)|()||class template|cpp11|<functional>|header|Function objects
template <class T> struct is_bind_expression;|is_bind_expression|Is bind expression (class template)|(T)|A type.|class template|cpp11|<functional>|header|Function objects
template <class T> struct is_placeholder;|is_placeholder|Is placeholder (class template)|(T)|A type.|class template|cpp11|<functional>|header|Function objects
namespace placeholders {\n\t  extern /* unspecified */ _1;\n\t  extern /* unspecified */ _2;\n\t  extern /* unspecified */ _3;\n\t  // ...\n\t}|placeholders|Bind argument placeholders (namespace)|()||namespace|cpp11|<functional>|header|Function objects
template <class Arg1, class Arg2, class Result> struct binary_function;|binary_function|Binary function object base class (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
template <class Operation, class T>\n\t  binder1st<Operation> bind1st (const Operation& op, const T& x);|bind1st|Return function object with first parameter bound (function template)|()||function template|cpp98 cpp11|<functional>|header|Function objects
template <class Operation, class T>\n\t  binder2nd<Operation> bind2nd (const Operation& op, const T& x);|bind2nd|Return function object with second parameter bound (function template)|()||function template|cpp98 cpp11|<functional>|header|Function objects
template <class Operation> class binder1st;|binder1st|Generate function object class with 1st parameter bound (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
template <class Operation> class binder2nd;|binder2nd|Generate function object class with 2nd parameter bound (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
template <class S, class T, class A> class const_mem_fun1_ref_t;|const_mem_fun1_ref_t|Generate function object class from single-parameter const member (reference version) (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
template <class S, class T, class A> class const_mem_fun1_t;|const_mem_fun1_t|Generate function object class from single-parameter const member (pointer version) (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
template <class S, class T> class const_mem_fun_ref_t;|const_mem_fun_ref_t|Generate function object class from const parameterless member (reference version) (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
template <class S, class T> class const_mem_fun_t;|const_mem_fun_t|Generate function object class from const parameterless member (pointer version) (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
template <class Arg1, class Arg2, class Result> class pointer_to_binary_function;|pointer_to_binary_function|Generate binary function object class from pointer (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
template <class Arg, class Result> class pointer_to_unary_function;|pointer_to_unary_function|Generate unary function object class from pointer (class template)|()||class template|cpp98 cpp11|<functional>|header|Function objects
long-proto|ptr_fun|Convert function pointer to function object (function template)|()||function template|cpp98 cpp11|<functional>|header|Function objects
template<class T> class initializer_list;|initializer_list|Initializer list (class template)|(T)|Type of the elements.\n\t Aliased as member type initializer_list::value_type.|class template|cpp11 folder|<initializer_list>|header|Initializer list
long-proto|iterator|Iterator base class (class template)|(Category)|Category to which the iterator belongs to. It must be one of the following iterator tags:\n\t\n\t\n\titerator tag\n\t\n\tCategory of iterators\n\t\n\tinput_iterator_tagInput Iterator\n\toutput_iterator_tagOutput Iterator\n\tforward_iterator_tagForward Iterator\n\tbidirectional_iterator_tagBidirectional Iterator\n\trandom_access_iterator_tagRandom-access Iterator|class template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class Iterator> class iterator_traits;\n\ttemplate <class T> class iterator_traits<T*>;\n\ttemplate <class T> class iterator_traits<const T*>;|iterator_traits|Iterator traits (class template)|()||class template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class InputIterator, class Distance>\n\t  void advance (InputIterator& it, Distance n);|advance|Advance iterator (function template)|(it)|Iterator to be advanced.\n\tInputIterator shall be at least an input iterator.|function template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class Container>\n\t  back_insert_iterator<Container> back_inserter (Container& x);|back_inserter|Construct back insert iterator (function template)|(x)|Container on which the iterator will insert new elements.\n\tContainer should be a container class with member push_back defined.|function template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class Container>  auto begin (Container& cont) -> decltype (cont.begin());template <class Container>  auto begin (const Container& cont) -> decltype (cont.begin());|begin|Iterator to beginning (function template)|(cont)|An object of a class type for which member begin is defined.|function template|cpp11|<iterator>|header|Iterator definitions
template<class InputIterator>\n\t  typename iterator_traits<InputIterator>::difference_type\n\t    distance (InputIterator first, InputIterator last);|distance|Return distance between iterators (function template)|(first)|Iterator pointing to the initial element.|function template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class Container>\n\t  front_insert_iterator<Container> front_inserter (Container& x);|front_inserter|Constructs front insert iterator (function template)|(x)|Container on which the iterator will insert new elements.\n\tContainer should be a container class with member push_front defined.|function template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class Iterator>  move_iterator<Iterator> make_move_iterator (const Iterator& it);|make_move_iterator|Construct move iterator (function template)|(it)|An iterator.\n\tIterator is any type of input iterator.|function template|cpp11|<iterator>|header|Iterator definitions
struct bidirectional_iterator_tag {}|bidirectional_iterator_tag|Bidirectional iterator category (class)|()||class|cpp98 cpp11|<iterator>|header|Iterator definitions
struct forward_iterator_tag {};|forward_iterator_tag|Forward iterator category (class)|()||class|cpp98 cpp11|<iterator>|header|Iterator definitions
struct input_iterator_tag {};|input_iterator_tag|Input iterator category (class)|()||class|cpp98 cpp11|<iterator>|header|Iterator definitions
struct output_iterator_tag {};|output_iterator_tag|Output iterator category (class)|()||class|cpp98 cpp11|<iterator>|header|Iterator definitions
struct random_access_iterator_tag {};|random_access_iterator_tag|Random-access iterator category (class)|()||class|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class Container> class back_insert_iterator;|back_insert_iterator|Back insert iterator (class template)|(Container)|A container class with member push_back defined (such as the standard containers vector, deque and list).|class template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class Container> class front_insert_iterator;|front_insert_iterator|Front insert iterator (class template)|(Container)|A container class with member push_front defined (such as the standard containers deque and list).|class template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class charT, class traits=char_traits<charT> >  class istreambuf_iterator;|istreambuf_iterator|Input stream buffer iterator (class template)|(charT)|Character type. This is the first template parameter in the basic_streambuf object.|class template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class T, class charT=char, class traits=char_traits<charT>, \n\t class Distance = ptrdiff_t>\n\t  class istream_iterator;|istream_iterator|Istream iterator (class template)|(T)|Element type for the iterator: The type of elements extracted from the stream|class template|cpp98 cpp11 folder|<iterator>|header|Iterator definitions
template <class charT, class traits=char_traits<charT> >\n\t  class ostreambuf_iterator;|ostreambuf_iterator|Output stream buffer iterator (class template)|(charT)|Character type. This is the first template parameter in the basic_streambuf object.|class template|cpp98 cpp11|<iterator>|header|Iterator definitions
template <class T, class charT=char, class traits=char_traits<charT> >\n\t  class ostream_iterator;|ostream_iterator|Ostream iterator (class template)|(T)|Element type for the iterator: The type of elements inserted into the stream|class template|cpp98 cpp11 folder|<iterator>|header|Iterator definitions
template <class Iterator> class reverse_iterator;|reverse_iterator|Reverse iterator (class template)|(Iterator)|A bidirectional iterator type.\n\t Or a random-access iterator, if an operator that requires such a category of iterators is used.|class template|cpp98 cpp11 folder|<iterator>|header|Iterator definitions
enum float_denorm_style;|float_denorm_style|Enum type for float denormalization style (type)|()||type|cpp98 cpp11|<limits>|header|Numeric limits
enum float_round_style;|float_round_style|Enum type for float rounding style (type)|()||type|cpp98 cpp11|<limits>|header|Numeric limits
template <class T> numeric_limits;|numeric_limits|Numeric limits type (class template)|(T)|A type.\n\t If this is a fundamental arithmetic type, the members of the class describe its properties.|class template|cpp98 cpp11|<limits>|header|Numeric limits
template <class Facet> bool has_facet (const locale& loc) throw();|has_facet|Check if locale has facet (function template)|(loc)|locale object.|function template|cpp98 cpp11|<locale>|header|Localization library
template <class Facet> const Facet& use_facet (const locale& loc);|use_facet|Access facet of locale (function template)|(loc)|locale object.|function template|cpp98 cpp11|<locale>|header|Localization library
template < class Codecvt,\n\t  class Elem = wchar_t,\n\t  class Tr = char_traits<Elem> > class wbuffer_convert\n\t  : public std::basic_streambuf<Elem,Tr>;|wbuffer_convert|no-Description (other)|(Codecvt)|Type of the conversion object: This shall be a class with the same properties as the codecvt locale facet, such as one of the standard classes defined in header <codecvt>.|other|cpp11 folder|<locale>|header|Localization library
template < class Codecvt,\n\t  class Elem = wchar_t,\n\t  class Wide_alloc = std::allocator<Elem>,\n\t  class Byte_alloc = std::allocator<char> > class wstring_convert;|wstring_convert|no-Description (other)|(Codecvt)|Type of the conversion object: This shall be a class with the same properties as the codecvt locale facet, such as one of the standard classes defined in header <codecvt>.|other|cpp11 folder|<locale>|header|Localization library
class codecvt_base;|codecvt_base|Base class for codecvt (class)|()||class|cpp98 cpp11|<locale>|header|Localization library
template <class internT, class externT, class stateT> class codecvt_byname;|codecvt_byname|Convert codeset facet (class template)|()||class template|cpp98 cpp11|<locale>|header|Localization library
template <class charT> class collate;|collate|Facet to compare and hash strings (class template)|(charT)|Character type.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
template <class charT> class collate_byname;|collate_byname|Facet to compare and hash strings (class template)|()||class template|cpp98 cpp11|<locale>|header|Localization library
class ctype_base;|ctype_base|Base class for ctype (class)|()||class|cpp98 cpp11|<locale>|header|Localization library
template <class charT> class ctype_byname;|ctype_byname|Character type facet (class template)|()||class template|cpp98 cpp11|<locale>|header|Localization library
template <class charT> class messages;|messages|Facet to access message catalogs (class template)|(charT)|Character type.\n\t This is the type of characters for the returned messages.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
class messages_base;|messages_base|no-Description (other)|()||other|cpp98 cpp11|<locale>|header|Localization library
template <class charT> class messages_byname;|messages_byname|Facet to access message catalogs  (class template)|()||class template|cpp98 cpp11|<locale>|header|Localization library
template <class charT, bool International = false> class moneypunct;|moneypunct|Monetary punctuation facet (class template)|(charT)|Character type.\n\t This is the type of characters used to produce the representation.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
template <class charT, bool International = false> class numpunct_byname;|moneypunct_byname|Monetary punctuation facet (class template)|()||class template|cpp98 cpp11|<locale>|header|Localization library
class money_base;|money_base|Base class for moneypunct (class)|()||class|cpp98 cpp11|<locale>|header|Localization library
template <class charT, class InputIterator = istreambuf_iterator<charT> >\n\t  class money_get;|money_get|Facet to parse monetary expressions (class template)|(charT)|Character type: the type of the characters in the sequence to interpret.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
template <class charT, class OutputIterator = ostreambuf_iterator<charT> > class money_put;|money_put|Facet to format monetary expressions (class template)|(charT)|Character type: the type of the characters in the sequence to write.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
template <class charT> class numpunct;|numpunct|Numeric punctuation facet (class template)|(charT)|Character type.\n\t This is the type of the representation, not the type of the numerical value: the formatting information is common for all numeric types.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
template <class charT> class numpunct_byname;|numpunct_byname|Numeric puntuation facet (class template)|()||class template|cpp98 cpp11|<locale>|header|Localization library
template <class charT, class InputIterator = istreambuf_iterator<charT> > class num_get;|num_get|Facet to parse numeric values (class template)|(charT)|Character type: the type of the characters in the sequence to interpret.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
template <class charT, class OutputIterator = ostreambuf_iterator<charT> > class num_put;|num_put|Facet to format numeric values (class template)|(charT)|Character type: the type of the characters in the sequence to write.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
class time_base;|time_base|Base class for time_get (class)|()||class|cpp98 cpp11|<locale>|header|Localization library
template <class charT, class InputIterator = istreambuf_iterator<charT> >\n\t  class time_get;|time_get|Facet to parse dates and times (class template)|(charT)|Character type: the type of the characters in the sequence to interpret.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
template <class charT, class InputIterator = istreambuf_iterator<charT> >  class time_get_byname;|time_get_byname|Facet to parse dates and times (class template)|()||class template|cpp98 cpp11|<locale>|header|Localization library
template <class charT, class OutputIterator = ostreambuf_iterator<charT> >\n\t  class time_put;|time_put|Facet to format dates and times (class template)|(charT)|Character type: the type of the characters in the sequence to write.\n\t Aliased as member char_type.|class template|cpp98 cpp11 folder|<locale>|header|Localization library
template <class charT, class OutputIterator = ostreambuf_iterator<charT> >  class time_put_byname;|time_put_byname|Facet to format dates and times (class template)|()||class template|cpp98 cpp11|<locale>|header|Localization library
template <class T> class allocator;|allocator|Default allocator (class template)|(T)|Type of the elements allocated by the object (aliased as member type value_type).|class template|cpp98 cpp11 folder|<memory>|header|Memory elements
struct allocator_arg_t {};|allocator_arg_t|Allocator arg type (class)|()||class|cpp11|<memory>|header|Memory elements
template <class Alloc> struct allocator_traits;|allocator_traits|Allocator traits (class template)|(Alloc)|The allocator type, aliased as member type allocator_type.|class template|cpp11 folder|<memory>|header|Memory elements
template <class X> class auto_ptr;|auto_ptr|Automatic Pointer [deprecated] (class template)|(X)|The type of the managed object, aliased as member type element_type.|class template|cpp98 cpp11 folder|<memory>|header|Memory elements
template <class Y> struct auto_ptr_ref;|auto_ptr_ref|Reference to automatic pointer (class template)|()||class template|cpp98 cpp11|<memory>|header|Memory elements
class bad_weak_ptr: public exception;|bad_weak_ptr|no-Description (other)|()||other|cpp11 folder|<memory>|header|Memory elements
non-specialized\n\ttemplate <class T> class default_delete;\n\t\n\t\n\t\n\tarray specialization\n\ttemplate <class T> class default_delete<T[]>;|default_delete|Default deleter (class template)|(T)|The type of object to be deleted.|class template|cpp11 folder|<memory>|header|Memory elements
template <class T> class enable_shared_from_this;|enable_shared_from_this|Enable shared_from_this (class template)|(T)|Full type of the pointed class (generally the final class inheriting from this).\n\t The shared_ptr objects created will be of type shared_ptr<T>.|class template|cpp11 folder|<memory>|header|Memory elements
template <class Ptr> struct owner_less;\n\ttemplate <class T> struct owner_less<shared_ptr<T>>;\n\ttemplate <class T> struct owner_less<weak_ptr<T>>;|owner_less|Owner-based less-than operation (class template)|(Ptr)|The type of the managed pointers to be ordered according to owned resource, aliased as member types first_argument_type and second_argument_type.|class template|cpp11|<memory>|header|Memory elements
template <class Ptr> class pointer_traits;    // template\n\ttemplate <class T> class pointer_traits<T*>;  // template specialization|pointer_traits|Pointer traits (class template)|(Ptr)|Pointer-like type.|class template|cpp11 folder|<memory>|header|Memory elements
template <class OutputIterator, class T>\n\t  class raw_storage_iterator;|raw_storage_iterator|Raw storage iterator (class template)|(OutputIterator)|Underlying iterator type.|class template|cpp98 cpp11|<memory>|header|Memory elements
template <class T> class shared_ptr;|shared_ptr|Shared pointer (class template)|(T)|The type of the managed object, aliased as member type element_type.|class template|cpp11 folder|<memory>|header|Memory elements
non-specialized\n\ttemplate <class T, class D = default_delete<T>> class unique_ptr;\n\t\n\t\n\t\n\tarray specialization\n\ttemplate <class T, class D> class unique_ptr<T[],D>;|unique_ptr|Unique pointer (class template)|(T)|The type of the managed object, aliased as member type element_type.|class template|cpp11 folder|<memory>|header|Memory elements
template <class T, class Alloc> struct uses_allocator;|uses_allocator|no-Description (other)|(T)|A type.|other|cpp11|<memory>|header|Memory elements
enum class pointer_safety { relaxed, preferred, strict };|pointer_safety|Pointer safety enum (enum class)|()||enum class|cpp11|<memory>|header|Memory elements
template <class T> T* addressof (T& ref) noexcept;|addressof|Address of object or function (function template)|(ref)|An object or function.|function template|cpp11|<memory>|header|Memory elements
template <class T, class Alloc, class... Args>\n\t  shared_ptr<T> allocate_shared (const Alloc& alloc, Args&&... args);|allocate_shared|Allocate shared_ptr (function template)|(alloc)|An allocator object.\n\tAlloc is a type for which allocator_traits is well defined.|function template|cpp11|<memory>|header|Memory elements
template <class T, class U>\n\t  shared_ptr<T> const_pointer_cast (const shared_ptr<U>& sp) noexcept;|const_pointer_cast|Const cast of shared_ptr (function template)|(sp)|A shared_pointer.\n\tU* shall be convertible to T* using const_cast.|function template|cpp11|<memory>|header|Memory elements
void declare_no_pointers (char* p, size_t n);|declare_no_pointers|Declare memory block as containing no pointers (function)|(p)|Pointer to the first byte of the range to be declared.\n\t No bytes of the specified range shall have been registered by a previous this function and not released.|function|cpp11|<memory>|header|Memory elements
void declare_reachable (void* p);|declare_reachable|Declare pointer as reachable (function)|(p)|A safely-derived pointer, or a null pointer.\n\t If a null pointer, the call has no effect.|function|cpp11|<memory>|header|Memory elements
template <class T, class U>\n\t  shared_ptr<T> dynamic_pointer_cast (const shared_ptr<U>& sp) noexcept;|dynamic_pointer_cast|Dynamic cast of shared_ptr (function template)|(sp)|A shared_ptr.\n\tU* shall be convertible to T* using dynamic_cast.|function template|cpp11|<memory>|header|Memory elements
template <class D, class T>\n\t  D* get_deleter (const shared_ptr<T>& sp) noexcept;|get_deleter|Get deleter from shared_ptr (function template)|(sp)|A shared_ptr object.|function template|cpp11|<memory>|header|Memory elements
pointer_safety get_pointer_safety() noexcept;|get_pointer_safety|Get pointer safety (function)|()|void|function|cpp11|<memory>|header|Memory elements
template <class T>  pair <T*,ptrdiff_t> get_temporary_buffer ( ptrdiff_t n );|get_temporary_buffer|Get block of temporary memory (function template)|(n)|Number of elements of type T for which temporary memory is requested.\n\tptrdiff_t is an integral type.|function template|cpp98 cpp11|<memory>|header|Memory elements
template <class T, class... Args>\n\t  shared_ptr<T> make_shared (Args&&... args);|make_shared|Make shared_ptr (function template)|(args)|List of elements passed to T's constructor.\n\tArgs is a list of zero or more types.|function template|cpp11|<memory>|header|Memory elements
template <class T> void return_temporary_buffer (T* p);|return_temporary_buffer|Return block of temporary memory (function template)|(p)|Pointer to a block of temporary memory returned by a previous call to get_temporary_buffer.|function template|cpp98 cpp11|<memory>|header|Memory elements
template <class T, class U>\n\t  shared_ptr<T> static_pointer_cast (const shared_ptr<U>& sp) noexcept;|static_pointer_cast|Static cast of shared_ptr (function template)|(sp)|A shared_pointer.\n\tU* shall be convertible to T* using static_cast.|function template|cpp11|<memory>|header|Memory elements
void undeclare_no_pointers (char* p, size_t n);|undeclare_no_pointers|Undeclare memory block as containing no pointers (function)|(p)|Pointer to the first byte of the range.\n\t This shall be the same value passed to a previous call to declare_pointers.|function|cpp11|<memory>|header|Memory elements
template <class T> T* undeclare_reachable (T* p);|undeclare_reachable|Undeclare pointer as reachable (function template)|(p)|A pointer pointing to an object previously declared as reachable with declare_reachable.|function template|cpp11|<memory>|header|Memory elements
template <class InputIterator, class ForwardIterator>\n\t  ForwardIterator uninitialized_copy ( InputIterator first, InputIterator last,\n\t      ForwardIterator result );|uninitialized_copy|Copy block of memory (function template)|(first, last)|Input iterators to the initial and final positions in a sequence to be copied. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<memory>|header|Memory elements
template <class InputIterator, class Size, class ForwardIterator>\n\t  ForwardIterator uninitialized_copy_n ( InputIterator first, Size n,\n\t        ForwardIterator result );|uninitialized_copy_n|Copy block of memory (function template)|(first)|Forward iterator to the initial position in an uninitialized sequence of at least n elements.|function template|cpp11|<memory>|header|Memory elements
template <class ForwardIterator, class T>\n\t  void uninitialized_fill (ForwardIterator first, ForwardIterator last,\n\t     const T& x);|uninitialized_fill|Fill block of memory (function template)|(first, last)|Forward iterators to the initial and final positions in an uninitialized sequence. The range affected is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<memory>|header|Memory elements
template <class ForwardIterator, class Size, class T>  void uninitialized_fill_n (ForwardIterator first, Size n, const T& x);|uninitialized_fill_n|Fill block of memory (function template)|(first)|Forward iterator to the initial position in an uninitialized sequence of at least n elements.|function template|cpp98 cpp11|<memory>|header|Memory elements
void operator delete (void* ptr) throw();|operator delete|Deallocate storage space (function)|(ptr)|A pointer to the memory block to be released, type-casted to a void*.\n\t If this is a null-pointer, the function does nothing.\n\t\n\t\n\tC++98\n\t\n\t\n\tC++11\n\t\n\t\n\t\n\t\n\t\n\tIf not null, this pointer value should have been returned by a previous call to operator new, and have not yet been released by a previous call to this function.\n\t\n\t\n\tIf not null, this pointer value should have been returned by a previous call to operator new, and have not yet been released by a previous call to this function.\n\tIf the implementation has strict pointer safety, this pointer shall also be a safely-derived pointer.|function|cpp98 cpp11|<new>|header|Dynamic memory
void operator delete[] (void* ptr) throw();|operator delete[]|Deallocate storage space of array (function)|(ptr)|A pointer to the memory block to be released, type-casted to a void*.\n\t If this is a null-pointer, the function does nothing.\n\t\n\t\n\tC++98\n\t\n\t\n\tC++11\n\t\n\t\n\t\n\t\n\t\n\tOtherwise, this pointer value should have been returned by a previous call to operator new[], and have not yet been released by a previous call to this function.\n\t\n\t\n\tOtherwise, this pointer value should have been returned by a previous call to operator new[], and have not yet been released by a previous call to this function.\n\tIf the implementation has strict pointer safety, this pointer shall also be a safely-derived pointer.|function|cpp98 cpp11|<new>|header|Dynamic memory
void* operator new (std::size_t size) throw (std::bad_alloc);|operator new|Allocate storage space (function)|(size)|Size in bytes of the requested memory block.\n\t This is the size of the type specifier in the new-expression when called automatically by such an expression.\n\t If this argument is zero, the function still returns a distinct non-null pointer on success (although dereferencing this pointer leads to undefined behavior).\n\tsize_t is an integral type.|function|cpp98 cpp11|<new>|header|Dynamic memory
void* operator new[] (std::size_t size) throw (std::bad_alloc);|operator new[]|Allocate storage space for array (function)|(size)|Size in bytes of the requested memory block.\n\t This is, at least, the size of array type specifier in the new expression when called automatically by such an expression (it can be greater, if the the implementation uses additional storage for array types).\n\t If this argument is zero, the function still returns a distinct non-null pointer on success (although dereferencing this pointer leads to undefined behavior).\n\tsize_t is an integral type.|function|cpp98 cpp11|<new>|header|Dynamic memory
new_handler get_new_handler() noexcept;|get_new_handler|Get new handler function (function)|()|void|function|cpp11|<new>|header|Dynamic memory
new_handler set_new_handler (new_handler new_p) throw();|set_new_handler|Set new handler function (function)|(new_p)|Function that takes no arguments and returns no value (void).\n\t The function can make more storage available, or throw an exception, or terminate the program.\n\t If this is a null-pointer, the new-handler function is reset to none (and bad_alloc is thrown instead).\n\tnew_handler is a function pointer type for functions that take no arguments and return no value.|function|cpp98 cpp11|<new>|header|Dynamic memory
class bad_alloc;|bad_alloc|Exception thrown on failure allocating memory (class)|()||class|cpp98 cpp11|<new>|header|Dynamic memory
class bad_array_new_length;|bad_array_new_length|Exception on bad array length (class)|()||class|cpp11|<new>|header|Dynamic memory
struct nothrow_t {};|nothrow_t|Nothrow type (type)|()||type|cpp98 cpp11|<new>|header|Dynamic memory
long-proto|accumulate|Accumulate values in range (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<numeric>|header|Generalized numeric operations
long-proto|adjacent_difference|Compute adjacent difference of range (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<numeric>|header|Generalized numeric operations
long-proto|inner_product|Compute cumulative inner product of range (function template)|(first1, last1)|Input iterators to the initial and final positions in the first sequence. The range used is [first1,last1), which contains all the elements between first1 and last1, including the element pointed by first1 but not the element pointed by last1.|function template|cpp98 cpp11|<numeric>|header|Generalized numeric operations
template <class ForwardIterator, class T>\n\t  void iota (ForwardIterator first, ForwardIterator last, T val);|iota|Store increasing sequence (function template)|(first, last)|Forward iterators to the initial and final positions of the sequence to be written. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp11|<numeric>|header|Generalized numeric operations
long-proto|partial_sum|Compute partial sums of range (function template)|(first, last)|Input iterators to the initial and final positions in a sequence. The range used is [first,last), which contains all the elements between first and last, including the element pointed by first but not the element pointed by last.|function template|cpp98 cpp11|<numeric>|header|Generalized numeric operations
class bernoulli_distribution;|bernoulli_distribution|Bernoulli distribution (class)|()||class|cpp11 folder|<random>|header|Random
template <class IntType = int> class binomial_distribution;|binomial_distribution|Binomial distribution (class template)|(IntType)|An integer type. Aliased as member type result_type.\n\t By default, this is int.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class cauchy_distribution;|cauchy_distribution|Cauchy distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class chi_squared_distribution;|chi_squared_distribution|Chi-squared distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class IntType = int> class discrete_distribution;|discrete_distribution|Discrete distribution (class template)|(IntType)|An integer type. Aliased as member type result_type.\n\t By default, this is int.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class exponential_distribution;|exponential_distribution|Exponential distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class extreme_value_distribution;|extreme_value_distribution|Extreme Value distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class fisher_f_distribution;|fisher_f_distribution|Fisher F-distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class gamma_distribution;|gamma_distribution|Gamma distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class IntType = int> class geometric_distribution;|geometric_distribution|Geometric distribution (class template)|(IntType)|An integer type. Aliased as member type result_type.\n\t By default, this is int.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class lognormal_distribution;|lognormal_distribution|Lognormal distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class IntType = int> class negative_binomial_distribution;|negative_binomial_distribution|Negative binomial distribution (class template)|(IntType)|An integer type. Aliased as member type result_type.\n\t By default, this is int.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class piecewise_constant_distribution;|piecewise_constant_distribution|Piecewise constant distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class piecewise_linear_distribution;|piecewise_linear_distribution|Piecewise linear distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class IntType = int> class poisson_distribution;|poisson_distribution|Poisson distribution (class template)|(IntType)|An integer type. Aliased as member type result_type.\n\t By default, this is int.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class student_t_distribution;|student_t_distribution|Student T-Distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class IntType = int> class uniform_int_distribution;|uniform_int_distribution|Uniform discrete distribution (class template)|(IntType)|An integer type. Aliased as member type result_type.\n\t By default, this is int.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class uniform_real_distribution;|uniform_real_distribution|Uniform real distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
template <class RealType = double> class weibull_distribution;|weibull_distribution|Weibull distribution (class template)|(RealType)|A floating-point type. Aliased as member type result_type.\n\t By default, this is double.|class template|cpp11 folder|<random>|header|Random
no-proto|default_random_engine|Default random engine (class)|()||class|cpp11|<random>|header|Random
template <class Engine, size_t p, size_t r>\n\tclass discard_block_engine;|discard_block_engine|Discard-block random number engine adaptor (class template)|(Engine)|A random number engine type. All standard generators, except random_device, are random number engine types.|class template|cpp11 folder|<random>|header|Random
template <class Engine, size_t w, class UIntType>\n\tclass independent_bits_engine;|independent_bits_engine|Independent-bits random number engine adaptor (class template)|(Engine)|A random number engine type. All standard generators, except random_device, are random number engine types.|class template|cpp11 folder|<random>|header|Random
typedef shuffle_order_engine <minstd_rand0,256> knuth_b;|knuth_b|Knuth-B generator (class)|()||class|cpp11|<random>|header|Random
template <class UIntType, UIntType a, UIntType c, UIntType m>\n\tclass linear_congruential_engine;|linear_congruential_engine|Linear congruential random number engine (class template)|(UIntType)|An unsigned integer type.\n\t Values produced by the engine are of this type.|class template|cpp11 folder|<random>|header|Random
template <class UIntType, size_t w, size_t n, size_t m, size_t r,\n\t UIntType a, size_t u, UIntType d, size_t s,\n\t UIntType b, size_t t,\n\t UIntType c, size_t l, UIntType f>\n\t  class mersenne_twister_engine;|mersenne_twister_engine|Mersenne twister random number engine (class template)|(UIntType)|An unsigned integer type.\n\t Values produced by the engine are of this type.|class template|cpp11 folder|<random>|header|Random
typedef linear_congruential_engine<uint_fast32_t, 48271, 0, 2147483647> minstd_rand;|minstd_rand|Minimal Standard minstd_rand generator (class)|()||class|cpp11|<random>|header|Random
typedef linear_congruential_engine<uint_fast32_t, 16807, 0, 2147483647> minstd_rand0;|minstd_rand0|Minimal Standard minstd_rand0 generator (class)|()||class|cpp11|<random>|header|Random
typedef mersenne_twister_engine<uint_fast32_t,\n\t  32,624,397,31,0x9908b0df,11,0xffffffff,7,0x9d2c5680,15,0xefc60000,18,1812433253>\n\t  mt19937;|mt19937|Mersenne Twister 19937 generator (class)|()||class|cpp11|<random>|header|Random
typedef mersenne_twister_engine<uint_fast64_t,\n\t  64,312,156,31,0xb5026f5aa96619e9,\n\t  29,0x5555555555555555,\n\t  17,0x71d67fffeda60000,\n\t  37,0xfff7eee000000000,\n\t  43,6364136223846793005> mt19937_64;|mt19937_64|Mersene Twister 19937 generator (64 bit) (class)|()||class|cpp11|<random>|header|Random
class random_device;|random_device|True random number generator (class)|()||class|cpp11 folder|<random>|header|Random
typedef discard_block_engine <ranlux24_base, 223, 23> ranlux24;|ranlux24|Ranlux 24 generator (class)|()||class|cpp11|<random>|header|Random
typedef subtract_with_carry_engine <uint_fast32_t, 24, 10, 24> ranlux24_base;|ranlux24_base|Ranlux 24 base generator (class)|()||class|cpp11|<random>|header|Random
typedef discard_block_engine <ranlux48_base, 389, 11> ranlux48;|ranlux48|Ranlux 48 generator (class)|()||class|cpp11|<random>|header|Random
typedef subtract_with_carry_engine <uint_fast64_t, 48, 5, 12> ranlux48_base;|ranlux48_base|Ranlux 48 base generator (class)|()||class|cpp11|<random>|header|Random
template <class Engine, size_t k> class shuffle_order_engine;|shuffle_order_engine|Shuffle-order random number engine adaptor (class template)|(Engine)|A random number engine type. All standard generators, except random_device, are random number engine types.|class template|cpp11 folder|<random>|header|Random
template <class UIntType, size_t w, size_t s, size_t r>\n\tclass subtract_with_carry_engine;|subtract_with_carry_engine|Subtract-with-carry random number engine (class template)|(UIntType)|An unsigned integer type.\n\t Values produced by the engine are of this type.|class template|cpp11 folder|<random>|header|Random
template <class RealType, size_t bits, class URNG>\n\t  RealType generate_canonical (URNG& g);|generate_canonical|Generate canonical numbers (function template)|(RealType)|A floating-point type.\n\t The function returns a value of this type.|function template|cpp11|<random>|header|Random
class seed_seq;|seed_seq|Seed sequence (class)|()||class|cpp11 folder|<random>|header|Random
template <class R1, class R2> ratio_add;|ratio_add|Add two ratios (class template)|(R1,R2)|ratio types to be added.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_divide;|ratio_divide|Divide ratios (class template)|(R1,R2)|ratio types to be divided.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_equal;|ratio_equal|Compare ratios (class template)|(R1,R2)|ratio types to be compared.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_greater;|ratio_greater|Compare ratios for greater than inequality (class template)|(R1,R2)|ratio types to be compared.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_greater_equal;|ratio_greater_equal|Compare ratios for equality or greater-than inequality (class template)|(R1,R2)|ratio types to be compared.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_less;|ratio_less|Compare ratios for less-than inequality (class template)|(R1,R2)|ratio types to be compared.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_less_equal;|ratio_less_equal|Compare ratios for equality or less-than inequality (class template)|(R1,R2)|ratio types to be compared.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_multiply;|ratio_multiply|Multiply two ratios (class template)|(R1,R2)|ratio types to be multiplied.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_not_equal;|ratio_not_equal|Compare ratios for inequality (class template)|(R1,R2)|ratio types to be compared.|class template|cpp11|<ratio>|header|Ratio header
template <class R1, class R2> ratio_subtract;|ratio_subtract|Subtract ratios (class template)|(R1,R2)|ratio types to be subtracted.|class template|cpp11|<ratio>|header|Ratio header
no-proto|ECMAScript syntax|ECMAScript regular expressions pattern syntax (syntax specifications)|()||syntax specifications|cpp11|<regex>|header|Regular Expressions
no-proto|regex_constants|regex constants (namespace)|()||namespace|cpp11|<regex>|header|Regular Expressions
template <class charT, class traits = regex_traits<charT> > class basic_regex;|basic_regex|Regular expression (class template)|(charT)|The character type.|class template|cpp11 folder|<regex>|header|Regular Expressions
template < class BidirectionalIterator,  class Alloc = allocator< sub_match<BidirectionalIterator> > >  class match_results;|match_results|Match results (class template)|(BidirectionalIterator)|A bidirectional iterator type that iterates on the target sequence of characters.|class template|cpp11 folder|<regex>|header|Regular Expressions
class regex_error : public runtime_error { /* ... */ };|regex_error|Regex exception (class)|()||class|cpp11 folder|<regex>|header|Regular Expressions
template <class BidirectionalIterator,\n\t class charT=typename iterator_traits<BidirectionalIterator>::value_type,\n\t class traits=regex_traits<charT> > class regex_iterator;|regex_iterator|Regex iterator (class template)|(BidirectionalIterator)|A bidirectional iterator type that iterates on the target sequence of characters.|class template|cpp11 folder|<regex>|header|Regular Expressions
template <class BidirectionalIterator,\n\t class charT=typename iterator_traits<BidirectionalIterator>::value_type,\n\t class traits=regex_traits<charT> > class regex_token_iterator;|regex_token_iterator|Regex token iterator (class template)|(BidirectionalIterator)|A bidirectional iterator type that iterates on the target sequence of characters.|class template|cpp11 folder|<regex>|header|Regular Expressions
template <class charT> class regex_traits;|regex_traits|Regex traits (class template)|(charT)|The character type.\n\t Strings used with the basic_regex object are sequences of characters of this type.|class template|cpp11 folder|<regex>|header|Regular Expressions
template <class BidirectionalIterator>\n\tclass sub_match : public pair <BidirectionalIterator, BidirectionalIterator>;|sub_match|Sub-expression match (class template)|(BidirectionalIterator)|A bidirectional iterator type that iterates on a sequence of characters.|class template|cpp11 folder|<regex>|header|Regular Expressions
typedef match_results<const char*> cmatch;|cmatch|match_results for string literals (class)|()||class|cpp11|<regex>|header|Regular Expressions
typedef sub_match<const char*> csub_match;|csub_match|sub_match for string literals (class)|()||class|cpp11|<regex>|header|Regular Expressions
typedef sub_match<string::const_iterator> ssub_match;|ssub_match|sub_match for strings (class)|()||class|cpp11|<regex>|header|Regular Expressions
typedef match_results<const wchar_t*> wcmatch;|wcmatch|match_results for wide string literals (class)|()||class|cpp11|<regex>|header|Regular Expressions
typedef sub_match<const wchar_t*> csub_match;|wcsub_match|sub_match for wide string literals (class)|()||class|cpp11|<regex>|header|Regular Expressions
typedef basic_regex<wchar_t> wregex;|wregex|Regex for wchar_t (class)|()||class|cpp11|<regex>|header|Regular Expressions
typedef match_results<wstring::const_iterator> smatch;|wsmatch|match_results for wide string objects (class)|()||class|cpp11|<regex>|header|Regular Expressions
typedef sub_match<wstring::const_iterator> ssub_match;|wssub_match|sub_match for wide strings (class)|()||class|cpp11|<regex>|header|Regular Expressions
template <class charT, class traits>  bool regex_match (const charT* s, const basic_regex<charT,traits>& rgx, regex_constants::match_flag_type flags = regex_constants::match_default);|regex_match|Match sequence (function template)|(s)|A string with the target sequence (the subject) against which the regex expression is matched.|function template|cpp11|<regex>|header|Regular Expressions
long-proto|regex_replace|Replace matched sequence (function template)|(s)|A string with the target sequence (the subject).|function template|cpp11|<regex>|header|Regular Expressions
template <class charT, class traits>  bool regex_search (const charT* s, const basic_regex<charT,traits>& rgx, regex_constants::match_flag_type flags = regex_constants::match_default);|regex_search|Search sequence (function template)|(s)|A string with the target sequence (the subject) to be searched for a match of the regex expression.|function template|cpp11|<regex>|header|Regular Expressions
class domain_error;|domain_error|Domain error exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
class invalid_argument;|invalid_argument|Invalid argument exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
class length_error;|length_error|Length error exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
class logic_error;|logic_error|Logic error exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
class out_of_range;|out_of_range|Out-of-range exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
class overflow_error;|overflow_error|Overflow error exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
class range_error;|range_error|Range error exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
class runtime_error;|runtime_error|Runtime error exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
class underflow_error;|underflow_error|Underflow error exception (class)|()||class|cpp98 cpp11|<stdexcept>|header|Exception classes
template <class charT> struct char_traits;template <> struct char_traits<char>;template <> struct char_traits<wchar_t>;|char_traits|Character traits (class template)|(charT)|Character type.\n\t The class defines the standard character traits for this character type.\n\t This shall be one of the types for which an specialization is provided.\n\t Aliased as member type char_traits::char_type.|class template|cpp98 cpp11 folder|<string>|header|Strings
typedef basic_string<char16_t> u16string;|u16string|String of 16-bit characters (class)|()||class|cpp11|<string>|header|Strings
typedef basic_string<char32_t> u32string;|u32string|String of 32-bit characters (class)|()||class|cpp11|<string>|header|Strings
int stoi (const string&  str, size_t* idx = 0, int base = 10);\n\tint stoi (const wstring& str, size_t* idx = 0, int base = 10);|stoi|Convert string to integer (function template)|(str)|String object with the representation of an integral number.|function template|cpp11|<string>|header|Strings
long-proto|to_string|Convert numerical value to string (function)|(val)|Numerical value.|function|cpp11|<string>|header|Strings
long-proto|to_wstring|Convert numerical value to wide string (function)|(val)|Numerical value.|function|cpp11|<string>|header|Strings
class error_category;|error_category|Error category (abstract class)|()||abstract class|cpp11 folder|<system_error>|header|System errors
class error_code;|error_code|Error code (class)|()||class|cpp11 folder|<system_error>|header|System errors
class error_condition;|error_condition|Error condition (class)|()||class|cpp11 folder|<system_error>|header|System errors
template <class T>\n\tstruct is_error_code_enum : public false_type {};|is_error_code_enum|error_code enum flag (class)|(T)|A type.|class|cpp11|<system_error>|header|System errors
template <class T>\n\tstruct is_error_condition_enum : public false_type {};\n\ttemplate<>\n\tstruct is_error_condition_enum<errc> : true_type {};|is_error_condition_enum|error_condition enum flag (class)|(T)|A type.\n\t If this is errc, the class inherits from true_type.|class|cpp11|<system_error>|header|System errors
class system_error : public runtime_error;|system_error|System error exception (class)|()||class|cpp11 folder|<system_error>|header|System errors
const error_category& generic_category() noexcept;|generic_category|Return generic category (function)|()|void|function|cpp11|<system_error>|header|System errors
error_code make_error_code (errc e) noexcept;|make_error_code|Make error code (function)|(e)|An enum value of type errc (see errc).|function|cpp11|<system_error>|header|System errors
error_condition make_error_condition (errc e) noexcept;|make_error_condition|Make error condition (function)|(e)|An enum value of type errc (see errc).|function|cpp11|<system_error>|header|System errors
const error_category& system_category() noexcept;|system_category|Return system category (function)|()|void|function|cpp11|<system_error>|header|System errors
template <class... Types> class tuple;|tuple|Tuple (class template)|(Types...)|A list of types used for the elements, in the same order as they are going to be ordered in the tuple.|class template|cpp11 folder|<tuple>|header|Tuple library
long-proto|tuple_element|Tuple element type (class template)|(I)|Order number of the element within the tuple (zero-based).\n\t This shall be lower than the actual number of elements in the tuple.\n\tsize_t is an unsigned integral type.|class template|cpp11|<tuple>|header|Tuple library
long-proto|tuple_size|Tuple size traits (class template)|(T)|Type for which the tuple size is obtained.\n\t This shall be a class for which a specialization of this class exists, such as a tuple, and tuple-like classes array and pair.|class template|cpp11|<tuple>|header|Tuple library
template<class... Types>  tuple<Types&&...> forward_as_tuple (Types&&... args) noexcept;|forward_as_tuple|Forward as tuple (function template)|(args)|List of elements to be forwarded as a tuple object of references.|function template|cpp11|<tuple>|header|Tuple library
template<class... Types>\n\t  tuple<VTypes...> make_tuple (Types&&... args);|make_tuple|Construct tuple (function template)|(args)|List of elements that the constructed tuple shall contain.|function template|cpp11|<tuple>|header|Tuple library
template<class... Types>  tuple<Types&...> tie (Types&... args) noexcept;|tie|Tie arguments to tuple elements (function template)|(args)|List of objects (lvalues) to be tied as elements of a tuple.|function template|cpp11|<tuple>|header|Tuple library
template <class... Tuples>\n\t  tuple<CTypes...> tuple_cat (Tuples&&... tpls);|tuple_cat|Concatenate tuples (function template)|(tpls)|Comma-separated list of tuple objects. These may be of different types.|function template|cpp11|<tuple>|header|Tuple library
const /* see below */ ignore;|ignore|Ignore assignment (object)|()||object|cpp11|<tuple>|header|Tuple library
class type_index;|type_index|Type index (class)|()||class|cpp11 folder|<typeindex>|header|Type index
class bad_cast;|bad_cast|Exception thrown on failure to dynamic cast (class)|()||class|cpp98 cpp11|<typeinfo>|header|Type information
class bad_typeid;|bad_typeid|Exception thrown on typeid of null pointer (class)|()||class|cpp98 cpp11|<typeinfo>|header|Type information
class type_info;|type_info|Type information type (class)|()||class|cpp98 cpp11 folder|<typeinfo>|header|Type information
typedef integral_constant<bool,false> false_type;|false_type|False type (class)|()||class|cpp11|<type_traits>|header|type_traits
template <class T, T v>struct integral_constant;|integral_constant|Integral constant (class template)|(T)|Type of the integral constant.\n\t Aliased as member type integral_constant::value_type.|class template|cpp11 folder|<type_traits>|header|type_traits
typedef integral_constant<bool,true> true_type;|true_type|True type (class)|()||class|cpp11|<type_traits>|header|type_traits
template <class T> struct alignment_of;|alignment_of|Alignment of (class template)|(T)|A complete object type, or an array thereof, or a reference to a complete object type.|class template|cpp11|<type_traits>|header|type_traits
template <class T, unsigned I = 0> struct extent;|extent|Array dimension extent (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct has_virtual_destructor;|has_virtual_destructor|Has virtual destructor (class template)|(T)|\n\tC++11\n\t\n\t\n\tC++14\n\t\n\t\n\t\n\t\n\t\n\tA complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.\n\t\n\t\n\tA type.\n\tIf a class type, it shall be a complete type or a union (for unions, this trait is always false).|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_abstract;|is_abstract|Is abstract class (class template)|(T)|\n\tC++11\n\t\n\t\n\tC++14\n\t\n\t\n\t\n\t\n\t\n\tA complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.\n\t\n\t\n\tA type.\n\tIf a class type, it shall be a complete type or a union (for unions, this trait is always false).|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_arithmetic;|is_arithmetic|Is arithmetic type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_array;|is_array|Is array (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T, class U> struct is_assignable;|is_assignable|Is assignable (class template)|(T, U)|Complete types, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class Base, class Derived> struct is_base_of;|is_base_of|Is base class of (class template)|(Base)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_class;|is_class|Is non-union class (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_compound;|is_compound|Is compound type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_const;|is_const|Is const-qualified (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T, class... Args> struct is_constructible;|is_constructible|Is constructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class From, class To> struct is_convertible;|is_convertible|Is convertible (class template)|(From, To)|Complete types, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_copy_assignable;|is_copy_assignable|Is copy assignable (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_copy_constructible;|is_copy_constructible|Is copy constructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_default_constructible;|is_default_constructible|Is default constructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_destructible;|is_destructible|Is destructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_empty;|is_empty|Is empty class (class template)|(T)|\n\tC++11\n\t\n\t\n\tC++14\n\t\n\t\n\t\n\t\n\t\n\tA complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.\n\t\n\t\n\tA type.\n\tIf a class type, it shall be a complete type or a union (for unions, this trait is always false).|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_enum;|is_enum|Is enum (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_floating_point;|is_floating_point|Is floating point (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_function;|is_function|Is function (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_fundamental;|is_fundamental|Is fundamental type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_integral;|is_integral|Is integral (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_literal_type;|is_literal_type|Is literal type (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_lvalue_reference;|is_lvalue_reference|Is lvalue reference (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_member_function_pointer;|is_member_function_pointer|Is member function pointer (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_member_object_pointer;|is_member_object_pointer|Is member object pointer (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_member_pointer;|is_member_pointer|Is member pointer type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_move_assignable;|is_move_assignable|Is move assignable (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_move_constructible;|is_move_constructible|Is move constructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T, class U> struct is_nothrow_assignable;|is_nothrow_assignable|Is assignable throwing no exceptions (class template)|(T, U)|Complete types, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T, class... Args> struct is_nothrow_constructible;|is_nothrow_constructible|Is constructible  throwing no exceptions (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_nothrow_copy_assignable;|is_nothrow_copy_assignable|Is copy assignable throwing no exceptions (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_nothrow_copy_constructible;|is_nothrow_copy_constructible|Is copy constructible throwing no exceptions (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_nothrow_default_constructible;|is_nothrow_default_constructible|Is default constructible throwing no exceptions (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_nothrow_destructible;|is_nothrow_destructible|Is nothrow destructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_nothrow_move_assignable;|is_nothrow_move_assignable|Is move assignable throwing no exception (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_nothrow_move_constructible;|is_nothrow_move_constructible|Is move constructible throwing no exceptions (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_null_pointer;|is_null_pointer|no-Description (other)|(T)|A type.|other|cpp14|<type_traits>|header|type_traits
template <class T> struct is_object;|is_object|Is object type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_pod;|is_pod|Is POD type (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_pointer;|is_pointer|Is pointer (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_polymorphic;|is_polymorphic|Is polymorphic (class template)|(T)|\n\tC++11\n\t\n\t\n\tC++14\n\t\n\t\n\t\n\t\n\t\n\tA complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.\n\t\n\t\n\tA type.\n\tIf a class type, it shall be a complete type or a union (for unions, this trait is always false).|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_reference;|is_reference|Is reference type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_rvalue_reference;|is_rvalue_reference|Is rvalue reference (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T, class U> struct is_same;|is_same|Is same type (class template)|(T, U)|Types.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_scalar;|is_scalar|Is scalar type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_signed;|is_signed|Is signed type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_standard_layout;|is_standard_layout|Is standard-layout type (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_trivial;|is_trivial|Is trivial type (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.|class template|cpp11|<type_traits>|header|type_traits
template <class T, class U> struct is_trivially_assignable;|is_trivially_assignable|Is trivially assignable (class template)|(T, U)|Complete types, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T, class... Args> struct is_trivially_constructible;|is_trivially_constructible|Is trivially constructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_trivially_copyable;|is_trivially_copyable|Is trivially copyable (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound of a complete element type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_trivially_copy_assignable;|is_trivially_copy_assignable|Is trivially copy assignable (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_trivially_copy_constructible;|is_trivially_copy_constructible|Is trivially copy constructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_trivially_default_constructible;|is_trivially_default_constructible|Is trivially default constructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_trivially_destructible;|is_trivially_destructible|Is trivially destructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_trivially_move_assignable;|is_trivially_move_assignable|Is trivially move assignable (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_trivially_move_constructible;|is_trivially_move_constructible|Is trivially move constructible (class template)|(T)|A complete type, or void (possible cv-qualified), or an array of unknown bound.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_union;|is_union|Is union (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_unsigned;|is_unsigned|Is unsigned type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_void;|is_void|Is void (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct is_volatile;|is_volatile|Is volatile-qualified (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct rank;|rank|Array rank (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct add_const;|add_const|Add const qualification (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct add_cv;|add_cv|Add const volatile qualification (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct add_lvalue_reference;|add_lvalue_reference|Add lvalue reference (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct add_pointer;|add_pointer|Add pointer (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct add_rvalue_reference;|add_rvalue_reference|Add rvalue reference (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct add_volatile;|add_volatile|Add volatile qualification (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <size_t Len, size_t Align = /* default alignment */>\n\tstruct aligned_storage;|aligned_storage|Aligned storage (class template)|(Len)|The size of the storage object, in bytes.\n\t This shall not be zero.\n\tsize_t is an unsigned integral type.|class template|cpp11|<type_traits>|header|type_traits
template <size_t Len, class... Types> struct aligned_union;|aligned_union|Aligned union (class template)|(Len)|The minimum size of the storage object, in bytes.\n\tsize_t is an unsigned integral type.|class template|cpp11|<type_traits>|header|type_traits
template <bool Cond, class T, class F> struct conditional;|conditional|Conditional type (class template)|(Cond)|A compile-time constant of type bool.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct decay;|decay|Decay type (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <bool Cond, class T = void> struct enable_if;|enable_if|Enable type if condition is met (class template)|(Cond)|A compile-time constant of type bool.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct make_signed;|make_signed|Make signed (class template)|(T)|An integer type (except bool), or an enumeration type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct make_unsigned;|make_unsigned|Make unsigned (class template)|(T)|An integer type (except bool), or an enumeration type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct remove_all_extents;|remove_all_extents|Remove all array extents (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct remove_const;|remove_const|Remove const qualification (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct remove_cv;|remove_cv|Remove cv qualification (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct remove_extent;|remove_extent|Remove array extent (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct remove_pointer;|remove_pointer|Remove pointer (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct remove_reference;|remove_reference|Remove reference (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct remove_volatile;|remove_volatile|Remove volatile qualification (class template)|(T)|A type.|class template|cpp11|<type_traits>|header|type_traits
template <class Fn, class... ArgTypes> struct result_of<Fn(ArgTypes...)>;|result_of|Result of call (class template)|(Fn)|A callable type (i.e., a function object type or a pointer to member), or a reference to a function, or a reference to a callable type.|class template|cpp11|<type_traits>|header|type_traits
template <class T> struct underlying_type;|underlying_type|Underlying type of enum (class template)|(T)|An enumeration type (enum).|class template|cpp11|<type_traits>|header|type_traits
template <class T1, class T2> struct pair;|pair|Pair of values (class template)|(T1)|Type of member first, aliased as first_type.|class template|cpp98 cpp11 folder|<utility>|header|Utility components
template <class T>\n\t  typename add_rvalue_reference<T>::type declval() noexcept;|declval|Declaration value (function template)|()|void|function template|cpp11|<utility>|header|Utility components
template <class T1, class T2>  pair<T1,T2> make_pair (T1 x, T2 y);|make_pair|Construct pair object (function template)|(x, y)|Values for the members first and second, respectively, of the pair object being constructed.|function template|cpp98 cpp11|<utility>|header|Utility components
template <class T>\n\t  typename conditional < is_nothrow_move_constructible<T>::value ||\n\t   !is_copy_constructible<T>::value,\n\t   T&&, const T& >::type move_if_noexcept(T& arg) noexcept;|move_if_noexcept|Move if noexcept (function template)|(arg)|An object.|function template|cpp11|<utility>|header|Utility components
struct piecewise_construct_t {};|piecewise_construct_t|Piecewise construct type (type)|()||type|cpp11|<utility>|header|Utility components
long-proto|rel_ops|Relational Operators (namespace)|(T)|For operator!=, the type shall be EqualityComparable.\n\t A type is EqualityComparable when it supports operator== operations that follow the typical reflexive, symmetric and transitive properties of equalities.\n\t\n\t For operator>, operator<=, and operator>=, the type shall be LessThanComparable.\n\t A type is LessThanComparable when it supports operator< operations that define a valid strict weak ordering relation.|namespace|cpp98 cpp11|<utility>|header|Utility components
class gslice;|gslice|Valarray generalized slice selector (class)|()||class|cpp98 cpp11 folder|<valarray>|header|Library for arrays of numeric values
template <class T> gslice_array;|gslice_array|Valarray gslice selection (class template)|()||class template|cpp98 cpp11|<valarray>|header|Library for arrays of numeric values
template <class T> indirect_array;|indirect_array|Valarray indirect selection (class template)|()||class template|cpp98 cpp11|<valarray>|header|Library for arrays of numeric values
template <class T> mask_array;|mask_array|Valarray mask selection (class template)|()||class template|cpp98 cpp11|<valarray>|header|Library for arrays of numeric values
template <class T> class valarray;|valarray|Valarray class (class template)|(T)|Type of the elements contained in the valarray.\n\t This shall be a value type: i.e., an arithmetic type, a pointer, or a class that behaves like these (such as complex or another level of valarray).|class template|cpp98 cpp11 folder|<valarray>|header|Library for arrays of numeric values
