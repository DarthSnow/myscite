diff -Nurw scintilla-scite/gtk/SciTEGTK.cxx scite/gtk/SciTEGTK.cxx
--- scintilla-scite/gtk/SciTEGTK.cxx	2016-10-16 04:59:54.000000000 +0200
+++ scite/gtk/SciTEGTK.cxx	2017-03-15 17:23:16.000000000 +0100
@@ -2,6 +2,10 @@
 // SciTEGTK.cxx - main code for the GTK+ version of the editor
 // Copyright 1998-2004 by Neil Hodgson <neilh@scintilla.org>
 // The License.txt file describes the conditions under which this software may be distributed.
+/// 11.11.2016: add env.scite_home & env.home (T. Kani, Marcedo{at}habMalneFrage.de) 
+
+#include <unistd.h>
+#include <limits.h>
 
 #include <stdlib.h>
 #include <string.h>
@@ -15,6 +19,7 @@
 
 #include <string>
 #include <vector>
+#include <iostream>
 #include <set>
 #include <map>
 #include <algorithm>
@@ -783,6 +793,10 @@
 	PropSetFile::SetCaseSensitiveFilenames(true);
 	propsPlatform.Set("PLAT_GTK", "1");
 	propsPlatform.Set("PLAT_UNIX", "1");
+	// Make UNIX %HOME% available to scite config.
+	FilePath envHome =getenv("HOME");
+	if (envHome.IsDirectory())
+		propsPlatform.Set("env.home", envHome.AsUTF8().c_str());
 
 	ReadEnvironment();
 
@@ -885,55 +899,70 @@
 	return button;
 }
 
-FilePath SciTEGTK::GetDefaultDirectory() {
-	const char *where = getenv("SciTE_HOME");
-#ifdef SYSCONF_PATH
-	if (!where) {
-		where = SYSCONF_PATH;
-	}
+FilePath SciTEGTK::GetSciteDefaultHome() {
+	
+#ifdef SYSCONF_PATH // default guaranteed to exist by OS
+ 	const std::string cdefault = SYSCONF_PATH; 
 #else
-	if (!where) {
-		where = getenv("HOME");
-	}
+		const std::string cdefault = getenv("HOME");
 #endif
-	if (where) {
-		return FilePath(where);
-	}
 
-	return FilePath("");
-}
+	std::string home;
+	FilePath homePath;
 
-FilePath SciTEGTK::GetSciteDefaultHome() {
-	const char *where = getenv("SciTE_HOME");
-#ifdef SYSCONF_PATH
-	if (!where) {
-		where = SYSCONF_PATH;
-	}
-#else
-	if (!where) {
-		where = getenv("HOME");
+	// 1 set & use scite_home from env.scite_home
+	std::string home=props.GetNewExpandString("env.scite_home");
+	home=FilePath(home).NormalizePath().AsUTF8().c_str();	
+	if (home.find("/") != std::string::npos) {
+		putenv( (char *) ("SciTE_HOME="+home).c_str() );	
+		return FilePath(home);
+	}
+	
+	// 1 use SciTE_HOME
+	std::string envhome;
+	homePath=getenv("SciTE_HOME");
+	if (homePath.Exists())
+		return homePath;
+		
+	// 2 Search config in ~/scite
+	envhome = getenv("HOME");
+	homePath=envhome + "/scite/SciTEGlobal.properties";
+	if (homePath.Exists()) 
+		return FilePath(envhome+"/scite");
+	
+	// 3 Search config in executables binPath
+	char buf[PATH_MAX + 1];	
+	if (readlink("/proc/self/exe", buf, sizeof(buf) - 1) >0) {	
+		envhome = buf; 
+		envhome = envhome.substr(0, envhome.rfind('/'));
+	} else {
+		// Dont force proc to be available.
+		envhome = sciteExecutable.AsInternal();
 	}
-#endif
-	if (where) {
-		return FilePath(where);
+		homePath = envhome +"/SciTEGlobal.properties";
+		if (homePath.Exists())
+			return FilePath(envhome);	
 
-	}
-	return FilePath("");
+	return FilePath(cdefault);
 }
 
 FilePath SciTEGTK::GetSciteUserHome() {
-	// First looking for environment variable $SciTE_USERHOME
-	// to set SciteUserHome. If not present we look for $SciTE_HOME
-	// then defaulting to $HOME
-	char *where = getenv("SciTE_USERHOME");
-	if (!where) {
-		where = getenv("SciTE_HOME");
-		if (!where) {
-			where = getenv("HOME");
-		}
+/** First looking for environment variable $SciTE_USERHOME
+* to set SciteUserHome. If not present we use GetSciteDefaultHome
+*/
+
+	//  try $scite_userhome
+	FilePath homePath=getenv("SciTE_USERHOME");
+	std::string home=homePath.AsUTF8().c_str();
+	if (homePath.Exists())
+		return homePath;
+
+	// use fallback, guranteed to exist by OS.	 		 
+	return SciTEGTK::GetSciteDefaultHome();
 	}
 
-	return FilePath(where);
+FilePath SciTEGTK::GetDefaultDirectory() {
+	return SciTEGTK::GetSciteDefaultHome();
 }
 
 void SciTEGTK::ShowFileInStatus() { 
diff -Nurw scintilla-scite/win32/SciTEWin.cxx scite/win32/SciTEWin.cxx
--- scintilla-scite/win32/SciTEWin.cxx	2016-10-16 04:59:54.000000000 +0200
+++ scite/win32/SciTEWin.cxx	2017-03-15 15:33:58.000000000 +0100
@@ -179,6 +179,10 @@
 	// System type properties are stored in the platform properties.
 	propsPlatform.Set("PLAT_WIN", "1");
 	propsPlatform.Set("PLAT_WINNT", "1");
+	// Make Windows %USERPROFILE% available to scite config.
+	FilePath envHome =_wgetenv(GUI_TEXT("USERPROFILE"));
+	if (envHome.IsDirectory()) 
+		propsPlatform.Set("env.home", envHome.AsUTF8().c_str());
 
 	ReadEnvironment();
 
@@ -417,43 +422,70 @@
 	SciTEBase::ReadProperties();
 }
 
-static FilePath GetSciTEPath(FilePath home) {
-	if (home.IsSet()) {
-		return FilePath(home);
-	} else {
+
+FilePath SciTEWin::GetSciteDefaultHome() {
+/**
+ *       SciteDefaultHome -> Windows
+ *       1 look for and follow %SciTE_HOME% | $(env.scite_home)
+ *       2 else use exectables Path (if we find SciteGlobal.properties)
+ *       3 else use %USERPROFILE%\scite\ (if we find SciteGlobal.properties there)
+ */
+
+ // yo.... FilePath takes and returns gui_string (which converts to a basic_wstring / wchar_t)
+ // Set environment %SciTE_HOME% fromm $(env.scite_home).
+ 
+	std::wstring wenvPathSciteHome = (GUI::StringFromUTF8(props.GetNewExpandString("env.scite_home")));
+	std::wstring wenv = GUI::StringFromUTF8(FilePath(L"SciTE_HOME=" + wenvPathSciteHome).NormalizePath().AsUTF8());
+	if (!wenvPathSciteHome.empty()) {
+			_wputenv((wchar_t *)wenv.c_str()); 
+			return(FilePath((wchar_t *)wenvPathSciteHome.c_str()));
+	}
+
+	//  ..try SciTE_HOME
+	FilePath envHome =_wgetenv(GUI_TEXT("SciTE_HOME"));
+	if (envHome.IsDirectory()) 
+		return envHome;
+		
+	std::wstring home;
+		
+	//  ..try executables binpath (when we find sciteglobal.properties there.)
+	if (home.empty()) {
+		std::wstring wPath;
 		GUI::gui_char path[MAX_PATH];
-		if (::GetModuleFileNameW(0, path, ELEMENTS(path)) == 0)
-			return FilePath();
-		// Remove the SciTE.exe
+		if (::GetModuleFileNameW(0, path, ELEMENTS(path)) != 0) {
+			//  just get  the Path
 		GUI::gui_char *lastSlash = wcsrchr(path, pathSepChar);
-		if (lastSlash)
-			*lastSlash = '\0';
+			if (lastSlash) *lastSlash = '\0';
+				wPath = path;
+			FilePath wfilePath = wPath.append(L"\\SciTEGlobal.properties");
+			if (wfilePath.Exists())
 		return FilePath(path);
 	}
 }
 
-FilePath SciTEWin::GetDefaultDirectory() {
-	GUI::gui_char *home = _wgetenv(GUI_TEXT("SciTE_HOME"));
-	return GetSciTEPath(home);
+	// if above are empty... define folder %userprofile%\scite as a fallback.
+	if (home.empty()) {
+		std::wstring wPath = _wgetenv(GUI_TEXT("USERPROFILE"));
+		FilePath wfilePath = FilePath(wPath + L"\\scite" ).NormalizePath();
+		if (wfilePath.IsDirectory())
+			home = wPath;
 }
 
-FilePath SciTEWin::GetSciteDefaultHome() {
-	GUI::gui_char *home = _wgetenv(GUI_TEXT("SciTE_HOME"));
-	return GetSciTEPath(home);
+	return(home);
 }
 
 FilePath SciTEWin::GetSciteUserHome() {
-	// First looking for environment variable $SciTE_USERHOME
-	// to set SciteUserHome. If not present we look for $SciTE_HOME
-	// then defaulting to $USERPROFILE
-	GUI::gui_char *home = _wgetenv(GUI_TEXT("SciTE_USERHOME"));
-	if (!home) {
-		home = _wgetenv(GUI_TEXT("SciTE_HOME"));
-		if (!home) {
-			home = _wgetenv(GUI_TEXT("USERPROFILE"));
-		}
+	// First looking for environment variable $SciTE_USERHOME to set SciteUserHome. 
+	FilePath fpUserHome = _wgetenv(GUI_TEXT("SciTE_USERHOME"));
+	if (fpUserHome.Exists())
+		return(fpUserHome);
+	
+	// If not present we just returnGetSciteDefaultHome()	
+	return SciTEWin::GetSciteDefaultHome();			
 	}
-	return GetSciTEPath(home);
+
+FilePath SciTEWin::GetDefaultDirectory() {
+	return SciTEWin::GetSciteDefaultHome();
 }
 
 // Help command lines contain topic!path
