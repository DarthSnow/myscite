///@brief
// Make SciteUserHome point to SciteDefaultHome per Default. 
// Make SciteUserHome settable via env.SciteUserHome, Respect %SCITE_USERHOME%
// Initially set SciteDefaultHome to bins Dir per Default. Respect %SCITE_HOME%
// Expose system Platforms HOME Path Variable to env.home.
diff -Nurw scintilla-scite/gtk/SciTEGTK.cxx scite/gtk/SciTEGTK.cxx
--- scintilla-scite/gtk/SciTEGTK.cxx	2016-10-16 13:59:54.000000000 +0200
+++ scite/gtk/SciTEGTK.cxx	2017-05-19 17:20:20.000000000 +0200
@@ -784,6 +784,11 @@
 	propsPlatform.Set("PLAT_GTK", "1");
 	propsPlatform.Set("PLAT_UNIX", "1");
 
+	// Make UNIX %HOME% available to scite config.	
+	FilePath envHome =getenv("HOME");
+	if (envHome.IsDirectory())
+		propsPlatform.Set("env.home", envHome.AsUTF8().c_str());
+
 	ReadEnvironment();
 
 	pathAbbreviations = GetAbbrevPropertiesFileName();
@@ -886,54 +891,68 @@
 }
 
 FilePath SciTEGTK::GetDefaultDirectory() {
-	const char *where = getenv("SciTE_HOME");
-#ifdef SYSCONF_PATH
-	if (!where) {
-		where = SYSCONF_PATH;
-	}
-#else
-	if (!where) {
-		where = getenv("HOME");
-	}
+	std::string envHome;
+	
+#ifdef SYSCONF_PATH // default guaranteed to exist by OS
+ 	envHome = SYSCONF_PATH; 
+	return FilePath(envHome);
 #endif
-	if (where) {
-		return FilePath(where);
-	}
 
-	return FilePath("");
+	// We are using executables binPath
+
+	char buf[PATH_MAX + 1];	
+	
+	if (readlink("/proc/self/exe", buf, sizeof(buf) - 1) >0) {	
+		envHome = buf; 
+		envHome = envHome.substr(0, envHome.rfind('/'));
+	} else {
+		// Dont force proc to be available.	
+		envHome = sciteExecutable.AsInternal();
+	}
+	return  FilePath(envHome);
 }
 
 FilePath SciTEGTK::GetSciteDefaultHome() {
-	const char *where = getenv("SciTE_HOME");
-#ifdef SYSCONF_PATH
-	if (!where) {
-		where = SYSCONF_PATH;
-	}
+	FilePath homePath;
+
+#ifdef SYSCONF_PATH // default guaranteed to exist by OS
+ 	const std::string cdefault = SYSCONF_PATH; 
 #else
-	if (!where) {
-		where = getenv("HOME");
-	}
+		const std::string cdefault = getenv("HOME");
 #endif
-	if (where) {
-		return FilePath(where);
 
-	}
-	return FilePath("");
+	// 1 use SciTE_HOME
+	homePath=getenv("SciTE_HOME");
+	if (homePath.Exists())
+		return homePath;
+	
+	homePath=	SciTEGTK::GetDefaultDirectory();
+	if (homePath.Exists())
+		return homePath;
+	
+	return FilePath(cdefault);
 }
 
 FilePath SciTEGTK::GetSciteUserHome() {
-	// First looking for environment variable $SciTE_USERHOME
-	// to set SciteUserHome. If not present we look for $SciTE_HOME
-	// then defaulting to $HOME
-	char *where = getenv("SciTE_USERHOME");
-	if (!where) {
-		where = getenv("SciTE_HOME");
-		if (!where) {
-			where = getenv("HOME");
-		}
-	}
+/** First looking for environment variable $SciTE_USERHOME
+* to set SciteUserHome. If not present we use GetSciteDefaultHome
+*/
+
+	// 1 set & use scite_home from env.scite_home
+	std::string home=props.GetNewExpandString("env.scite_userhome");
+	home=FilePath(home).NormalizePath().AsUTF8().c_str();	
+	if (home.find("/") != std::string::npos) {
+		putenv( (char *) ("SciTE_USERHOME="+home).c_str() );	
+		return FilePath(home);
+	}
+	
+	//  try $scite_userhome
+	FilePath homePath=getenv("SciTE_USERHOME");
+		if (homePath.Exists())
+			return homePath;
 
-	return FilePath(where);
+	// use fallback, guranteed to exist by OS.	 		 
+	return SciTEGTK::GetSciteDefaultHome();
 }
 
 void SciTEGTK::ShowFileInStatus() {
diff -Nurw scintilla-scite/win32/SciTEWin.cxx scite/win32/SciTEWin.cxx
--- scintilla-scite/win32/SciTEWin.cxx	2016-10-16 13:59:54.000000000 +0200
+++ scite/win32/SciTEWin.cxx	2017-05-19 17:04:58.000000000 +0200
@@ -180,6 +180,11 @@
 	propsPlatform.Set("PLAT_WIN", "1");
 	propsPlatform.Set("PLAT_WINNT", "1");
 
+	// Make Windows %USERPROFILE% available to scite config.
+	FilePath envHome =_wgetenv(GUI_TEXT("USERPROFILE"));
+	if (envHome.IsDirectory()) 
+		propsPlatform.Set("env.home", envHome.AsUTF8().c_str());
+
 	ReadEnvironment();
 
 	ReadGlobalPropFile();
@@ -417,43 +422,60 @@
 	SciTEBase::ReadProperties();
 }
 
-static FilePath GetSciTEPath(FilePath home) {
-	if (home.IsSet()) {
-		return FilePath(home);
-	} else {
-		GUI::gui_char path[MAX_PATH];
-		if (::GetModuleFileNameW(0, path, ELEMENTS(path)) == 0)
-			return FilePath();
-		// Remove the SciTE.exe
-		GUI::gui_char *lastSlash = wcsrchr(path, pathSepChar);
-		if (lastSlash)
-			*lastSlash = '\0';
-		return FilePath(path);
+FilePath SciTEWin::GetSciteDefaultHome() {
+/**
+ *		SciteDefaultHome -> Windows
+ *		- we return GetDefaultDirectory		
+ */
+
+	return(SciTEWin::GetDefaultDirectory());
 	}
+
+FilePath SciTEWin::GetSciteUserHome() {
+/**
+ *		SciteUserHome -> Windows
+ *		1. We look for and follow $(env.scite_userhome) or %SciTE_USERHOME% 
+ *		2. Else, we use GetSciteDefaultHome 
+ */
+
+	// First, check if  SciTE_UserHome has been set via property.
+	std::wstring wenvPathSciteHome = (GUI::StringFromUTF8(props.GetNewExpandString("env.scite_userhome")));
+	std::wstring wenv = GUI::StringFromUTF8(FilePath(L"SciTE_USERHOME=" + wenvPathSciteHome).NormalizePath().AsUTF8());
+	if (!wenvPathSciteHome.empty()) {
+			_wputenv((wchar_t *)wenv.c_str()); 
+			return(FilePath((wchar_t *)wenvPathSciteHome.c_str()));
+	}
+	
+	// No, lets  look for preset environment variable $SciTE_USERHOME. 
+	FilePath fpUserHome = _wgetenv(GUI_TEXT("SciTE_USERHOME"));
+	if (fpUserHome.Exists())
+		return(fpUserHome);
+	
+	// Fallback - just returnGetSciteDefaultHome()	
+	return SciTEWin::GetSciteDefaultHome();			
 }
 
 FilePath SciTEWin::GetDefaultDirectory() {
-	GUI::gui_char *home = _wgetenv(GUI_TEXT("SciTE_HOME"));
-	return GetSciTEPath(home);
-}
+/**
+ *		SciteDefaultDirectory -> Windows
+ *		1. We look for and follow %SciTE_HOME% 
+ *		2. Or we use exectables Path.
+ */
+
+	FilePath envHome =_wgetenv(GUI_TEXT("SciTE_HOME"));
+	if (envHome.IsDirectory()) 
+		return envHome;
 
-FilePath SciTEWin::GetSciteDefaultHome() {
-	GUI::gui_char *home = _wgetenv(GUI_TEXT("SciTE_HOME"));
-	return GetSciTEPath(home);
+	//  ... use executables binpath
+		std::wstring wPath;
+		GUI::gui_char path[MAX_PATH];
+		if (::GetModuleFileNameW(0, path, ELEMENTS(path)) != 0) {
+			GUI::gui_char *lastSlash = wcsrchr(path, pathSepChar);
+			if (lastSlash) *lastSlash = '\0';
+				envHome = path;
 }
 
-FilePath SciTEWin::GetSciteUserHome() {
-	// First looking for environment variable $SciTE_USERHOME
-	// to set SciteUserHome. If not present we look for $SciTE_HOME
-	// then defaulting to $USERPROFILE
-	GUI::gui_char *home = _wgetenv(GUI_TEXT("SciTE_USERHOME"));
-	if (!home) {
-		home = _wgetenv(GUI_TEXT("SciTE_HOME"));
-		if (!home) {
-			home = _wgetenv(GUI_TEXT("USERPROFILE"));
-		}
-	}
-	return GetSciTEPath(home);
+	return envHome;
 }
 
 // Help command lines contain topic!path
