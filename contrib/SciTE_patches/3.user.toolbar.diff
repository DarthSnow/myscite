diff -Nurw scintilla-scite/gtk/SciTEGTK.cxx scite/gtk/SciTEGTK.cxx
--- scintilla-scite/gtk/SciTEGTK.cxx	2016-12-22 20:53:48.000000000 +0100
+++ scite/gtk/SciTEGTK.cxx	2016-12-22 17:35:02.000000000 +0100
@@ -491,6 +491,7 @@
 	GUI::Window wToolBarBox;
 	int toolbarDetachable;
 	int menuSource;
+	void SetToolBar() {} 
 
 	// Control of sub process
 	FilePath sciteExecutable;
diff -Nurw scintilla-scite/src/Containers.h scite/src/Containers.h
--- scintilla-scite/src/Containers.h	1970-01-01 01:00:00.000000000 +0100
+++ scite/src/Containers.h	2016-12-22 17:35:02.000000000 +0100
@@ -0,0 +1,500 @@
+#ifndef CONTAINERS_H
+#define CONTAINERS_H
+
+struct T_CONTAINERS_POSITION { };
+typedef T_CONTAINERS_POSITION* T_POSITION;
+#define BEFORE_START_T_POSITION ((T_POSITION)-1L)
+
+template<class TYPE, class ARG_TYPE>
+class TList
+{
+protected:
+	struct Node	{
+		Node* pNext;
+		Node* pPrev;
+		TYPE data;
+	};
+	
+public:
+
+	TList() {
+		m_nCount = 0;
+		m_pNodeHead = m_pNodeTail = ((Node *)0);
+	}
+
+	~TList() {
+		RemoveAll();
+	}
+	
+	int GetCount() const {
+		return m_nCount;
+	}
+	bool IsEmpty() const {
+		return m_nCount == 0;
+	}
+
+	TYPE& GetHead() {
+		return m_pNodeHead->data;
+	}
+	TYPE GetHead() const {
+		return m_pNodeHead->data;
+	}
+	TYPE& GetTail() {
+		return m_pNodeTail->data;
+	}
+	TYPE GetTail() const {
+		return m_pNodeTail->data;
+	}
+
+	// get head or tail (and remove it) - don't call on empty list !
+	TYPE RemoveHead() {
+		Node* pOldNode = m_pNodeHead;
+		TYPE returnValue = pOldNode->data;
+
+		m_pNodeHead = pOldNode->pNext;
+		if (m_pNodeHead != ((Node *)0))
+			m_pNodeHead->pPrev = ((Node *)0);
+		else
+			m_pNodeTail = ((Node *)0);
+		FreeNode(pOldNode);
+		return returnValue;
+	}
+	TYPE RemoveTail() {
+		Node* pOldNode = m_pNodeTail;
+		TYPE returnValue = pOldNode->data;
+
+		m_pNodeTail = pOldNode->pPrev;
+		if (m_pNodeTail != ((Node *)0))
+			m_pNodeTail->pNext = ((Node *)0);
+		else
+			m_pNodeHead = ((Node *)0);
+		FreeNode(pOldNode);
+		return returnValue;
+	}
+
+	// add before head or after tail
+	T_POSITION AddHead(ARG_TYPE newElement) {
+		Node* pNewNode = NewNode(((Node *)0), m_pNodeHead);
+		pNewNode->data = newElement;
+		if (m_pNodeHead != ((void *)0))
+			m_pNodeHead->pPrev = pNewNode;
+		else
+			m_pNodeTail = pNewNode;
+		m_pNodeHead = pNewNode;
+		return (T_POSITION) pNewNode;
+	}
+	T_POSITION AddTail(ARG_TYPE newElement) {
+		Node* pNewNode = NewNode(m_pNodeTail, ((Node *)0));
+		pNewNode->data = newElement;
+		if (m_pNodeTail != ((Node *)0))
+			m_pNodeTail->pNext = pNewNode;
+		else
+			m_pNodeHead = pNewNode;
+		m_pNodeTail = pNewNode;
+		return (T_POSITION) pNewNode;
+	}
+
+	// remove all elements
+	void RemoveAll() {
+		// destroy elements
+		Node* pNode = m_pNodeHead;
+		while (pNode) {
+			m_pNodeTail = pNode->pNext;
+			delete pNode;
+			pNode = m_pNodeTail;
+		}
+		m_nCount = 0;
+		m_pNodeHead = m_pNodeTail = ((Node *)0);
+	}
+
+	// iteration
+	T_POSITION GetHeadPosition() const { 
+		return (T_POSITION) m_pNodeHead; 
+	}
+	T_POSITION GetTailPosition() const {
+		return (T_POSITION) m_pNodeTail;
+	}
+	TYPE& GetNext(T_POSITION& rPosition) { // return *Position++
+		Node* pNode = (Node*) rPosition;
+		rPosition = (T_POSITION) pNode->pNext;
+		return pNode->data;
+	}
+	TYPE GetNext(T_POSITION& rPosition) const { // return *Position++
+		Node* pNode = (Node*) rPosition;
+		rPosition = (T_POSITION) pNode->pNext;
+		return pNode->data;
+	}
+	TYPE& GetPrev(T_POSITION& rPosition) { // return *Position--
+		Node* pNode = (Node*) rPosition;
+		rPosition = (T_POSITION) pNode->pPrev;
+		return pNode->data;
+	}
+	TYPE GetPrev(T_POSITION& rPosition) const { // return *Position--
+		Node* pNode = (Node*) rPosition;
+		rPosition = (T_POSITION) pNode->pPrev;
+		return pNode->data;
+	}
+
+	// getting/modifying an element at a given position
+	TYPE& GetAt(T_POSITION position) {
+		Node* pNode = (Node*) position;
+		return pNode->data;
+	}
+	TYPE GetAt(T_POSITION position) const {
+		Node* pNode = (Node*) position;
+		return pNode->data;
+	}
+	void SetAt(T_POSITION pos, ARG_TYPE newElement) {
+		Node* pNode = (Node*) pos;
+		pNode->data = newElement; 
+	}
+	void RemoveAt(T_POSITION position) {
+		Node* pOldNode = (Node*) position;
+		// remove pOldNode from list
+		if (pOldNode == m_pNodeHead)
+			m_pNodeHead = pOldNode->pNext;
+		else
+			pOldNode->pPrev->pNext = pOldNode->pNext;
+		if (pOldNode == m_pNodeTail)
+			m_pNodeTail = pOldNode->pPrev;
+		else
+			pOldNode->pNext->pPrev = pOldNode->pPrev;
+		FreeNode(pOldNode);
+	}
+
+	// inserting before or after a given position
+	T_POSITION InsertBefore(T_POSITION position, ARG_TYPE newElement) {
+		if (position == ((void *)0))
+			return AddHead(newElement); // insert before nothing -> head of the list
+		// Insert it before position
+		Node* pOldNode = (Node*) position;
+		Node* pNewNode = NewNode(pOldNode->pPrev, pOldNode);
+		pNewNode->data = newElement;
+		if (pOldNode->pPrev != ((Node *)0))
+			pOldNode->pPrev->pNext = pNewNode;
+		else
+			m_pNodeHead = pNewNode;
+		pOldNode->pPrev = pNewNode;
+		return (T_POSITION) pNewNode;
+	}
+	T_POSITION InsertAfter(T_POSITION position, ARG_TYPE newElement) {
+		if (position == ((void *)0))
+			return AddTail(newElement); // insert after nothing -> tail of the list
+		// Insert it before position
+		Node* pOldNode = (Node*) position;
+		Node* pNewNode = NewNode(pOldNode, pOldNode->pNext);
+		pNewNode->data = newElement;
+		if (pOldNode->pNext != ((Node *)0))
+			pOldNode->pNext->pPrev = pNewNode;
+		else
+			m_pNodeTail = pNewNode;
+		pOldNode->pNext = pNewNode;
+		return (T_POSITION) pNewNode;
+	}
+
+	// helper functions (note: O(n) speed)
+	// defaults to starting at the HEAD, return NULL if not found
+	T_POSITION Find(ARG_TYPE searchValue, T_POSITION startAfter = (T_POSITION)0) const {
+		Node* pNode = (Node*) startAfter;
+		if (pNode == ((Node *)0))
+			pNode = m_pNodeHead;  // start at head
+		else
+			pNode = pNode->pNext;  // start after the one specified
+		for (; pNode != ((Node *)0); pNode = pNode->pNext)
+			if (pNode->data==searchValue)
+				return (T_POSITION)pNode;
+		return ((T_POSITION)0);
+	}
+	// get the 'nIndex'th element (may return NULL)
+	T_POSITION FindIndex(int nIndex) const {
+		if (nIndex >= m_nCount || nIndex < 0)
+			return (T_POSITION)0;  // went too far
+		Node* pNode = m_pNodeHead;
+		while (nIndex--)
+			pNode = pNode->pNext;
+		return (T_POSITION) pNode;
+	}
+
+protected:
+	Node* m_pNodeHead;
+	Node* m_pNodeTail;
+	int m_nCount;
+
+	Node* NewNode(Node* pPrev, Node* pNext) {
+		Node* pNode = new Node;
+		pNode->pPrev = pPrev;
+		pNode->pNext = pNext;
+		m_nCount++;
+		return pNode;
+	}
+	void FreeNode(Node*pNode) {
+		delete pNode;
+		m_nCount--;
+		// if no more elements, cleanup completely
+		if (m_nCount == 0)
+			RemoveAll();
+	}
+};
+
+template<class TYPE, class ARG_TYPE>
+class TArray
+{
+public:
+	TArray() {};
+
+	int GetSize() const {
+		return m_ArrayData.GetCount();
+	}
+	
+	// Clean up
+	void RemoveAll() {
+		m_ArrayData.RemoveAll();
+	}
+	
+	// Accessing elements
+	TYPE GetAt(int nIndex) const {
+		return m_ArrayData.GetAt(m_ArrayData.FindIndex(nIndex));
+	}
+	TYPE& ElementAt(int nIndex) {
+		return m_ArrayData.GetAt(m_ArrayData.FindIndex(nIndex));
+	}
+	void SetAt(int nIndex, ARG_TYPE newElement) {
+		m_ArrayData.SetAt(m_ArrayData.FindIndex(nIndex),newElement);
+	}
+	
+	// Potentially growing the array
+	int Add(ARG_TYPE newElement) {
+		m_ArrayData.AddTail(newElement);
+		return m_ArrayData.GetCount();
+	}
+	
+	// overloaded operator helpers
+	TYPE operator[](int nIndex) const {
+		return m_ArrayData.GetAt(m_ArrayData.FindIndex(nIndex));
+	}
+	TYPE& operator[](int nIndex) {
+		return m_ArrayData.GetAt(m_ArrayData.FindIndex(nIndex));
+	}
+	
+	// Operations that move elements around
+	void InsertAt(int nIndex, ARG_TYPE newElement, int nCount = 1) {
+			for (int i=0; i<nCount; i++)
+					m_ArrayData.InsertBefore(m_ArrayData.FindIndex(nIndex),newElement); 
+	}
+	void RemoveAt(int nIndex, int nCount = 1) {
+		for (int i=0; i<nCount; i++)
+			m_ArrayData.RemoveAt(m_ArrayData.FindIndex(nIndex));
+	}
+
+protected:
+	TList<TYPE, ARG_TYPE> m_ArrayData;
+};
+
+template<class KEY, class ARG_KEY, class VALUE, class ARG_VALUE>
+class TMap
+{
+protected:
+	// Association
+	struct Association {
+		Association* pNext;
+		unsigned int nHashValue;  // needed for efficient iteration
+		KEY key;
+		VALUE value;
+	};
+public:
+	
+	TMap() {
+		m_pHashTable = 0;
+		m_nHashTableSize = 17;  // default size
+		m_nCount = 0;
+		m_pFreeList = 0;
+	}
+	~TMap() {
+		RemoveAll();
+	}
+	
+	int GetCount() const {
+		return m_nCount;
+	}
+	bool IsEmpty() const {
+		return m_nCount == 0;
+	}
+		
+	// Lookup
+	bool Lookup(ARG_KEY key, VALUE& rValue) {
+		UINT nHash;
+		Association* pAssoc = GetAssocAt(key, nHash);
+		if (pAssoc == 0)
+			return false;  // not in map
+		rValue = pAssoc->value;
+		return true;
+	}
+		
+	// Operations
+	// Lookup and add if not there
+	VALUE& operator[](ARG_KEY key) {
+		UINT nHash;
+		Association* pAssoc;
+		if ((pAssoc = GetAssocAt(key, nHash)) == 0)
+		{
+			if (m_pHashTable == 0)
+				InitHashTable(m_nHashTableSize);
+			
+			// it doesn't exist, add a new Association
+			pAssoc = NewAssoc();
+			pAssoc->nHashValue = nHash;
+			pAssoc->key = key;
+			// 'pAssoc->value' is a constructed object, nothing more
+			
+			// put into hash table
+			pAssoc->pNext = m_pHashTable[nHash];
+			m_pHashTable[nHash] = pAssoc;
+		}
+		return pAssoc->value;  // return new reference
+	}
+		
+	// add a new (key, value) pair
+	void SetAt(ARG_KEY key, ARG_VALUE newValue) { 
+		(*this)[key] = newValue; 
+	}
+	
+	// removing existing (key, ?) pair
+	bool RemoveKey(ARG_KEY key) {
+		if (m_pHashTable == 0)
+			return false;  // nothing in the table
+		
+		Association** ppAssocPrev;
+		ppAssocPrev = &m_pHashTable[HashKey(key) % m_nHashTableSize];
+		
+		Association* pAssoc;
+		for (pAssoc = *ppAssocPrev; pAssoc != 0; pAssoc = pAssoc->pNext)
+		{
+			if (pAssoc->key == key)
+			{
+				// remove it
+				*ppAssocPrev = pAssoc->pNext;  // remove from list
+				FreeAssoc(pAssoc);
+				return true;
+			}
+			ppAssocPrev = &pAssoc->pNext;
+		}
+		return false;  // not found
+	}
+	void RemoveAll() {
+		if (m_pHashTable != 0)
+		{
+			// destroy elements (values and keys)
+			for (unsigned int nHash = 0; nHash < m_nHashTableSize; nHash++)	{
+				Association* pAssoc = m_pHashTable[nHash];
+				Association* pAssocNext;
+				while (pAssoc) {
+					pAssocNext = pAssoc->pNext;
+					delete pAssoc;
+					pAssoc = pAssocNext;
+				}
+			}
+		}
+		// free hash table
+		delete[] m_pHashTable;
+		m_pHashTable = 0;
+		m_nCount = 0;
+		m_pFreeList = 0;
+	}
+		
+	// iterating all (key, value) pairs
+	T_POSITION GetStartPosition() const { 
+		return (m_nCount == 0) ? 0 : BEFORE_START_T_POSITION; 
+	}
+	void GetNextAssoc(T_POSITION& rNextPosition, KEY& rKey, VALUE& rValue) const {
+		Association* pAssocRet = (Association*)rNextPosition;
+		
+		if (pAssocRet == (Association*) BEFORE_START_T_POSITION)
+		{
+			// find the first association
+			for (unsigned int nBucket = 0; nBucket < m_nHashTableSize; nBucket++)
+				if ((pAssocRet = m_pHashTable[nBucket]) != NULL)
+					break;
+		}
+		
+		// find next association
+		Association* pAssocNext;
+		if ((pAssocNext = pAssocRet->pNext) == 0)
+		{
+			// go to next bucket
+			for (unsigned int nBucket = pAssocRet->nHashValue + 1;
+			nBucket < m_nHashTableSize; nBucket++)
+				if ((pAssocNext = m_pHashTable[nBucket]) != 0)
+					break;
+		}
+		
+		rNextPosition = (T_POSITION) pAssocNext;
+		
+		// fill in return data
+		rKey = pAssocRet->key;
+		rValue = pAssocRet->value;
+	}
+	
+	// advanced features for derived classes
+	unsigned int GetHashTableSize() const { 
+		return m_nHashTableSize; 
+	}
+	void InitHashTable(unsigned int hashSize, bool bAllocNow = true) {
+		if (m_pHashTable != 0)
+		{
+			// free hash table
+			delete[] m_pHashTable;
+			m_pHashTable = 0;
+		}
+		
+		if (bAllocNow)
+		{
+			m_pHashTable = new Association* [hashSize];
+			memset(m_pHashTable, 0, sizeof(Association*) * hashSize);
+		}
+		m_nHashTableSize = hashSize;
+	}
+	
+	// Implementation
+protected:
+	Association** m_pHashTable;
+	unsigned int m_nHashTableSize;
+	int m_nCount;
+	Association* m_pFreeList;
+	
+	Association* NewAssoc() {
+		Association* pAssoc = new Association;
+		pAssoc->pNext = m_pFreeList;
+		m_pFreeList = pAssoc;
+		m_nCount++;
+		return pAssoc;
+	}
+
+	void FreeAssoc(Association* pAssoc) {
+		delete pAssoc;
+		m_nCount--;
+		// if no more elements, cleanup completely
+		if (m_nCount == 0)
+			RemoveAll();
+	}
+	Association* GetAssocAt(ARG_KEY key, unsigned int& nHash) {
+		nHash = HashKey(key) % m_nHashTableSize;
+		
+		if (m_pHashTable == 0)
+			return 0;
+		
+		// see if it exists
+		Association* pAssoc;
+		for (pAssoc = m_pHashTable[nHash]; pAssoc != 0; pAssoc = pAssoc->pNext)
+		{
+			if (pAssoc->key == key)
+				return pAssoc;
+		}
+		return 0;
+	}
+	unsigned int HashKey(ARG_KEY key) {
+		// default identity hash - works for most primitive values
+		return ((size_t)(void*)(unsigned long)key) >> 4;
+	}
+};
+
+#endif
diff -Nurw scintilla-scite/src/SciTE.h scite/src/SciTE.h
--- scintilla-scite/src/SciTE.h	2016-12-22 20:54:06.000000000 +0100
+++ scite/src/SciTE.h	2016-12-22 17:35:02.000000000 +0100
@@ -273,7 +273,7 @@
 #define IDBM_AROUND 105
 #define IDBM_UP 106
 #define IDR_CLOSEFILE24 107
-
+#define IDR_BUTTONS			107
 #define IDBM_20_WORD 201
 #define IDBM_20_CASE 202
 #define IDBM_20_REGEX 203
diff -Nurw scintilla-scite/src/SciTEBase.h scite/src/SciTEBase.h
--- scintilla-scite/src/SciTEBase.h	2016-12-22 20:54:06.000000000 +0100
+++ scite/src/SciTEBase.h	2016-12-22 20:13:54.000000000 +0100
@@ -343,6 +343,7 @@
 class SciTEBase : public ExtensionAPI, public Searcher, public WorkerListener {
 protected:
 	bool needIdle;
+	virtual void SetToolBar() = 0;
 	GUI::gui_string windowName;
 	FilePath filePath;
 	FilePath dirNameAtExecute;
diff -Nurw scintilla-scite/src/SciTEProps.cxx scite/src/SciTEProps.cxx
--- scintilla-scite/src/SciTEProps.cxx	2016-12-22 20:54:06.000000000 +0100
+++ scite/src/SciTEProps.cxx	2016-12-22 20:13:54.000000000 +0100
@@ -1119,7 +1119,7 @@
 	tabHideOne = props.GetInt("tabbar.hide.one");
 
 	SetToolsMenu();
-
+	SetToolBar();//!-add-[user.toolbar] Scite_ru
 	wEditor.Call(SCI_SETFOLDFLAGS, props.GetInt("fold.flags"));
 
 	// To put the folder markers in the line number region
diff -Nurw scintilla-scite/win32/SciTERes.rc scite/win32/SciTERes.rc
--- scintilla-scite/win32/SciTERes.rc	2016-12-22 20:54:06.000000000 +0100
+++ scite/win32/SciTERes.rc	2016-12-22 17:35:02.000000000 +0100
@@ -566,6 +566,7 @@
 
 IDR_CLOSEFILE BITMAP "closefile.bmp"
 IDR_CLOSEFILE24 BITMAP "closefile24.bmp"
+IDR_BUTTONS BITMAP "buttons.bmp"	//[user.toolbar]
 
 IDBM_WORD BITMAP "word.bmp"
 IDBM_CASE BITMAP "case.bmp"
diff -Nurw scintilla-scite/win32/SciTEWin.cxx scite/win32/SciTEWin.cxx
--- scintilla-scite/win32/SciTEWin.cxx	2016-12-22 20:53:54.000000000 +0100
+++ scite/win32/SciTEWin.cxx	2016-12-22 17:35:02.000000000 +0100
@@ -204,7 +204,8 @@
 	uniqueInstance.Init(this);
 
 	hAccTable = ::LoadAccelerators(hInstance, TEXT("ACCELS")); // md
-
+	hToolbarBitmap = 0; 
+	oldToolbarBitmapID = 0;
 	cmdWorker.pSciTE = this;
 }
 
diff -Nurw scintilla-scite/win32/SciTEWin.h scite/win32/SciTEWin.h
--- scintilla-scite/win32/SciTEWin.h	2016-12-22 20:54:06.000000000 +0100
+++ scite/win32/SciTEWin.h	2016-12-22 20:26:16.000000000 +0100
@@ -98,6 +98,7 @@
 #include "Worker.h"
 #include "FileWorker.h"
 #include "MatchMarker.h"
+#include "Containers.h" //[user.toolbar]
 #include "SciTEBase.h"
 #include "SciTEKeys.h"
 #include "UniqueInstance.h"
@@ -175,6 +175,13 @@
 	friend class UserStrip;
 
 protected:
+	//[user.toolbar]
+
+	virtual	void SetToolBar();
+	TMap<int,int, std::string, const char *> ToolBarTips;
+	HBITMAP hToolbarBitmap;
+	UINT oldToolbarBitmapID;
+	TArray<int,int> toolbarUsersPressableButtons;
 
 	int cmdShow;
 	static HINSTANCE hInstance;
diff -Nurw scintilla-scite/win32/SciTEWinBar.cxx scite/win32/SciTEWinBar.cxx
--- scintilla-scite/win32/SciTEWinBar.cxx	2016-12-22 20:54:06.000000000 +0100
+++ scite/win32/SciTEWinBar.cxx	2016-12-22 20:51:12.000000000 +0100
@@ -176,8 +176,9 @@
 	case TTN_GETDISPINFO:
 		// Ask for tooltip text
 		{
-			const GUI::gui_char *ttext = 0;
+		 //const GUI::gui_char *ttext = 0; //!-remove-[user.toolbar]
 			NMTTDISPINFOW *pDispInfo = (NMTTDISPINFOW *)notification;
+			/*
 			// Toolbar tooltips
 			switch (notification->nmhdr.idFrom) {
 			case IDM_NEW:
@@ -229,6 +230,14 @@
 				ttext = GUI_TEXT("Run Macro");
 				break;
 			default: {
+		*/
+					std::string stext;
+					if (ToolBarTips.Lookup(notification->nmhdr.idFrom, stext)) {
+						GUI::gui_string localised = localiser.Text(stext.c_str());
+						StringCopy(tooltipText, localised.c_str());
+						pDispInfo->lpszText = tooltipText;
+					}
+					else {
 					// notification->nmhdr.idFrom appears to be the buffer number for tabbar tooltips
 					GUI::Point ptCursor;
 					::GetCursorPos(PointPointer(&ptCursor));
@@ -251,6 +260,7 @@
 						StringCopy(tooltipText, path.c_str());
 						pDispInfo->lpszText = tooltipText;
 					}
+			/*
 				}
 				break;
 			}
@@ -258,6 +268,7 @@
 				GUI::gui_string localised = localiser.Text(GUI::UTF8FromString(ttext).c_str());
 				StringCopy(tooltipText, localised.c_str());
 				pDispInfo->lpszText = tooltipText;
+			*/
 			}
 			break;
 		}
@@ -451,6 +462,174 @@
 
 // Keymod param is interpreted using the same notation (and much the same
 // code) as KeyMatch uses in SciTEWin.cxx.
+struct BarButtonIn {
+	BarButtonIn() :id(0), cmd(0) {};
+	BarButtonIn(int _id, int _cmd) : id(_id), cmd(_cmd) {};
+	int id;
+	int cmd;
+};
+
+void SciTEWin::SetToolBar() {
+	HWND hwndToolBar = (HWND)wToolBar.GetID();
+	if ( hwndToolBar == 0 ) return;
+
+	ToolBarTips.RemoveAll();
+	toolbarUsersPressableButtons.RemoveAll();
+
+	// erasing all buttons
+	while ( ::SendMessage(hwndToolBar,TB_DELETEBUTTON,0,0) );
+
+	std::string fileNameForExtension = ExtensionFileName();
+
+	GUI::gui_string sIconlib = GUI::StringFromUTF8( props.GetNewExpandString("user.toolbar.iconlib.", fileNameForExtension.c_str()).c_str() );
+	HICON hIcon = NULL;
+	HICON hIconBig = NULL;
+	int iIconsCount = 0;
+	TArray<HICON,HICON> arrIcons;
+	while ( (int)::ExtractIconExW( sIconlib.c_str(), iIconsCount++, &hIconBig, &hIcon, 1 ) > 0 ) {
+		if ( hIconBig != NULL ) ::DestroyIcon( hIconBig );
+		if ( hIcon != NULL ) arrIcons.Add( hIcon );
+	}
+
+	HBITMAP hToolbarBitmapNew = 0;
+	iIconsCount = arrIcons.GetSize();
+	if (iIconsCount>0) {
+		SIZE szIcon = {16, 16};
+		SIZE szBitmap = {szIcon.cx*iIconsCount, szIcon.cy};
+		RECT rcBitmap = {0, 0, szBitmap.cx, szBitmap.cy};
+		HBRUSH hBrashBack = ::GetSysColorBrush(COLOR_BTNFACE);
+		HDC hDesktopDC = ::GetDC(NULL);
+		HDC hCompatibleDC = ::CreateCompatibleDC(hDesktopDC);
+		hToolbarBitmapNew = ::CreateCompatibleBitmap(hDesktopDC, szBitmap.cx, szBitmap.cy);
+		::SelectObject(hCompatibleDC,hToolbarBitmapNew);
+		::FillRect(hCompatibleDC,&rcBitmap,hBrashBack);
+		for (int iIcon=0;iIcon<iIconsCount;iIcon++) {
+			hIcon = arrIcons.GetAt(iIcon);
+			::DrawIconEx(hCompatibleDC,szIcon.cx*iIcon,0,hIcon,szIcon.cx,szIcon.cy,0,NULL,DI_NORMAL);
+			::DestroyIcon(hIcon);
+		}
+		::DeleteDC(hCompatibleDC);
+		::DeleteDC(hDesktopDC);
+		if ( oldToolbarBitmapID == 0 ) {
+			TBADDBITMAP addbmp = {0,(size_t)hToolbarBitmapNew};
+			if ( ::SendMessage(hwndToolBar,TB_ADDBITMAP,iIconsCount,(LPARAM)&addbmp) != (LRESULT)-1 ) {
+				oldToolbarBitmapID = (size_t)hToolbarBitmapNew;
+			}
+		} else {
+			HINSTANCE hInstanceOld = 0;
+			if ( oldToolbarBitmapID == IDR_BUTTONS ) hInstanceOld = hInstance;
+			TBREPLACEBITMAP repBmp = { hInstanceOld, oldToolbarBitmapID, 0, (size_t)hToolbarBitmapNew, iIconsCount };
+			if ( ::SendMessage(hwndToolBar,TB_REPLACEBITMAP,0,(LPARAM)&repBmp) ) {
+				oldToolbarBitmapID = (size_t)hToolbarBitmapNew;
+			}
+		}
+		if ( hToolbarBitmap != 0 ) ::DeleteObject( hToolbarBitmap );
+		hToolbarBitmap = hToolbarBitmapNew;
+	} else {
+		if ( oldToolbarBitmapID == 0 ) {
+			TBADDBITMAP addbmp = { hInstance, IDR_BUTTONS };
+			if ( ::SendMessage( hwndToolBar, TB_ADDBITMAP, 31, (LPARAM)&addbmp ) != (LRESULT)-1 ) {
+				oldToolbarBitmapID = (size_t)IDR_BUTTONS;
+			}
+		} else if ( oldToolbarBitmapID != IDR_BUTTONS ) {
+			TBREPLACEBITMAP repBmp = { 0, oldToolbarBitmapID, hInstance, IDR_BUTTONS, 31 };
+			if ( ::SendMessage(hwndToolBar,TB_REPLACEBITMAP,0,(LPARAM)&repBmp) ) {
+				oldToolbarBitmapID = (size_t)IDR_BUTTONS;
+			}
+		}
+		if ( hToolbarBitmap != 0 ) ::DeleteObject( hToolbarBitmap );
+		hToolbarBitmap = 0;
+	}
+
+	TArray<BarButtonIn,BarButtonIn> barbuttons;
+	std::string userToolbar = props.GetNewExpandString("user.toolbar.", fileNameForExtension.c_str());
+	std::replace(userToolbar.begin(), userToolbar.end(), '|', '\0');
+	const char *userContextItem = userToolbar.c_str();
+	const char *endDefinition = userContextItem + userToolbar.length();
+	while (userContextItem < endDefinition) {
+		const char *tips = userContextItem;
+		userContextItem += strlen(userContextItem) + 1;
+		const char *command = userContextItem;
+		userContextItem += strlen(userContextItem) + 1;
+		if (userContextItem < endDefinition) {
+			if ( tips[0] != '#') {
+				barbuttons.Add(
+					BarButtonIn(strlen(userContextItem)?atoi(userContextItem):-1,
+					GetMenuCommandAsInt(command)));
+					
+				if(GetMenuCommandAsInt(command) != 0) ToolBarTips[GetMenuCommandAsInt(command)]=tips;
+				
+				int id = atoi(command);
+				if (id > IDM_TOOLS) {
+					std::string prefix = "command.checked." + StdStringFromInteger(id - IDM_TOOLS) + ".";
+					std::string val = props.GetNewExpandString(prefix.c_str(), fileNameForExtension.c_str());
+					if (val != "")
+						toolbarUsersPressableButtons.Add(id);
+				}
+			}
+			userContextItem += strlen(userContextItem) + 1;
+
+		}
+		
+			int id = atoi(userContextItem)+IDM_TOOLS+50;
+
+				std::string cmda = "command." + StdStringFromInteger(id) + ".*=" +command;
+				props.Set (cmda.c_str());
+
+				std::string cmdb = "command.mode." + StdStringFromInteger(id) + ".*= subsystem:lua,savebefore:no,groupundo";
+				props.Set (cmdb.c_str());
+
+		
+	}
+
+	if (!barbuttons.GetSize()) {
+		ToolBarTips[IDM_NEW]			= "New";
+		ToolBarTips[IDM_OPEN]			= "Open";
+		ToolBarTips[IDM_SAVE]			= "Save";
+		ToolBarTips[IDM_CLOSE]			= "Close";
+		ToolBarTips[IDM_PRINT]			= "Print";
+		ToolBarTips[IDM_CUT]			= "Cut";
+		ToolBarTips[IDM_COPY]			= "Copy";
+		ToolBarTips[IDM_PASTE]			= "Paste";
+		ToolBarTips[IDM_CLEAR]			= "Delete";
+		ToolBarTips[IDM_UNDO]			= "Undo";
+		ToolBarTips[IDM_REDO]			= "Redo";
+		ToolBarTips[IDM_FIND]			= "Find";
+		ToolBarTips[IDM_REPLACE]		= "Replace";
+		barbuttons.Add(BarButtonIn(-1, 0));
+		barbuttons.Add(BarButtonIn(0, IDM_NEW));
+		barbuttons.Add(BarButtonIn(1, IDM_OPEN));
+		barbuttons.Add(BarButtonIn(2, IDM_SAVE));
+		barbuttons.Add(BarButtonIn(12, IDM_CLOSE));
+		barbuttons.Add(BarButtonIn(-1, 0));
+		barbuttons.Add(BarButtonIn(3, IDM_PRINT));
+		barbuttons.Add(BarButtonIn(-1, 0));
+		barbuttons.Add(BarButtonIn(4, IDM_CUT));
+		barbuttons.Add(BarButtonIn(5, IDM_COPY));
+		barbuttons.Add(BarButtonIn(6, IDM_PASTE));
+		barbuttons.Add(BarButtonIn(7, IDM_CLEAR));
+		barbuttons.Add(BarButtonIn(-1, 0));
+		barbuttons.Add(BarButtonIn(8, IDM_UNDO));
+		barbuttons.Add(BarButtonIn(9, IDM_REDO));
+		barbuttons.Add(BarButtonIn(-1, 0));
+		barbuttons.Add(BarButtonIn(10, IDM_FIND));
+		barbuttons.Add(BarButtonIn(11, IDM_REPLACE));
+	}
+
+	TBBUTTON *tbb = new TBBUTTON[barbuttons.GetSize()];
+	for (int i = 0;i < barbuttons.GetSize();i++) {
+		tbb[i].idCommand = barbuttons[i].cmd;
+		tbb[i].iBitmap = barbuttons[i].id;
+		tbb[i].fsState = TBSTATE_ENABLED;
+		tbb[i].fsStyle = static_cast<BYTE>(-1 == tbb[i].iBitmap ? TBSTYLE_SEP : TBSTYLE_BUTTON);
+		tbb[i].dwData = barbuttons[i].cmd;
+		tbb[i].iString = 0;
+	}
+	::SendMessage(hwndToolBar, TB_BUTTONSTRUCTSIZE, sizeof(TBBUTTON), 0);
+	::SendMessage(hwndToolBar, TB_ADDBUTTONS, barbuttons.GetSize(), reinterpret_cast<LPARAM>(tbb));
+	delete []tbb;
+	CheckMenus();
+}
 
 void SciTEWin::SetMenuItemNew(int menuNumber, int subMenuNumber, int position, int itemID,
                            const GUI::gui_char *text, const GUI::gui_char *mnemonic) {
@@ -506,11 +785,20 @@
 	}
 }
 
+static void CheckToolbarButton(HWND wTools, int id, bool enable) {
+	if (wTools) {
+		::SendMessage(wTools, TB_CHECKBUTTON, id,
+		          LongFromTwoShorts(static_cast<short>(enable ? TRUE : FALSE), 0));
+	}
+}
+
 void SciTEWin::CheckAMenuItem(int wIDCheckItem, bool val) {
-	if (val)
+	if (val) {
 		CheckMenuItem(::GetMenu(MainHWND()), wIDCheckItem, MF_CHECKED | MF_BYCOMMAND);
-	else
+	}else{
 		CheckMenuItem(::GetMenu(MainHWND()), wIDCheckItem, MF_UNCHECKED | MF_BYCOMMAND);
+		::CheckToolbarButton(reinterpret_cast<HWND>(wToolBar.GetID()), wIDCheckItem, val); //[user.toolbar]
+	}
 }
 
 void EnableButton(HWND wTools, int id, bool enable) {
@@ -529,6 +717,17 @@
 }
 
 void SciTEWin::CheckMenus() {
+// check user toolbar buttons status
+	if (props.GetInt("toolbar.visible") != 0) {
+		std::string fileNameForExtension = ExtensionFileName();
+		for (int i = 0; i < toolbarUsersPressableButtons.GetSize(); i++) {
+			std::string prefix = "command.checked." + StdStringFromInteger(toolbarUsersPressableButtons[i] - IDM_TOOLS) + ".";
+			std::string val = props.GetNewExpandString(prefix.c_str(), fileNameForExtension.c_str());
+			int ischecked = val.empty() ? 0 : atoi(val.c_str());
+			::CheckToolbarButton(reinterpret_cast<HWND>(wToolBar.GetID()), toolbarUsersPressableButtons[i], ischecked);
+		}
+	}
+
 	SciTEBase::CheckMenus();
 	::CheckMenuRadioItem(::GetMenu(MainHWND()), IDM_EOL_CRLF, IDM_EOL_LF,
 	                   wEditor.Call(SCI_GETEOLMODE) - SC_EOL_CRLF + IDM_EOL_CRLF, 0);
@@ -540,7 +540,9 @@
 	for (int i = 0; i <= ::GetMenuItemCount(hmenu); i++) {
 		GUI::gui_char buff[200];
 		buff[0] = '\0';
-		MENUITEMINFOW mii = {};
+		//MENUITEMINFOW mii = MENUITEMINFOW();
+		MENUITEMINFOW mii;
+		memset(&mii, 0, sizeof(mii));
 		mii.cbSize = sizeof(mii);
 		mii.fMask = MIIM_CHECKMARKS | MIIM_DATA | MIIM_ID |
 		            MIIM_STATE | MIIM_SUBMENU | MIIM_TYPE;
@@ -609,6 +810,7 @@
 #define TB_LOADIMAGES (WM_USER + 50)
 #endif
 
+/*!-remove-[user.toolbar]
 struct BarButton {
 	int id;
 	int cmd;
@@ -634,7 +846,7 @@
     { STD_FIND,     IDM_FIND },
     { STD_REPLACE,  IDM_REPLACE },
 };
-
+*/
 static WNDPROC stDefaultTabProc = NULL;
 static LRESULT PASCAL TabWndProc(HWND hWnd, UINT iMessage, WPARAM wParam, LPARAM lParam) {
 
@@ -888,7 +1088,7 @@
 	               hInstance,
 	               0);
 	wToolBar = hwndToolBar;
-
+/*!-remove-[user.toolbar] 
 	::SendMessage(hwndToolBar, TB_BUTTONSTRUCTSIZE, sizeof(TBBUTTON), 0);
 	::SendMessage(hwndToolBar, TB_SETBITMAPSIZE, 0, tbLarge ? MAKELPARAM(24, 24) : MAKELPARAM(16, 16));
 	::SendMessage(hwndToolBar, TB_LOADIMAGES, 
@@ -920,7 +1122,7 @@
 	}
 
 	::SendMessage(hwndToolBar, TB_ADDBUTTONS, ELEMENTS(bbs), reinterpret_cast<LPARAM>(tbb));
-
+*/
 	wToolBar.Show();
 
 	INITCOMMONCONTROLSEX icce;
