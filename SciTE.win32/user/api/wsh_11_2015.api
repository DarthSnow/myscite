## Nov 2015, Marcedo@HabmalneFrage.de
# From: https://sourceforge.net/projects/scite-webdev/?source=directory

# ---Objects
Scripting.Signer()----\t\nThe Scripting.Signer object enables an author to sign a script \t\nwith a digital signature and a recipient to verify the signature's authenticity and trustworthiness. ( WScripting Objects )\t\n---- \t\n<job>\t\n<runtime>\t\n<named name="file" helpstring="the file to sign" required="true" type="string"/>\t\n<named name="cert" helpstring="the name of the signing certificate" required="true" type="string"/>\t\n<named name="store" helpstring="the name of the certificate store" required="false" type="string"/>\t\n</runtime>\t\n<script language="JScript">\t\nvar Signer, File, Cert, Store = "my",\t\nif (!(WScript.Arguments.Named.Exists("cert") && .Arguments.Named.Exists("file"))) \t\n{\t\nWScript.Arguments.ShowUsage(),\t\nWScript.Quit(),\t\n}\t\nSigner = new ActiveXObject("Scripting.Signer"),\t\nFile  = WScript.Arguments.Named("file"),\t\nCert  = WScript.Arguments.Named("cert"),\t\nif (WScript.Arguments.Named.Exists("store"))\t\n{\t\nStore = WScript.Arguments.Named("store"),\t\n}\t\nSigner.SignFile(File, Cert, Store),\t\n</script>\t\n</job>
WScript()----\t\nProvides access to root object for the Windows Script Host \t\nobject model. ( WScripting Objects )\t\n---- \t\n
WshArguments()----\t\nProvides access to the entire collection of command-line parameters \t\n— in the order in which they were originally entered. ( WScripting Objects )\t\n---- \t\n
WshEnvironment()----\t\nProvides access to the collection of Windows environment variables. ( WScripting Objects )\t\n---- \t\n
WshController()----\t\nProvides access to the CreateScript() method (for creating \t\na remote script process). ( WScripting Objects )\t\n---- \t\n
WshNamed()----\t\nProvides access to the named arguments from the command line. ( WScripting Objects )\t\n---- \t\n
WshNetwork()----\t\nProvides access to the shared resources on the network to \t\nwhich your computer is connected. ( WScripting Objects )\t\n---- \t\n<package>\t\n<job id="vbs">\t\n<script language="VBScript">\t\nSet WshNetwork = WScript.CreateObject("WScript.Network")\t\nWScript.Echo "Domain = " & WshNetwork.UserDomain\t\nWScript.Echo "Computer Name = " & WshNetwork.ComputerName\t\nWScript.Echo "User Name = " & WshNetwork.UserName\t\n</script>\t\n</job>\t\n<job id="js">\t\n<script language="JScript">\t\nvar WshNetwork = WScript.CreateObject("WScript.Network"),\t\nWScript.Echo("Domain = " + WshNetwork.UserDomain),\t\nWScript.Echo("Computer Name = " + WshNetwork.ComputerName),\t\nWScript.Echo("User Name = " + WshNetwork.UserName),\t\n</script>\t\n</job>\t\n</package>
WshRemote()----\t\nProvides access to the remote script process. ** ( WScripting Objects )\t\n---- \t\n
WshRemoteError()----\t\nProvides access to the error information available when a \t\nremote script (a WshRemote object) terminates as a result of a script error. ( WScripting Objects )\t\n---- \t\n
WshScriptExec()----\t\nProvides status information about a script run with Exec along \t\nwith access to the StdIn, StdOut, and StdErr streams. ( WScripting Objects )\t\n---- \t\n
WshShell()----\t\nProvides access to the native Windows shell. ( WScripting Objects )\t\n---- \t\n<package>\t\n<job id="vbs">\t\n<script language="VBScript">\t\nset WshShell = WScript.CreateObject("WScript.Shell")\t\nstrDesktop = WshShell.SpecialFolders("Desktop")\t\nset oShellLink = WshShell.CreateShortcut(strDesktop & "\Shortcut Script.lnk")\t\noShellLink.TargetPath = WScript.ScriptFullName\t\noShellLink.WindowStyle = 1\t\noShellLink.Hotkey = "CTRL+SHIFT+F"\t\noShellLink.IconLocation = "notepad.exe, 0"\t\noShellLink.Description = "Shortcut Script"\t\noShellLink.WorkingDirectory = strDesktop\t\noShellLink.Save\t\n</script>\t\n</job>\t\n<job id="js">\t\n<script language="JScript">\t\nvar WshShell = WScript.CreateObject("WScript.Shell"),\t\nstrDesktop = WshShell.SpecialFolders("Desktop"),\t\nvar oShellLink = WshShell.CreateShortcut(strDesktop + "\\Shortcut Script.lnk"),\t\noShellLink.TargetPath = WScript.ScriptFullName,\t\noShellLink.WindowStyle = 1,\t\noShellLink.Hotkey = "CTRL+SHIFT+F",\t\noShellLink.IconLocation = "notepad.exe, 0",\t\noShellLink.Description = "Shortcut Script",\t\noShellLink.WorkingDirectory = strDesktop,\t\noShellLink.Save(),\t\n</script>\t\n</job>\t\n</package>
WshShortcut()----\t\nAllows you to create a shortcut programmatically. ( WScripting Objects )\t\n---- \t\n
WshSpecialFolders()----\t\nProvides access to the collection of Windows special folders. ( WScripting Objects )\t\n---- \t\n
WshUnnamed()----\t\nProvides access to the unnamed arguments from the command line. ( WScripting Objects )\t\n---- \t\n
WshUrlShortcut()----\t\nAllows you to create a shortcut to an Internet resource program\t\nmatically. ( WScripting Objects )\t\n---- \t\n

# ---- Functions
Abs()----\t\nReturns the absolute value of a number.\t\n( Wsh Abs )\t\n---- \t\nAbs(number)
Array()----\t\nReturns a Variant containing an array.  **\t\n( Wsh Array )\t\n---- \t\nArray(arglist)
Asc()----\t\nReturns the ANSI character code corresponding to the first \t\nletter in a string. **\t\n( Wsh Asc )\t\n---- \t\nAsc(string)
Atn()----\t\nReturns the arctangent of a number. **\t\n( Wsh Atn )\t\n---- \t\nAtn(number)
CBool()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype Boolean.\t\n( Wsh CBool )\t\n---- \t\nCBool(expression)
CByte()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype Byte.\t\n( Wsh CByte )\t\n---- \t\nCByte(expression)
CCur()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype Currency.\t\n( Wsh CCur )\t\n---- \t\nCCur(expression)
CDate()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype Date.\t\n( Wsh CDate )\t\n---- \t\nCDate(date)
CDbl()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype Double.\t\n( Wsh CDbl )\t\n---- \t\nCDbl(expression)
Chr()----\t\nReturns the character associated with the specified ANSI character \t\ncode. **\t\n( Wsh Chr )\t\n---- \t\nChr(charcode)
CInt()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype Integer. **\t\n( Wsh CInt )\t\n---- \t\nCInt(expression)
CLng()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype Long. **\t\n( Wsh CLng )\t\n---- \t\nCLng(expression)
Conversion()----\t\nThe following table lists the conversion functions in VBScript.\t\n( Wsh Conversion )\t\n---- \t\n
Cos()----\t\nReturns the cosine of an angle.\t\n( Wsh Cos )\t\n---- \t\nCos(number)
CreateObject(servername,typename,location)----\t\nCreates and returns a reference to an Automation object.\t\n( Wsh CreateObject )\t\n---- \t\nCreateObject(servername.typename [, location])
CSng()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype Single.\t\n( Wsh CSng )\t\n---- \t\nCSng(expression) 
CStr()----\t\nReturns an expression that has been converted to a Variant \t\nof subtype String.\t\n( Wsh CStr )\t\n---- \t\nCStr(expression)
Date()----\t\nReturns the current system date.\t\n( Wsh Date )\t\n---- \t\nDate
DateAdd(interval,number,date)----\t\nReturns a date to which a specified time interval has been added.\t\n( Wsh DateAdd )\t\n---- \t\nDateAdd(interval, number, date)
DateDiff(interval,date1,,date2,firstdayofweek,firstweekofyear)----\t\nReturns the number of intervals between two dates.\t\n( Wsh DateDiff )\t\n---- \t\nDateDiff(interval, date1, date2 [,firstdayofweek[, firstweekofyear]])
DatePart(interval,date,firstdayof,week,firstweekofyear)----\t\nReturns the specified part of a given date.\t\n( Wsh DatePart )\t\n---- \t\nDatePart(interval, date[, firstdayofweek[, firstweekofyear]])
DateSerial(year,month,day)----\t\nReturns a Variant of subtype Date for a specified year, month, \t\nand day.\t\n( Wsh DateSerial )\t\n---- \t\nDateSerial(year, month, day)
DateValue()----\t\nReturns a Variant of subtype Date.\t\n( Wsh DateValue )\t\n---- \t\nDateValue(date)
Day()----\t\nReturns a whole number between 1 and 31, inclusive, representing \t\nthe day of the month.\t\n( Wsh Day )\t\n---- \t\nDay(date)
Escape(charString)----\t\nEncodes a string so it contains only ASCII characters. **\t\n( Wsh Escape )\t\n---- \t\nEscape(charString)
Eval(expression)----\t\nEvaluates an expression and returns the result. **\t\n( Wsh Eval )\t\n---- \t\nEval(expression)
Exp()----\t\nReturns e (the base of natural logarithms) raised to a power. **\t\n( Wsh Exp )\t\n---- \t\nExp(number)
Filter(InputStrings,Value,Include,Compare)----\t\nReturns a zero-based array containing a subset of a string \t\narray based on a specified filter criteria.\t\n( Wsh Filter )\t\n---- \t\nFilter(InputStrings, Value[, Include[, Compare]])
FormatCurrency(Expression,NumDigitsAfterDecimal,IncludeLeadingDigit,UseParensForNegativeNumbers,GroupDigits)----\t\nReturns an expression formatted as a currency value using \t\nthe currency symbol defined in the system control panel.  **\t\n( Wsh FormatCurrency )\t\n---- \t\nFormatCurrency(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit\t\n[,UseParensForNegativeNumbers [,GroupDigits]]]]) 
FormatDateTime(Date,NamedFormat)----\t\nReturns an expression formatted as a date or time.\t\n( Wsh FormatDateTime )\t\n---- \t\nFormatDateTime(Date[, NamedFormat])
FormatNumber(Expression,NumDigitsAfterDecimal,IncludeLeadingDigit,UseParensForNegativeNumbers,GroupDigits)----\t\nReturns an expression formatted as a number.  **\t\n( Wsh FormatNumber )\t\n---- \t\nFormatNumber(Expression [,NumDigitsAfterDecimal [,IncludeLeadingDigit\t\n[,UseParensForNegativeNumbers [,GroupDigits]]]])
FormatPercent(Expression,NumDigitsAfterDecimal,IncludeLeadingDigit,UseParensForNegativeNumbers,GroupDigits)----\t\nReturns an expression formatted as a percentage (multiplied \t\nby 100) with a trailing % character.  **\t\n( Wsh FormatPercent )\t\n---- \t\nFormatPercent(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit\t\n[,UseParensForNegativeNumbers [,GroupDigits]]]])
GetLocale()----\t\nReturns the current locale ID value.\t\n( Wsh GetLocale )\t\n---- \t\nGetLocale()
GetObject(pathname,class,appname,objectype)----\t\nReturns a reference to an Automation object from a file.  **\t\n( Wsh GetObject )\t\n---- \t\nGetObject([pathname] [, class])
GetRef(object,event,procname)----\t\nReturns a reference to a procedure that can be bound to an event.\t\n( Wsh GetRef )\t\n---- \t\nSet object.eventname = GetRef(procname)
Hex()----\t\nReturns a string representing the hexadecimal value of a number.\t\n( Wsh Hex )\t\n---- \t\nHex(number)
Hour()----\t\nReturns a whole number between 0 and 23, inclusive, representing \t\nthe hour of the day.\t\n( Wsh Hour )\t\n---- \t\nHour(time)
InputBox(prompt,title,default,xpos,ypos,helpfile,context)----\t\nDisplays a prompt in a dialog box, waits for the user to input \t\ntext or click a button, and returns the contents of the text box.\t\n( Wsh InputBox )\t\n---- \t\nInputBox(prompt[, title][, default][, xpos][, ypos][, helpfile, context])
InStr(start,string1,string2,compare)----\t\nReturns the position of the first occurrence of one string \t\nwithin another. **\t\n( Wsh InStr )\t\n---- \t\nInStr([start, ]string1, string2[, compare])
InStrRev(string1,string2,start,compare)----\t\nReturns the position of an occurrence of one string within \t\nanother, from the end of string.  **\t\n( Wsh InStrRev )\t\n---- \t\nInStrRev(string1, string2[, start[, compare]])
Int()----\t\nReturns the integer portion of a number.\t\n( Wsh Int )\t\n---- \t\n
IsArray()----\t\nReturns a Boolean value indicating whether a variable is an array.\t\n( Wsh IsArray )\t\n---- \t\nIsArray(varname)
IsDate()----\t\nReturns a Boolean value indicating whether an expression can \t\nbe converted to a date.\t\n( Wsh IsDate )\t\n---- \t\nIsDate(expression)
IsEmpty()----\t\nReturns a Boolean value indicating whether a variable has \t\nbeen initialized.\t\n( Wsh IsEmpty )\t\n---- \t\nIsEmpty(expression)
IsNull()----\t\nReturns a Boolean value that indicates whether an expression \t\ncontains no valid data (Null).\t\n( Wsh IsNull )\t\n---- \t\nIsNull(expression)
IsNumeric()----\t\nReturns a Boolean value indicating whether an expression can \t\nbe evaluated as a number.\t\n( Wsh IsNumeric )\t\n---- \t\nIsNumeric(expression)
IsObject()----\t\nReturns a Boolean value indicating whether an expression references \t\na valid Automation object.\t\n( Wsh IsObject )\t\n---- \t\nIsObject(expression)
Join(list,delimiter)----\t\nReturns a string created by joining a number of substrings \t\ncontained in an array.\t\n( Wsh Join )\t\n---- \t\nJoin(list[, delimiter])
LBound(arrayname,dimension)----\t\nReturns the smallest available subscript for the indicated \t\ndimension of an array.\t\n( Wsh LBound )\t\n---- \t\nLBound(arrayname[, dimension])
LCase()----\t\nReturns a string that has been converted to lowercase.\t\n( Wsh LCase )\t\n---- \t\nLCase(string)
Left(string,length)----\t\nReturns a specified number of characters from the left side \t\nof a string. **\t\n( Wsh Left )\t\n---- \t\nLeft(string, length)
Len(string,varname)----\t\nReturns the number of characters in a string or the number \t\nof bytes required to store a variable.  **\t\n( Wsh Len )\t\n---- \t\nLen(string | varname)
LoadPicture()----\t\nReturns a picture object. Available only on 32-bit platforms.\t\n( Wsh LoadPicture )\t\n---- \t\nLoadPicture(picturename)
Log()----\t\nReturns the natural logarithm of a number.\t\n( Wsh Log )\t\n---- \t\nLog(number)
RTrimand Trim Functions----\t\nLTrim\t\n( Wsh RTrim )\t\n---- \t\n
Math()----\t\nThe following table lists the VBScript math functions.\t\n( Wsh Math )\t\n---- \t\n
Mid(string,start,length)----\t\nReturns a specified number of characters from a string. **\t\n( Wsh Mid )\t\n---- \t\nMid(string, start[, length])
Minute()----\t\nReturns a whole number between 0 and 59, inclusive, representing \t\nthe minute of the hour.\t\n( Wsh Minute )\t\n---- \t\nMinute(time)
Month()----\t\nReturns a whole number between 1 and 12, inclusive, representing \t\nthe month of the year.\t\n( Wsh Month )\t\n---- \t\nMonth(date)
MonthName(month,abbreviate)----\t\nReturns a string indicating the specified month.\t\n( Wsh MonthName )\t\n---- \t\nMonthName(month[, abbreviate])
MsgBox(prompt,buttons,title,helpfile,context)----\t\nDisplays a message in a dialog box, waits for the user to \t\nclick a button, and returns a value indicating which button the user clicked.\t\n( Wsh MsgBox )\t\n---- \t\nMsgBox(prompt[, buttons][, title][, helpfile, context])
Now()----\t\nReturns the current date and time according to the setting \t\nof your computer's system date and time.\t\n( Wsh Now )\t\n---- \t\nNow
Oct()----\t\nReturns a string representing the octal value of a number.\t\n( Wsh Oct )\t\n---- \t\nOct(number)
Replace(expression,find,replacewith,start,count,compare)----\t\nReturns a string in which a specified substring has been replaced \t\nwith another substring a specified number of times.\t\n( Wsh Replace )\t\n---- \t\nReplace(expression, find, replacewith[, start[, count[, compare]]])
RGB(red,green,blue)----\t\nReturns a whole number representing an RGB color value.\t\n( Wsh RGB )\t\n---- \t\nRGB(red, green, blue)
Right(string,length)----\t\nReturns a specified number of characters from the right side \t\nof a string. **\t\n( Wsh Right )\t\n---- \t\nRight(string, length)
Rnd()----\t\nReturns a random number. **\t\n( Wsh Rnd )\t\n---- \t\nRnd[(number)]
Round(expression,numdecimalplaces)----\t\nReturns a number rounded to a specified number of decimal places. **\t\n( Wsh Round )\t\n---- \t\nRound(expression[, numdecimalplaces])
ScriptEngine()----\t\nReturns a string representing the scripting language in use.\t\n( Wsh ScriptEngine )\t\n---- \t\nScriptEngine
ScriptEngineBuildVersion()----\t\nReturns the build version number of the scripting engine in use.\t\n( Wsh ScriptEngineBuildVersion )\t\n---- \t\nScriptEngineBuildVersion
ScriptEngineMajorVersion()----\t\nReturns the major version number of the scripting engine in use.\t\n( Wsh ScriptEngineMajorVersion )\t\n---- \t\nScriptEngineMajorVersion
ScriptEngineMinorVersion()----\t\nReturns the minor version number of the scripting engine in use.\t\n( Wsh ScriptEngineMinorVersion )\t\n---- \t\nScriptEngineMinorVersion
Second()----\t\nReturns a whole number between 0 and 59, inclusive, representing \t\nthe second of the minute.\t\n( Wsh Second )\t\n---- \t\nSecond(time)
SetLocale()----\t\nSets the global locale and returns the previous locale.\t\n( Wsh SetLocale )\t\n---- \t\nSetLocale(lcid)
Sgn()----\t\nReturns an integer indicating the sign of a number.\t\n( Wsh Sgn )\t\n---- \t\nSgn(number)
Sin()----\t\nReturns the sine of an angle.\t\n( Wsh Sin )\t\n---- \t\nSin(number)
Space()----\t\nReturns a string consisting of the specified number of spaces.\t\n( Wsh Space )\t\n---- \t\nSpace(number)
Split(expression,delimiter,count,compare)----\t\nReturns a zero-based, one-dimensional array containing a specified \t\nnumber of substrings.\t\n( Wsh Split )\t\n---- \t\nSplit(expression[, delimiter[, count[, compare]]])
Sqr()----\t\nReturns the square root of a number.\t\n( Wsh Sqr )\t\n---- \t\nSqr(number)
StrComp(string1,string2,compare)----\t\nReturns a value indicating the result of a string comparison.\t\n( Wsh StrComp )\t\n---- \t\nStrComp(string1, string2[, compare])
String(number,character)----\t\nReturns a repeating character string of the length specified.\t\n( Wsh String )\t\n---- \t\nString(number, character)
StrReverse()----\t\nReturns a string in which the character order of a specified \t\nstring is reversed.\t\n( Wsh StrReverse )\t\n---- \t\nStrReverse(string1)
Tan()----\t\nReturns the tangent of an angle.\t\n( Wsh Tan )\t\n---- \t\nTan(number)
Time()----\t\nReturns a Variant of subtype Date indicating the current system \t\ntime.\t\n( Wsh Time )\t\n---- \t\nTime
Timer()----\t\nReturns the number of seconds that have elapsed since 12:00 \t\nAM (midnight).\t\n( Wsh Timer )\t\n---- \t\nTimer
TimeSerial(hour,minute,second)----\t\nReturns a Variant of subtype Date containing the time for \t\na specific hour, minute, and second.\t\n( Wsh TimeSerial )\t\n---- \t\nTimeSerial(hour, minute, second)
TimeValue()----\t\nReturns a Variant of subtype Date containing the time.\t\n( Wsh TimeValue )\t\n---- \t\nTimeValue(time)
TypeName()----\t\nReturns a string that provides Variant subtype information \t\nabout a variable.\t\n( Wsh TypeName )\t\n---- \t\nTypeName(varname)
UBound(arrayname,dimension)----\t\nReturns the largest available subscript for the indicated \t\ndimension of an array.\t\n( Wsh UBound )\t\n---- \t\nUBound(arrayname[, dimension])
UCase()----\t\nReturns a string that has been converted to uppercase.\t\n( Wsh UCase )\t\n---- \t\nUCase(string)
Unescape(charString)----\t\nDecodes a string encoded with the Escape function.\t\n( Wsh Unescape )\t\n---- \t\nUnescape(charString)
VarType()----\t\nReturns a value indicating the subtype of a variable. **\t\n( Wsh VarType )\t\n---- \t\nVarType(varname)
Weekday(date,firstdayofweek)----\t\nReturns a whole number representing the day of the week.\t\n( Wsh Weekday )\t\n---- \t\nWeekday(date, [firstdayofweek])
WeekdayName(weekday,abbreviate,firstdayofweek)----\t\nReturns a string indicating the specified day of the week.\t\n( Wsh WeekdayName )\t\n---- \t\nWeekdayName(weekday, abbreviate, firstdayofweek)
Year()----\t\nReturns a whole number representing the year.\t\n( Wsh Year )\t\n---- \t\nYear(date)


# ---- Properties
Arguments()----\t\nReturns the WshArguments object (a collection of arguments). ( WScripting Properties )\t\n---- \t\nobject.Arguments
Arguments()----\t\nSets the arguments for a shortcut, or identifies a shortcut's \t\narguments. ( WScripting Properties )\t\n---- \t\nobject.Arguments
AtEndOfLine()----\t\nReturns a Boolean value indicating whether the end of a line \t\nin an input stream has been reached. ( WScripting Properties )\t\n---- \t\nobject.AtEndOfLine 
AtEndOfStream()----\t\nReturns a Boolean value indicating whether the end of an input \t\nstream has been reached. ( WScripting Properties )\t\n---- \t\nobject.AtEndOfStream 
BuildVersion( )----\t\nReturns the Windows Script Host build version number. ( WScripting Properties )\t\n---- \t\nObject.BuildVersion
Character()----\t\nReports the specific character in a line of code that contains \t\nan error. ( WScripting Properties )\t\n---- \t\nObject.Character
Column()----\t\nReturns the column number of the current character position \t\nin an input stream. ( WScripting Properties )\t\n---- \t\nobject.Column 
ComputerName()----\t\nReturns the name of the computer system. ( WScripting Properties )\t\n---- \t\nobject.ComputerName 
CurrentDirectory()----\t\nRetrieves or changes the current active directory. ( WScripting Properties )\t\n---- \t\nobject.CurrentDirectory
Description()----\t\nReturns a shortcut's description. ( WScripting Properties )\t\n---- \t\nobject.Description 
Description()----\t\nContains a brief description of the error that caused the \t\nremote script to terminate. ( WScripting Properties )\t\n---- \t\nObject.Description
Environment(strType)----\t\nReturns the WshEnvironment object (a collection of environment \t\nvariables). ** ( WScripting Properties )\t\n---- \t\nobject.Environment ([strType]) 
Error()----\t\nExposes the WshRemoteError object, which holds information \t\nabout the error that caused the remote script to terminate prematurely. ( WScripting Properties )\t\n---- \t\nObject.Error
ExitCode( )----\t\nReturns the exit code set by a script or program run using \t\nthe Exec() method. ( WScripting Properties )\t\n---- \t\nObject.ExitCode
FullName()----\t\nReturns the fully qualified path of the host executable (CScript.\t\nexe or WScript.exe). ( WScripting Properties )\t\n---- \t\nobject.FullName 
FullName()----\t\nReturns the fully qualified path of the shortcut object's target. ( WScripting Properties )\t\n---- \t\nobject.FullName 
FullName()----\t\nReturns the fully qualified path of the shortcut object's target. ( WScripting Properties )\t\n---- \t\nobject.FullName 
Hotkey(strHotkey,KeyModifier,KeyName)----\t\nAssigns a key-combination to a shortcut, or identifies the \t\nkey-combination assigned to a shortcut. ** ( WScripting Properties )\t\n---- \t\nobject.Hotkey = strHotkey
IconLocation(strIconLocation)----\t\nAssigns an icon to a shortcut, or identifies the icon assigned \t\nto a shortcut. ( WScripting Properties )\t\n---- \t\nobject.IconLocation = strIconLocation 
Interactive()----\t\nSets the script mode, or identifies the script mode. ( WScripting Properties )\t\n---- \t\nobject.Interactive 
Item(natIndex)----\t\nExposes a specified item from a collection. ( WScripting Properties )\t\n---- \t\nObject.Item(natIndex) 
Item(key)----\t\nProvides access to the items in the WshNamed object. ( WScripting Properties )\t\n---- \t\nObject.Item(key)
Item(key)----\t\nReturns an item using a zero-based index. ( WScripting Properties )\t\n---- \t\nObject.Item(key)
length()----\t\nReturns the number of command-line parameters belonging to \t\na script (the number of items in an argument's collection). ( WScripting Properties )\t\n---- \t\nobject.length 
length()----\t\nReturns the number of Windows environment variables on the \t\nlocal computer system (the number of items in an Environment collection). ( WScripting Properties )\t\n---- \t\nobject.length 
length()----\t\nReturns the number of Windows special folders on the local \t\ncomputer system (the number of items in a SpecialFolders collection). ( WScripting Properties )\t\n---- \t\nobject.length 
Line(strStream)----\t\nReturns the current line number in an input stream. ( WScripting Properties )\t\n---- \t\nobject.strStream.Line 
Line()----\t\nIdentifies the line in a script that contains an error. ( WScripting Properties )\t\n---- \t\nObject.Line
Name()----\t\nReturns the name of the WScript object (the host executable file). ( WScripting Properties )\t\n---- \t\nobject.Name 
Named( )----\t\nReturns the WshNamed object (a collection of named arguments). ( WScripting Properties )\t\n---- \t\nObject.Named
Number()----\t\nReports the error number representing a script error. ( WScripting Properties )\t\n---- \t\nObject.Number
Path()----\t\nReturns the name of the directory containing the host executable (CScript.\t\nexe or WScript.exe). ( WScripting Properties )\t\n---- \t\nobject.Path 
ProcessID( )----\t\nThe process ID (PID) for a process started with the WshScriptExec \t\nobject. ( WScripting Properties )\t\n---- \t\nObject.ProcessID
RelativePath()----\t\nAssigns a relative path to a shortcut, or identifies the relative \t\npath of a shortcut. ( WScripting Properties )\t\n---- \t\nobject.RelativePath
ScriptFullName()----\t\nReturns the full path of the currently running script. ( WScripting Properties )\t\n---- \t\nobject.ScriptFullName
ScriptName()----\t\nReturns the file name of the currently running script. ( WScripting Properties )\t\n---- \t\nobject.ScriptName
Source()----\t\nIdentifies the COM object responsible for causing the script error. ( WScripting Properties )\t\n---- \t\nObject.Source
SourceText()----\t\nContains the line of source code that caused an error. ( WScripting Properties )\t\n---- \t\nObject.SourceText
SpecialFolders(objWshSpecialFolders)----\t\nReturns a SpecialFolders object (a collection of special folders). ( WScripting Properties )\t\n---- \t\nobject.SpecialFolders(objWshSpecialFolders) 
Status()----\t\nReports the current status of the remote script. ( WScripting Properties )\t\n---- \t\nObject.Status
Status(WshRunning,(,=,0),WshFinished,(,=,1))----\t\nProvides status information about a script run with the Exec() \t\nmethod. ( WScripting Properties )\t\n---- \t\nObject.Status
StdErr()----\t\nExposes the write-only error output stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdErr 
StdErr()----\t\nProvides access to the stderr output stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdErr
StdIn()----\t\nExposes the read-only input stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdIn 
StdIn()----\t\nExposes the stdin input stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdIn
StdOut()----\t\nExposes the write-only output stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdOut 
StdOut()----\t\nExposes the write-only stdout output stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdOut
TargetPath()----\t\nThe path to the shortcut's executable. ( WScripting Properties )\t\n---- \t\nobject.TargetPath
Unnamed( )----\t\nReturns the WshUnnamed object (a collection of unnamed arguments). ( WScripting Properties )\t\n---- \t\nObject.Unnamed
UserDomain()----\t\nReturns a user's domain name. ( WScripting Properties )\t\n---- \t\nobject.UserDomain
UserName()----\t\nReturns the name of a user. ( WScripting Properties )\t\n---- \t\nobject.UserName 
Version()----\t\nReturns the version of Windows Script Host. ( WScripting Properties )\t\n---- \t\nobject.Version 
WindowStyle(intWindowStyle)----\t\nAssigns a window style to a shortcut, or identifies the type \t\nof window style used by a shortcut. ( WScripting Properties )\t\n---- \t\nobject.WindowStyle = intWindowStyle
WorkingDirectory(strWorkingDirectory)----\t\nAssign a working directory to a shortcut, or identifies the \t\nworking directory used by a shortcut. ( WScripting Properties )\t\n---- \t\nobject.WorkingDirectory = strWorkingDirectory

#---Properties dot Prefixed
.Arguments()----\t\nReturns the WshArguments object (a collection of arguments). ( WScripting Properties )\t\n---- \t\nobject.Arguments
.Arguments()----\t\nSets the arguments for a shortcut, or identifies a shortcut's \t\narguments. ( WScripting Properties )\t\n---- \t\nobject.Arguments
.AtEndOfLine()----\t\nReturns a Boolean value indicating whether the end of a line \t\nin an input stream has been reached. ( WScripting Properties )\t\n---- \t\nobject.AtEndOfLine 
.AtEndOfStream()----\t\nReturns a Boolean value indicating whether the end of an input \t\nstream has been reached. ( WScripting Properties )\t\n---- \t\nobject.AtEndOfStream 
.BuildVersion( )----\t\nReturns the Windows Script Host build version number. ( WScripting Properties )\t\n---- \t\nObject.BuildVersion
.Character()----\t\nReports the specific character in a line of code that contains \t\nan error. ( WScripting Properties )\t\n---- \t\nObject.Character
.Column()----\t\nReturns the column number of the current character position \t\nin an input stream. ( WScripting Properties )\t\n---- \t\nobject.Column 
.ComputerName()----\t\nReturns the name of the computer system. ( WScripting Properties )\t\n---- \t\nobject.ComputerName 
.CurrentDirectory()----\t\nRetrieves or changes the current active directory. ( WScripting Properties )\t\n---- \t\nobject.CurrentDirectory
.Description()----\t\nReturns a shortcut's description. ( WScripting Properties )\t\n---- \t\nobject.Description 
.Description()----\t\nContains a brief description of the error that caused the \t\nremote script to terminate. ( WScripting Properties )\t\n---- \t\nObject.Description
.Environment(strType)----\t\nReturns the WshEnvironment object (a collection of environment \t\nvariables). ** ( WScripting Properties )\t\n---- \t\nobject.Environment ([strType]) 
.Error()----\t\nExposes the WshRemoteError object, which holds information \t\nabout the error that caused the remote script to terminate prematurely. ( WScripting Properties )\t\n---- \t\nObject.Error
.ExitCode( )----\t\nReturns the exit code set by a script or program run using \t\nthe Exec() method. ( WScripting Properties )\t\n---- \t\nObject.ExitCode
.FullName()----\t\nReturns the fully qualified path of the host executable (CScript.\t\nexe or .exe). ( WScripting Properties )\t\n---- \t\nobject.FullName 
.FullName()----\t\nReturns the fully qualified path of the shortcut object's target. ( WScripting Properties )\t\n---- \t\nobject.FullName 
.FullName()----\t\nReturns the fully qualified path of the shortcut object's target. ( WScripting Properties )\t\n---- \t\nobject.FullName 
.Hotkey(strHotkey,KeyModifier,KeyName)----\t\nAssigns a key-combination to a shortcut, or identifies the \t\nkey-combination assigned to a shortcut. ** ( WScripting Properties )\t\n---- \t\nobject.Hotkey = strHotkey
.IconLocation(strIconLocation)----\t\nAssigns an icon to a shortcut, or identifies the icon assigned \t\nto a shortcut. ( WScripting Properties )\t\n---- \t\nobject.IconLocation = strIconLocation 
.Interactive()----\t\nSets the script mode, or identifies the script mode. ( WScripting Properties )\t\n---- \t\nobject.Interactive 
.Item(natIndex)----\t\nExposes a specified item from a collection. ( WScripting Properties )\t\n---- \t\nObject.Item(natIndex) 
.Item(key)----\t\nProvides access to the items in the WshNamed object. ( WScripting Properties )\t\n---- \t\nObject.Item(key)
.Item(key)----\t\nReturns an item using a zero-based index. ( WScripting Properties )\t\n---- \t\nObject.Item(key)
.length()----\t\nReturns the number of command-line parameters belonging to \t\na script (the number of items in an argument's collection). ( WScripting Properties )\t\n---- \t\nobject.length 
.length()----\t\nReturns the number of Windows environment variables on the \t\nlocal computer system (the number of items in an Environment collection). ( WScripting Properties )\t\n---- \t\nobject.length 
.length()----\t\nReturns the number of Windows special folders on the local \t\ncomputer system (the number of items in a SpecialFolders collection). ( WScripting Properties )\t\n---- \t\nobject.length 
.Line(strStream)----\t\nReturns the current line number in an input stream. ( WScripting Properties )\t\n---- \t\nobject.strStream.Line 
.Line()----\t\nIdentifies the line in a script that contains an error. ( WScripting Properties )\t\n---- \t\nObject.Line
.Name()----\t\nReturns the name of the WScript object (the host executable file). ( WScripting Properties )\t\n---- \t\nobject.Name 
.Named( )----\t\nReturns the WshNamed object (a collection of named arguments). ( WScripting Properties )\t\n---- \t\nObject.Named
.Number()----\t\nReports the error number representing a script error. ( WScripting Properties )\t\n---- \t\nObject.Number
.Path()----\t\nReturns the name of the directory containing the host executable (CScript.\t\nexe or .exe). ( WScripting Properties )\t\n---- \t\nobject.Path 
.ProcessID( )----\t\nThe process ID (PID) for a process started with the WshScriptExec \t\nobject. ( WScripting Properties )\t\n---- \t\nObject.ProcessID
.RelativePath()----\t\nAssigns a relative path to a shortcut, or identifies the relative \t\npath of a shortcut. ( WScripting Properties )\t\n---- \t\nobject.RelativePath
.ScriptFullName()----\t\nReturns the full path of the currently running script. ( WScripting Properties )\t\n---- \t\nobject.ScriptFullName
.ScriptName()----\t\nReturns the file name of the currently running script. ( WScripting Properties )\t\n---- \t\nobject.ScriptName
.Source()----\t\nIdentifies the COM object responsible for causing the script error. ( WScripting Properties )\t\n---- \t\nObject.Source
.SourceText()----\t\nContains the line of source code that caused an error. ( WScripting Properties )\t\n---- \t\nObject.SourceText
.SpecialFolders(objWshSpecialFolders)----\t\nReturns a SpecialFolders object (a collection of special folders). ( WScripting Properties )\t\n---- \t\nobject.SpecialFolders(objWshSpecialFolders) 
.Status()----\t\nReports the current status of the remote script. ( WScripting Properties )\t\n---- \t\nObject.Status
.Status(WshRunning,(,=,0),WshFinished,(,=,1))----\t\nProvides status information about a script run with the Exec() \t\nmethod. ( WScripting Properties )\t\n---- \t\nObject.Status
.StdErr()----\t\nExposes the write-only error output stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdErr 
.StdErr()----\t\nProvides access to the stderr output stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdErr
.StdIn()----\t\nExposes the read-only input stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdIn 
.StdIn()----\t\nExposes the stdin input stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdIn
.StdOut()----\t\nExposes the write-only output stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdOut 
.StdOut()----\t\nExposes the write-only stdout output stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdOut
.TargetPath()----\t\nThe path to the shortcut's executable. ( WScripting Properties )\t\n---- \t\nobject.TargetPath
.Unnamed( )----\t\nReturns the WshUnnamed object (a collection of unnamed arguments). ( WScripting Properties )\t\n---- \t\nObject.Unnamed
.UserDomain()----\t\nReturns a user's domain name. ( WScripting Properties )\t\n---- \t\nobject.UserDomain
.UserName()----\t\nReturns the name of a user. ( WScripting Properties )\t\n---- \t\nobject.UserName 
.Version()----\t\nReturns the version of Windows Script Host. ( WScripting Properties )\t\n---- \t\nobject.Version 
.WindowStyle(intWindowStyle)----\t\nAssigns a window style to a shortcut, or identifies the type \t\nof window style used by a shortcut. ( WScripting Properties )\t\n---- \t\nobject.WindowStyle = intWindowStyle
.WorkingDirectory(strWorkingDirectory)----\t\nAssign a working directory to a shortcut, or identifies the \t\nworking directory used by a shortcut. ( WScripting Properties )\t\n---- \t\nobject.WorkingDirectory = strWorkingDirectory
..Arguments()----\t\nReturns the WshArguments object (a collection of arguments). ( WScripting Properties )\t\n---- \t\nobject.Arguments
.Arguments()----\t\nSets the arguments for a shortcut, or identifies a shortcut's \t\narguments. ( WScripting Properties )\t\n---- \t\nobject.Arguments
.AtEndOfLine()----\t\nReturns a Boolean value indicating whether the end of a line \t\nin an input stream has been reached. ( WScripting Properties )\t\n---- \t\nobject.AtEndOfLine 
.AtEndOfStream()----\t\nReturns a Boolean value indicating whether the end of an input \t\nstream has been reached. ( WScripting Properties )\t\n---- \t\nobject.AtEndOfStream 
.BuildVersion( )----\t\nReturns the Windows Script Host build version number. ( WScripting Properties )\t\n---- \t\nObject.BuildVersion
.Character()----\t\nReports the specific character in a line of code that contains \t\nan error. ( WScripting Properties )\t\n---- \t\nObject.Character
.Column()----\t\nReturns the column number of the current character position \t\nin an input stream. ( WScripting Properties )\t\n---- \t\nobject.Column 
.ComputerName()----\t\nReturns the name of the computer system. ( WScripting Properties )\t\n---- \t\nobject.ComputerName 
.CurrentDirectory()----\t\nRetrieves or changes the current active directory. ( WScripting Properties )\t\n---- \t\nobject.CurrentDirectory
.Description()----\t\nReturns a shortcut's description. ( WScripting Properties )\t\n---- \t\nobject.Description 
.Description()----\t\nContains a brief description of the error that caused the \t\nremote script to terminate. ( WScripting Properties )\t\n---- \t\nObject.Description
.Environment(strType)----\t\nReturns the WshEnvironment object (a collection of environment \t\nvariables). ** ( WScripting Properties )\t\n---- \t\nobject.Environment ([strType]) 
.Error()----\t\nExposes the WshRemoteError object, which holds information \t\nabout the error that caused the remote script to terminate prematurely. ( WScripting Properties )\t\n---- \t\nObject.Error
.ExitCode( )----\t\nReturns the exit code set by a script or program run using \t\nthe Exec() method. ( WScripting Properties )\t\n---- \t\nObject.ExitCode
.FullName()----\t\nReturns the fully qualified path of the host executable (CScript.\t\nexe or .exe). ( WScripting Properties )\t\n---- \t\nobject.FullName 
.FullName()----\t\nReturns the fully qualified path of the shortcut object's target. ( WScripting Properties )\t\n---- \t\nobject.FullName 
.FullName()----\t\nReturns the fully qualified path of the shortcut object's target. ( WScripting Properties )\t\n---- \t\nobject.FullName 
.Hotkey(strHotkey,KeyModifier,KeyName)----\t\nAssigns a key-combination to a shortcut, or identifies the \t\nkey-combination assigned to a shortcut. ** ( WScripting Properties )\t\n---- \t\nobject.Hotkey = strHotkey
.IconLocation(strIconLocation)----\t\nAssigns an icon to a shortcut, or identifies the icon assigned \t\nto a shortcut. ( WScripting Properties )\t\n---- \t\nobject.IconLocation = strIconLocation 
.Interactive()----\t\nSets the script mode, or identifies the script mode. ( WScripting Properties )\t\n---- \t\nobject.Interactive 
.Item(natIndex)----\t\nExposes a specified item from a collection. ( WScripting Properties )\t\n---- \t\nObject.Item(natIndex) 
.Item(key)----\t\nProvides access to the items in the WshNamed object. ( WScripting Properties )\t\n---- \t\nObject.Item(key)
.Item(key)----\t\nReturns an item using a zero-based index. ( WScripting Properties )\t\n---- \t\nObject.Item(key)
.length()----\t\nReturns the number of command-line parameters belonging to \t\na script (the number of items in an argument's collection). ( WScripting Properties )\t\n---- \t\nobject.length 
.length()----\t\nReturns the number of Windows environment variables on the \t\nlocal computer system (the number of items in an Environment collection). ( WScripting Properties )\t\n---- \t\nobject.length 
.length()----\t\nReturns the number of Windows special folders on the local \t\ncomputer system (the number of items in a SpecialFolders collection). ( WScripting Properties )\t\n---- \t\nobject.length 
.Line(strStream)----\t\nReturns the current line number in an input stream. ( WScripting Properties )\t\n---- \t\nobject.strStream.Line 
.Line()----\t\nIdentifies the line in a script that contains an error. ( WScripting Properties )\t\n---- \t\nObject.Line
.Name()----\t\nReturns the name of the WScript object (the host executable file). ( WScripting Properties )\t\n---- \t\nobject.Name 
.Named( )----\t\nReturns the WshNamed object (a collection of named arguments). ( WScripting Properties )\t\n---- \t\nObject.Named
.Number()----\t\nReports the error number representing a script error. ( WScripting Properties )\t\n---- \t\nObject.Number
.Path()----\t\nReturns the name of the directory containing the host executable (CScript.\t\nexe or .exe). ( WScripting Properties )\t\n---- \t\nobject.Path 
.ProcessID( )----\t\nThe process ID (PID) for a process started with the WshScriptExec \t\nobject. ( WScripting Properties )\t\n---- \t\nObject.ProcessID
.RelativePath()----\t\nAssigns a relative path to a shortcut, or identifies the relative \t\npath of a shortcut. ( WScripting Properties )\t\n---- \t\nobject.RelativePath
.ScriptFullName()----\t\nReturns the full path of the currently running script. ( WScripting Properties )\t\n---- \t\nobject.ScriptFullName
.ScriptName()----\t\nReturns the file name of the currently running script. ( WScripting Properties )\t\n---- \t\nobject.ScriptName
.Source()----\t\nIdentifies the COM object responsible for causing the script error. ( WScripting Properties )\t\n---- \t\nObject.Source
.SourceText()----\t\nContains the line of source code that caused an error. ( WScripting Properties )\t\n---- \t\nObject.SourceText
.SpecialFolders(objWshSpecialFolders)----\t\nReturns a SpecialFolders object (a collection of special folders). ( WScripting Properties )\t\n---- \t\nobject.SpecialFolders(objWshSpecialFolders) 
.Status()----\t\nReports the current status of the remote script. ( WScripting Properties )\t\n---- \t\nObject.Status
.Status(WshRunning,(,=,0),WshFinished,(,=,1))----\t\nProvides status information about a script run with the Exec() \t\nmethod. ( WScripting Properties )\t\n---- \t\nObject.Status
.StdErr()----\t\nExposes the write-only error output stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdErr 
.StdErr()----\t\nProvides access to the stderr output stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdErr
.StdIn()----\t\nExposes the read-only input stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdIn 
.StdIn()----\t\nExposes the stdin input stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdIn
.StdOut()----\t\nExposes the write-only output stream for the current script. ( WScripting Properties )\t\n---- \t\nobject.StdOut 
.StdOut()----\t\nExposes the write-only stdout output stream of the Exec object. ( WScripting Properties )\t\n---- \t\nObject.StdOut
.TargetPath()----\t\nThe path to the shortcut's executable. ( WScripting Properties )\t\n---- \t\nobject.TargetPath
.Unnamed( )----\t\nReturns the WshUnnamed object (a collection of unnamed arguments). ( WScripting Properties )\t\n---- \t\nObject.Unnamed
.UserDomain()----\t\nReturns a user's domain name. ( WScripting Properties )\t\n---- \t\nobject.UserDomain
.UserName()----\t\nReturns the name of a user. ( WScripting Properties )\t\n---- \t\nobject.UserName 
.Version()----\t\nReturns the version of Windows Script Host. ( WScripting Properties )\t\n---- \t\nobject.Version 
.WindowStyle(intWindowStyle)----\t\nAssigns a window style to a shortcut, or identifies the type \t\nof window style used by a shortcut. ( WScripting Properties )\t\n---- \t\nobject.WindowStyle = intWindowStyle
.WorkingDirectory(strWorkingDirectory)----\t\nAssign a working directory to a shortcut, or identifies the \t\nworking directory used by a shortcut. ( WScripting Properties )\t\n---- \t\nobject.WorkingDirectory = strWorkingDirectory


#---Methods
AddPrinterConnection(strLocalName,strRemoteName,bUpdateProfile,strUser,strPassword)----\t\nAdds a remote MS-DOS-based printer connection to your computer \t\nsystem. ( WScripting Methods )\t\n---- \t\nobject.AddPrinterConnection(strLocalName, strRemoteName[,bUpdateProfile][,strUser][,strPassword])
AddWindowsPrinterConnection(strPrinterPath,strDriverName,strPort)----\t\nAdds a Windows-based printer connection to your computer system. ( WScripting Methods )\t\n---- \t\nWindows NT/2000:\t\nobject.AddWindowsPrinterConnection(\t\nstrPrinterPath\t\n)
AppActivate(title)----\t\nActivates an application window. ** ( WScripting Methods )\t\n---- \t\nobject.AppActivate title 
Close()----\t\nCloses a text stream. ( WScripting Methods )\t\n---- \t\nobject.Close 
ConnectObject(objEventSource,strPrefix)----\t\nConnects the object's event sources to functions with a given \t\nprefix. ( WScripting Methods )\t\n---- \t\nobject.ConnectObject(objEventSource, strPrefix)
Count()----\t\nReturns the number of members in an object. ( WScripting Methods )\t\n---- \t\nobject.Count
CreateObject(strProgID,strPrefix)----\t\nCreates a COM object. ** ( WScripting Methods )\t\n---- \t\nobject.CreateObject(strProgID[,strPrefix]) 
CreateScript(Commandline,MachineName)----\t\nCreates a WshRemote object. ( WScripting Methods )\t\n---- \t\nobject.CreateScript(CommandLine,[MachineName])
CreateShortcut(strPathname)----\t\nCreates a new shortcut, or opens an existing shortcut. ** ( WScripting Methods )\t\n---- \t\nobject.CreateShortcut(strPathname) 
DisconnectObject(obj)----\t\nDisconnects a connected object's event sources. ( WScripting Methods )\t\n---- \t\nobject.DisconnectObject(obj)
Echo(Arg1,,Arg2,,Arg3,...)----\t\nOutputs text to either a message box or the command console window. ( WScripting Methods )\t\n---- \t\nobject.Echo [Arg1] [,Arg2] [,Arg3] ... 
EnumNetworkDrives(objDrives)----\t\nReturns the current network drive mapping information. ( WScripting Methods )\t\n---- \t\nobjDrives = object.EnumNetworkDrives
EnumPrinterConnections(objPrinters)----\t\nReturns the current network printer mapping information. ( WScripting Methods )\t\n---- \t\nobjPrinters = object.EnumPrinterConnections 
Exec(strCommand)----\t\nRuns an application in a child command-shell, providing access \t\nto the StdIn/StdOut/StdErr streams. ( WScripting Methods )\t\n---- \t\nobject.Exec(strCommand)
Execute()----\t\nStarts execution of a remote script object. ( WScripting Methods )\t\n---- \t\nobject.Execute
Exists(Key)----\t\nIndicates whether a specific key value exists in the WshNamed \t\nobject. ( WScripting Methods )\t\n---- \t\nobject.Exists(key)
ExpandEnvironmentStrings(strString)----\t\nReturns an environment variable's expanded value. ( WScripting Methods )\t\n---- \t\nobject.ExpandEnvironmentStrings(strString) 
GetObject(strPathname,strProgID,strPrefix)----\t\nRetrieves an existing object with the specified ProgID, or \t\ncreates a new one from a file. ( WScripting Methods )\t\n---- \t\nobject.GetObject(strPathname [,strProgID], [strPrefix]) 
getResource(resourceID)----\t\nReturns the value of a resource defined with the <resource> element. ( WScripting Methods )\t\n---- \t\ngetResource(resourceID) 
LogEvent(intType,strMessage,strTarget)----\t\nAdds an event entry to a log file. ( WScripting Methods )\t\n---- \t\nobject.LogEvent(intType, strMessage [,strTarget]) 
MapNetworkDrive(strLocalName,strRemoteName,bUpdateProfile,strUser,strPassword)----\t\nAdds a shared network drive to your computer system. ( WScripting Methods )\t\n---- \t\nobject.MapNetworkDrive(strLocalName, strRemoteName, [bUpdateProfile], [strUser], [strPassword])
Popup(strText,nSecondsToWait,strTitle,nType,intButton)----\t\nDisplays text in a pop-up message box. ( WScripting Methods )\t\n---- \t\nintButton = object.Popup(strText,[nSecondsToWait],[strTitle],[nType]) 
Quit(intErrorCode)----\t\nForces script execution to stop at any time. ( WScripting Methods )\t\n---- \t\nobject.Quit([intErrorCode])
Read(characters)----\t\nReturns a specified number of characters from an input stream. ( WScripting Methods )\t\n---- \t\nobject.Read(characters) 
ReadAll()----\t\nReturns all characters from an input stream. ( WScripting Methods )\t\n---- \t\nobject.ReadAll 
ReadLine()----\t\nReturns an entire line from an input stream. ** ( WScripting Methods )\t\n---- \t\nobject.ReadLine 
RegDelete(strName)----\t\nDeletes a key or one of its values from the registry. ( WScripting Methods )\t\n---- \t\nobject.RegDelete(strName)
RegRead(strName)----\t\nReturns the value of a key or value-name from the registry. ( WScripting Methods )\t\n---- \t\nobject.RegRead(strName) 
RegWrite(strName,anyValue,strType)----\t\nCreates a new key, adds another value-name to an existing \t\nkey (and assigns it a value), or changes the value of an existing value-name. ** ( WScripting Methods )\t\n---- \t\nobject.RegWrite(strName, anyValue [,strType])
Remove(strName)----\t\nRemoves an existing environment variable. ( WScripting Methods )\t\n---- \t\nobject.Remove(strName) 
RemoveNetworkDrive(strName,bForce,bUpdateProfile)----\t\nRemoves a shared network drive from your computer system. ( WScripting Methods )\t\n---- \t\nobject.RemoveNetworkDrive(strName, [bForce], [bUpdateProfile])
RemovePrinterConnection(strName,bForce,bUpdateProfile)----\t\nRemoves a shared network printer connection from your computer \t\nsystem. ( WScripting Methods )\t\n---- \t\nobject.RemovePrinterConnection(strName, [bForce], [bUpdateProfile])
Run(strCommand,intWindowStyle,bWaitOnReturn)----\t\nRuns a program in a new process. ( WScripting Methods )\t\n---- \t\nobject.Run(strCommand, [intWindowStyle], [bWaitOnReturn]) 
Save()----\t\nSaves a shortcut object to disk. ( WScripting Methods )\t\n---- \t\nobject.Save 
SendKeys(string)----\t\nSends one or more keystrokes to the active window (as if typed \t\non the keyboard). ** ( WScripting Methods )\t\n---- \t\nobject.SendKeys(string)
SetDefaultPrinter(strPrinterName)----\t\nAssigns a remote printer the role Default Printer. ( WScripting Methods )\t\n---- \t\nobject.SetDefaultPrinter(strPrinterName)
ShowUsage()----\t\nMakes a script self-documenting by displaying information \t\nabout how it should be used. ** ( WScripting Methods )\t\n---- \t\nobject.ShowUsage
Sign(FileExtension,Text,Certificate,Store)----\t\nSigns a script stored in a string. ( WScripting Methods )\t\n---- \t\nObject.Sign (FileExtension, Text, Certificate, Store)
SignFile(FileName,Certificate,Store)----\t\nSigns a script using a digital signature. ( WScripting Methods )\t\n---- \t\nObject.SignFile (FileName, Certificate, Store)
Skip(characters)----\t\nSkips a specified number of characters when reading from an \t\ninput text stream. ( WScripting Methods )\t\n---- \t\nobject.Skip(characters) 
SkipLine()----\t\nSkips the next line when reading from an input text stream. ( WScripting Methods )\t\n---- \t\nobject.SkipLine 
Sleep(intTime)----\t\nSuspends script execution for a specified length of time, \t\nthen continues execution. ** ( WScripting Methods )\t\n---- \t\nobject.Sleep(intTime) 
Terminate()----\t\nInstructs the script engine to end the process started by \t\nthe Exec method. ( WScripting Methods )\t\n---- \t\nobject.Terminate
Verify(FileExtension,Text,ShowUI)----\t\nVerifies a digital signature retrieved as a string. ** ( WScripting Methods )\t\n---- \t\nobject.Verify (FileExtension, Text, ShowUI)
VerifyFile(FileName,ShowUI)----\t\nVerifies the digital signature encapsulated in a script. ** ( WScripting Methods )\t\n---- \t\nObject.VerifyFile (FileName, ShowUI)
Write(strText)----\t\nSends a string to an output stream. ( WScripting Methods )\t\n---- \t\nobject.Write(strText) 
WriteBlankLines(intLines)----\t\nSends a specified number of blank lines (newline characters) \t\nto an output stream. ( WScripting Methods )\t\n---- \t\nobject.WriteBlankLines(intLines) 
WriteLine(strText)----\t\nSends a string with a newline character to an output stream. ( WScripting Methods )\t\n---- \t\nobject.WriteLine([strText]) 

#--- Prefixed Methods
wscript.AddPrinterConnection(strLocalName,strRemoteName,bUpdateProfile,strUser,strPassword)----\t\nAdds a remote MS-DOS-based printer connection to your computer \t\nsystem. ( WScripting Methods )\t\n---- \t\nobject.AddPrinterConnection(strLocalName, strRemoteName[,bUpdateProfile][,strUser][,strPassword])
wscript.AddWindowsPrinterConnection(strPrinterPath,strDriverName,strPort)----\t\nAdds a Windows-based printer connection to your computer system. ( WScripting Methods )\t\n---- \t\nWindows NT/2000:\t\nobject.AddWindowsPrinterConnection(\t\nstrPrinterPath\t\n)
wscript.AppActivate(title)----\t\nActivates an application window. ** ( WScripting Methods )\t\n---- \t\nobject.AppActivate title 
wscript.Close()----\t\nCloses a text stream. ( WScripting Methods )\t\n---- \t\nobject.Close 
wscript.ConnectObject(objEventSource,strPrefix)----\t\nConnects the object's event sources to functions with a given \t\nprefix. ( WScripting Methods )\t\n---- \t\nobject.ConnectObject(objEventSource, strPrefix)
wscript.Count()----\t\nReturns the number of members in an object. ( WScripting Methods )\t\n---- \t\nobject.Count
wscript.CreateObject(strProgID,strPrefix)----\t\nCreates a COM object. ** ( WScripting Methods )\t\n---- \t\nobject.CreateObject(strProgID[,strPrefix]) 
wscript.CreateScript(Commandline,MachineName)----\t\nCreates a WshRemote object. ( WScripting Methods )\t\n---- \t\nobject.CreateScript(CommandLine,[MachineName])
wscript.CreateShortcut(strPathname)----\t\nCreates a new shortcut, or opens an existing shortcut. ** ( WScripting Methods )\t\n---- \t\nobject.CreateShortcut(strPathname) 
wscript.DisconnectObject(obj)----\t\nDisconnects a connected object's event sources. ( WScripting Methods )\t\n---- \t\nobject.DisconnectObject(obj)
wscript.Echo(Arg1,,Arg2,,Arg3,...)----\t\nOutputs text to either a message box or the command console window. ( WScripting Methods )\t\n---- \t\nobject.Echo [Arg1] [,Arg2] [,Arg3] ... 
wscript.EnumNetworkDrives(objDrives)----\t\nReturns the current network drive mapping information. ( WScripting Methods )\t\n---- \t\nobjDrives = object.EnumNetworkDrives
wscript.EnumPrinterConnections(objPrinters)----\t\nReturns the current network printer mapping information. ( WScripting Methods )\t\n---- \t\nobjPrinters = object.EnumPrinterConnections 
wscript.Exec(strCommand)----\t\nRuns an application in a child command-shell, providing access \t\nto the StdIn/StdOut/StdErr streams. ( WScripting Methods )\t\n---- \t\nobject.Exec(strCommand)
wscript.Execute()----\t\nStarts execution of a remote script object. ( WScripting Methods )\t\n---- \t\nobject.Execute
wscript.Exists(Key)----\t\nIndicates whether a specific key value exists in the WshNamed \t\nobject. ( WScripting Methods )\t\n---- \t\nobject.Exists(key)
wscript.ExpandEnvironmentStrings(strString)----\t\nReturns an environment variable's expanded value. ( WScripting Methods )\t\n---- \t\nobject.ExpandEnvironmentStrings(strString) 
wscript.GetObject(strPathname,strProgID,strPrefix)----\t\nRetrieves an existing object with the specified ProgID, or \t\ncreates a new one from a file. ( WScripting Methods )\t\n---- \t\nobject.GetObject(strPathname [,strProgID], [strPrefix]) 
wscript.getResource(resourceID)----\t\nReturns the value of a resource defined with the <resource> element. ( WScripting Methods )\t\n---- \t\ngetResource(resourceID) 
wscript.LogEvent(intType,strMessage,strTarget)----\t\nAdds an event entry to a log file. ( WScripting Methods )\t\n---- \t\nobject.LogEvent(intType, strMessage [,strTarget]) 
wscript.MapNetworkDrive(strLocalName,strRemoteName,bUpdateProfile,strUser,strPassword)----\t\nAdds a shared network drive to your computer system. ( WScripting Methods )\t\n---- \t\nobject.MapNetworkDrive(strLocalName, strRemoteName, [bUpdateProfile], [strUser], [strPassword])
wscript.Popup(strText,nSecondsToWait,strTitle,nType,intButton)----\t\nDisplays text in a pop-up message box. ( WScripting Methods )\t\n---- \t\nintButton = object.Popup(strText,[nSecondsToWait],[strTitle],[nType]) 
wscript.Quit(intErrorCode)----\t\nForces script execution to stop at any time. ( WScripting Methods )\t\n---- \t\nobject.Quit([intErrorCode])
wscript.Read(characters)----\t\nReturns a specified number of characters from an input stream. ( WScripting Methods )\t\n---- \t\nobject.Read(characters) 
wscript.ReadAll()----\t\nReturns all characters from an input stream. ( WScripting Methods )\t\n---- \t\nobject.ReadAll 
wscript.ReadLine()----\t\nReturns an entire line from an input stream. ** ( WScripting Methods )\t\n---- \t\nobject.ReadLine 
wscript.RegDelete(strName)----\t\nDeletes a key or one of its values from the registry. ( WScripting Methods )\t\n---- \t\nobject.RegDelete(strName)
wscript.RegRead(strName)----\t\nReturns the value of a key or value-name from the registry. ( WScripting Methods )\t\n---- \t\nobject.RegRead(strName) 
wscript.RegWrite(strName,anyValue,strType)----\t\nCreates a new key, adds another value-name to an existing \t\nkey (and assigns it a value), or changes the value of an existing value-name. ** ( WScripting Methods )\t\n---- \t\nobject.RegWrite(strName, anyValue [,strType])
wscript.Remove(strName)----\t\nRemoves an existing environment variable. ( WScripting Methods )\t\n---- \t\nobject.Remove(strName) 
wscript.RemoveNetworkDrive(strName,bForce,bUpdateProfile)----\t\nRemoves a shared network drive from your computer system. ( WScripting Methods )\t\n---- \t\nobject.RemoveNetworkDrive(strName, [bForce], [bUpdateProfile])
wscript.RemovePrinterConnection(strName,bForce,bUpdateProfile)----\t\nRemoves a shared network printer connection from your computer \t\nsystem. ( WScripting Methods )\t\n---- \t\nobject.RemovePrinterConnection(strName, [bForce], [bUpdateProfile])
wscript.Run(strCommand,intWindowStyle,bWaitOnReturn)----\t\nRuns a program in a new process. ( WScripting Methods )\t\n---- \t\nobject.Run(strCommand, [intWindowStyle], [bWaitOnReturn]) 
wscript.Save()----\t\nSaves a shortcut object to disk. ( WScripting Methods )\t\n---- \t\nobject.Save 
wscript.SendKeys(string)----\t\nSends one or more keystrokes to the active window (as if typed \t\non the keyboard). ** ( WScripting Methods )\t\n---- \t\nobject.SendKeys(string)
wscript.SetDefaultPrinter(strPrinterName)----\t\nAssigns a remote printer the role Default Printer. ( WScripting Methods )\t\n---- \t\nobject.SetDefaultPrinter(strPrinterName)
wscript.ShowUsage()----\t\nMakes a script self-documenting by displaying information \t\nabout how it should be used. ** ( WScripting Methods )\t\n---- \t\nobject.ShowUsage
wscript.Sign(FileExtension,Text,Certificate,Store)----\t\nSigns a script stored in a string. ( WScripting Methods )\t\n---- \t\nObject.Sign (FileExtension, Text, Certificate, Store)
wscript.SignFile(FileName,Certificate,Store)----\t\nSigns a script using a digital signature. ( WScripting Methods )\t\n---- \t\nObject.SignFile (FileName, Certificate, Store)
wscript.Skip(characters)----\t\nSkips a specified number of characters when reading from an \t\ninput text stream. ( WScripting Methods )\t\n---- \t\nobject.Skip(characters) 
wscript.SkipLine()----\t\nSkips the next line when reading from an input text stream. ( WScripting Methods )\t\n---- \t\nobject.SkipLine 
wscript.Sleep(intTime)----\t\nSuspends script execution for a specified length of time, \t\nthen continues execution. ** ( WScripting Methods )\t\n---- \t\nobject.Sleep(intTime) 
wscript.Terminate()----\t\nInstructs the script engine to end the process started by \t\nthe Exec method. ( WScripting Methods )\t\n---- \t\nobject.Terminate
wscript.Verify(FileExtension,Text,ShowUI)----\t\nVerifies a digital signature retrieved as a string. ** ( WScripting Methods )\t\n---- \t\nobject.Verify (FileExtension, Text, ShowUI)
wscript.VerifyFile(FileName,ShowUI)----\t\nVerifies the digital signature encapsulated in a script. ** ( WScripting Methods )\t\n---- \t\nObject.VerifyFile (FileName, ShowUI)
wscript.Write(strText)----\t\nSends a string to an output stream. ( WScripting Methods )\t\n---- \t\nobject.Write(strText) 
wscript.WriteBlankLines(intLines)----\t\nSends a specified number of blank lines (newline characters) \t\nto an output stream. ( WScripting Methods )\t\n---- \t\nobject.WriteBlankLines(intLines) 
wscript.WriteLine(strText)----\t\nSends a string with a newline character to an output stream. ( WScripting Methods )\t\n---- \t\nobject.WriteLine([strText]) 


#--- and lbnl just dot prefixed
.AddPrinterConnection(strLocalName,strRemoteName,bUpdateProfile,strUser,strPassword)----\t\nAdds a remote MS-DOS-based printer connection to your computer \t\nsystem. ( WScripting Methods )\t\n---- \t\nobject.AddPrinterConnection(strLocalName, strRemoteName[,bUpdateProfile][,strUser][,strPassword])
.AddWindowsPrinterConnection(strPrinterPath,strDriverName,strPort)----\t\nAdds a Windows-based printer connection to your computer system. ( WScripting Methods )\t\n---- \t\nWindows NT/2000:\t\nobject.AddWindowsPrinterConnection(\t\nstrPrinterPath\t\n)
.AppActivate(title)----\t\nActivates an application window. ** ( WScripting Methods )\t\n---- \t\nobject.AppActivate title 
.Close()----\t\nCloses a text stream. ( WScripting Methods )\t\n---- \t\nobject.Close 
.ConnectObject(objEventSource,strPrefix)----\t\nConnects the object's event sources to functions with a given \t\nprefix. ( WScripting Methods )\t\n---- \t\nobject.ConnectObject(objEventSource, strPrefix)
.Count()----\t\nReturns the number of members in an object. ( WScripting Methods )\t\n---- \t\nobject.Count
.CreateObject(strProgID,strPrefix)----\t\nCreates a COM object. ** ( WScripting Methods )\t\n---- \t\nobject.CreateObject(strProgID[,strPrefix]) 
.CreateScript(Commandline,MachineName)----\t\nCreates a WshRemote object. ( WScripting Methods )\t\n---- \t\nobject.CreateScript(CommandLine,[MachineName])
.CreateShortcut(strPathname)----\t\nCreates a new shortcut, or opens an existing shortcut. ** ( WScripting Methods )\t\n---- \t\nobject.CreateShortcut(strPathname) 
.DisconnectObject(obj)----\t\nDisconnects a connected object's event sources. ( WScripting Methods )\t\n---- \t\nobject.DisconnectObject(obj)
.Echo(Arg1,,Arg2,,Arg3,...)----\t\nOutputs text to either a message box or the command console window. ( WScripting Methods )\t\n---- \t\nobject.Echo [Arg1] [,Arg2] [,Arg3] ... 
.EnumNetworkDrives(objDrives)----\t\nReturns the current network drive mapping information. ( WScripting Methods )\t\n---- \t\nobjDrives = object.EnumNetworkDrives
.EnumPrinterConnections(objPrinters)----\t\nReturns the current network printer mapping information. ( WScripting Methods )\t\n---- \t\nobjPrinters = object.EnumPrinterConnections 
.Exec(strCommand)----\t\nRuns an application in a child command-shell, providing access \t\nto the StdIn/StdOut/StdErr streams. ( WScripting Methods )\t\n---- \t\nobject.Exec(strCommand)
.Execute()----\t\nStarts execution of a remote script object. ( WScripting Methods )\t\n---- \t\nobject.Execute
.Exists(Key)----\t\nIndicates whether a specific key value exists in the WshNamed \t\nobject. ( WScripting Methods )\t\n---- \t\nobject.Exists(key)
.ExpandEnvironmentStrings(strString)----\t\nReturns an environment variable's expanded value. ( WScripting Methods )\t\n---- \t\nobject.ExpandEnvironmentStrings(strString) 
.GetObject(strPathname,strProgID,strPrefix)----\t\nRetrieves an existing object with the specified ProgID, or \t\ncreates a new one from a file. ( WScripting Methods )\t\n---- \t\nobject.GetObject(strPathname [,strProgID], [strPrefix]) 
.getResource(resourceID)----\t\nReturns the value of a resource defined with the <resource> element. ( WScripting Methods )\t\n---- \t\ngetResource(resourceID) 
.LogEvent(intType,strMessage,strTarget)----\t\nAdds an event entry to a log file. ( WScripting Methods )\t\n---- \t\nobject.LogEvent(intType, strMessage [,strTarget]) 
.MapNetworkDrive(strLocalName,strRemoteName,bUpdateProfile,strUser,strPassword)----\t\nAdds a shared network drive to your computer system. ( WScripting Methods )\t\n---- \t\nobject.MapNetworkDrive(strLocalName, strRemoteName, [bUpdateProfile], [strUser], [strPassword])
.Popup(strText,nSecondsToWait,strTitle,nType,intButton)----\t\nDisplays text in a pop-up message box. ( WScripting Methods )\t\n---- \t\nintButton = object.Popup(strText,[nSecondsToWait],[strTitle],[nType]) 
.Quit(intErrorCode)----\t\nForces script execution to stop at any time. ( WScripting Methods )\t\n---- \t\nobject.Quit([intErrorCode])
.Read(characters)----\t\nReturns a specified number of characters from an input stream. ( WScripting Methods )\t\n---- \t\nobject.Read(characters) 
.ReadAll()----\t\nReturns all characters from an input stream. ( WScripting Methods )\t\n---- \t\nobject.ReadAll 
.ReadLine()----\t\nReturns an entire line from an input stream. ** ( WScripting Methods )\t\n---- \t\nobject.ReadLine 
.RegDelete(strName)----\t\nDeletes a key or one of its values from the registry. ( WScripting Methods )\t\n---- \t\nobject.RegDelete(strName)
.RegRead(strName)----\t\nReturns the value of a key or value-name from the registry. ( WScripting Methods )\t\n---- \t\nobject.RegRead(strName) 
.RegWrite(strName,anyValue,strType)----\t\nCreates a new key, adds another value-name to an existing \t\nkey (and assigns it a value), or changes the value of an existing value-name. ** ( WScripting Methods )\t\n---- \t\nobject.RegWrite(strName, anyValue [,strType])
.Remove(strName)----\t\nRemoves an existing environment variable. ( WScripting Methods )\t\n---- \t\nobject.Remove(strName) 
.RemoveNetworkDrive(strName,bForce,bUpdateProfile)----\t\nRemoves a shared network drive from your computer system. ( WScripting Methods )\t\n---- \t\nobject.RemoveNetworkDrive(strName, [bForce], [bUpdateProfile])
.RemovePrinterConnection(strName,bForce,bUpdateProfile)----\t\nRemoves a shared network printer connection from your computer \t\nsystem. ( WScripting Methods )\t\n---- \t\nobject.RemovePrinterConnection(strName, [bForce], [bUpdateProfile])
.Run(strCommand,intWindowStyle,bWaitOnReturn)----\t\nRuns a program in a new process. ( WScripting Methods )\t\n---- \t\nobject.Run(strCommand, [intWindowStyle], [bWaitOnReturn]) 
.Save()----\t\nSaves a shortcut object to disk. ( WScripting Methods )\t\n---- \t\nobject.Save 
.SendKeys(string)----\t\nSends one or more keystrokes to the active window (as if typed \t\non the keyboard). ** ( WScripting Methods )\t\n---- \t\nobject.SendKeys(string)
.SetDefaultPrinter(strPrinterName)----\t\nAssigns a remote printer the role Default Printer. ( WScripting Methods )\t\n---- \t\nobject.SetDefaultPrinter(strPrinterName)
.ShowUsage()----\t\nMakes a script self-documenting by displaying information \t\nabout how it should be used. ** ( WScripting Methods )\t\n---- \t\nobject.ShowUsage
.Sign(FileExtension,Text,Certificate,Store)----\t\nSigns a script stored in a string. ( WScripting Methods )\t\n---- \t\nObject.Sign (FileExtension, Text, Certificate, Store)
.SignFile(FileName,Certificate,Store)----\t\nSigns a script using a digital signature. ( WScripting Methods )\t\n---- \t\nObject.SignFile (FileName, Certificate, Store)
.Skip(characters)----\t\nSkips a specified number of characters when reading from an \t\ninput text stream. ( WScripting Methods )\t\n---- \t\nobject.Skip(characters) 
.SkipLine()----\t\nSkips the next line when reading from an input text stream. ( WScripting Methods )\t\n---- \t\nobject.SkipLine 
.Sleep(intTime)----\t\nSuspends script execution for a specified length of time, \t\nthen continues execution. ** ( WScripting Methods )\t\n---- \t\nobject.Sleep(intTime) 
.Terminate()----\t\nInstructs the script engine to end the process started by \t\nthe Exec method. ( WScripting Methods )\t\n---- \t\nobject.Terminate
.Verify(FileExtension,Text,ShowUI)----\t\nVerifies a digital signature retrieved as a string. ** ( WScripting Methods )\t\n---- \t\nobject.Verify (FileExtension, Text, ShowUI)
.VerifyFile(FileName,ShowUI)----\t\nVerifies the digital signature encapsulated in a script. ** ( WScripting Methods )\t\n---- \t\nObject.VerifyFile (FileName, ShowUI)
.Write(strText)----\t\nSends a string to an output stream. ( WScripting Methods )\t\n---- \t\nobject.Write(strText) 
.WriteBlankLines(intLines)----\t\nSends a specified number of blank lines (newline characters) \t\nto an output stream. ( WScripting Methods )\t\n---- \t\nobject.WriteBlankLines(intLines) 
.WriteLine(strText)----\t\nSends a string with a newline character to an output stream. ( WScripting Methods )\t\n---- \t\nobject.WriteLine([strText]) 

#----Events
Error()----\t\nEvent that is fired when an error occurs in the remote script. ( WScripting Events )\t\n---- \t\nObject_Error
Start()----\t\nEvent that is fired when the remote script begins executing. ( WScripting Events )\t\n---- \t\nObject_Start
End()----\t\nEvent that is fired when the remote script completes. ( WScripting Events )\t\n---- \t\nvar WshController = new ActiveXObject("WSHController"),\t\nvar RemoteProc = WshController.CreateScript("app.wsf", "remotemachine"),\t\nWScript.ConnectObject(RemoteProc, "RemoteProc_"),\t\nvar Done = false,\t\nRemoteProc.Execute(),\t\nwhile (!Done)\t\nWScript.Sleep(100),\t\nfunction RemoteProc_End()\t\n{\t\nWScript.Echo("The process has ended"),\t\nDone = true,\t\n}\t\nfunction RemoteProc_Error()\t\n{\t\nWScript.Echo("An error has occurred: " + RemoteProc.Error.Description),\t\nDone = true,\t\n}\t\nfunction RemoteProc_Start()\t\n{\t\nWScript.Echo("The process has started"),\t\n}

VBSEvents()\t\n----\t\nImplementing Events within VbScript:\t\n----\t\nwScript.Quit(Main) \t\nfunction Main \t\nSet oIE = wscript.CreateObject("InternetExplorer.Application","IE_") \t\nvar bExit = false \t\noIE.navigate ""  ' Load URL \t\noIE.Visible = 1 ' Keep visible. \t\n\t msgbox("Waiting for IE to quit")  \t\ndo :  wscript.sleep(300) : loop until bExit=true  \t\nMain=0\t\nEnd function \t\nSub IE_onQuit()\t\nmsgbox("IE_onQuit Recieved")\t\nbExit=true\t\nEnd sub
..VBSEvents()\t\n----\t\nImplementing Events within VbScript:\t\n----\t\nwScript.Quit(Main) \t\nfunction Main \t\nSet oIE = wscript.CreateObject("InternetExplorer.Application","IE_") \t\n\ tvar bExit = false \t\noIE.navigate ""  ' Load URL \t\noIE.Visible = 1 ' Keep visible. \t\n\t msgbox("Waiting for IE to quit")  \t\ndo :  wscript.sleep(300) : loop until bExit=true  \t\nMain=0\t\nEnd function \t\nSub IE_onQuit()\t\nmsgbox("IE_onQuit Recieved")\t\nbExit=true\t\nEnd sub

_Error()----\t\nEvent that is fired when an error occurs in the remote script. ( WScripting Events )\t\n---- \t\nObject_Error
_Start()----\t\nEvent that is fired when the remote script begins executing. ( WScripting Events )\t\n---- \t\nObject_Start
_End()----\t\nEvent that is fired when the remote script completes. ( WScripting Events )\t\n---- 
