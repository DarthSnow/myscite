-
-- Interface
 Within Lua scripts you can use the following 
 
 - globals -
 editor - the editor pane.
 output - the output pane.
 props - a pseudo-table representing the SciTE properties.
 buffer - a table associated with the current buffer or document.
 scite - a namespace for functions which control SciTE.
 trace(str) - writes s to the output pane (no prefix, no newlines).
 dostring(str) - executes as as a Lua string, like early Lua's dostring.

 :-> included lua.scite.api to show some nice calltips.
 
-- remdebugging
 You can use SciTE not only to debug the executable, but any SciTE Lua scripts.
 Put these statements into the debuggee. The first one ensures that SciTE can find other Lua packages using require;
 Alternatively you can put a copy of engine.lua in a directory remdebug in your SciTE package.path

 require "remdebug.engine"
 remdebug.engine.start()
 remdebug.engine.config { host = your-ip-address }
 
-- Tips
 Using package.loadlib gives you the advantage of defining a full qualified path like:
 local fn,err =  package.loadlib("E:\\lfs.dll", "luaopen_lfs")

-- Further Information 
 ... can be obtained from within the source Tree - scintilla/include/scintilla.iface
 ... or online at www.scintilla.org/PaneAPI.html
