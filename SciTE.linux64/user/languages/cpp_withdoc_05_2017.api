##
# C/CPP API, [c89-cpp99] as fetched from CPlusPlus.com / Februar2017, Marcedo@HabmalneFrage.de | https://sourceforge.net/projects/scite-webdev
##

__FILE__ @@|[c99 cpp98 cpp11]|[ <cassert>]
__func__ @@|[c99 cpp98 cpp11]|[ <cassert>]
__LINE__ @@|[c99 cpp98 cpp11]|[ <cassert>]
_IOFBF @@|[c99 cpp98 cpp11]|[<cstdio>]
_IOLBF @@|[c99 cpp98 cpp11]|[<cstdio>]
_IONBF @@|[c99 cpp98 cpp11]|[<cstdio>]
abort(void)Param: ()\t\nDesc: Abort current process (function)\t\nProto: void abort (void);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
abs(double x)Param: (Value whose absolute value is returned.)\t\nDesc: Compute absolute value (function)\t\nProto: double abs (double x); float abs (float x);\t\nProto: long double abs (long double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
accumulate(first, last)Param: (Input iterators to the initial and final positions in a sequence.)\t\nDesc: Accumulate values in range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<numeric>]
acos(double x)Param: (Value whose arc cosine is computed, in the interval [-1,+1].)\t\nDesc: Compute arc cosine (function)\t\nProto: double acos (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
acosh(double x)Param: (Value whose arc hyperbolic cosine is computed.)\t\nDesc: Compute arc hyperbolic cosine (function)\t\nProto: double acosh (double x); float acoshf (float x);\t\nProto: long double acoshl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
adjacent_difference(first, last)Param: (Input iterators to the initial and final positions in a sequence.)\t\nDesc: Compute adjacent difference of range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<numeric>]
adjacent_find(first, last)Param: (Forward iterators to the initial and final positions of the searched sequence.)\t\nDesc: Find equal adjacent elements in range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
advance(InputIterator& it, Distance n)Param: (Iterator to be advanced.)\t\nDesc: Advance iterator (function template)\t\nProto: template <class InputIterator, class Distance>\t\nvoid advance (InputIterator& it, Distance n);\t\n|[cpp98 cpp11]|[<iterator>]
allocator(T)Param: (Type of the elements allocated by the object (aliased as member type value_type).)\t\nDesc: Default allocator (class template)\t\nProto: template <class T> class allocator;\t\n|[cpp98 cpp11 ]|[<memory>]
and @@|[c99 cpp98 cpp11]|[<ciso646>]
and_eq @@|[c99 cpp98 cpp11]|[<ciso646>]
asctime(const struct tm * timeptr)Param: (Pointer to a tm structure that contains a calendar time broken down into its components (see struct tm).)\t\nDesc: Convert tm structure to string (function)\t\nProto: char* asctime (const struct tm * timeptr);\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
asin(double x)Param: (Value whose arc sine is computed, in the interval [-1,+1].)\t\nDesc: Compute arc sine (function)\t\nProto: double asin(double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
asinh(double x)Param: (Value whose arc hyperbolic sine is computed.)\t\nDesc: Compute arc hyperbolic sine (function)\t\nProto: double asinh (double x); float asinhf (float x);\t\nProto: long double asinhl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
assert(int expression)Param: (Expression to be evaluated.)\t\nDesc: Evaluate assertion (macro)\t\nProto: void assert (int expression);\t\n|[c90 c99 arm cpp98 cpp11]|[<cassert> (assert.h)]
async(policy)Param: ()\t\nDesc: Call function asynchronously (function template)\t\nProto: long-proto\t\n|[]|[<future>]
atan(double x)Param: (Value whose arc tangent is computed.)\t\nDesc: Compute arc tangent (function)\t\nProto: double atan(double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
atan2(double y, double x)Param: (Value representing the proportion of the y-coordinate.)\t\nDesc: Compute arc tangent with two parameters (function)\t\nProto: double atan2(double y, double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
atanh(double x)Param: (Value whose arc hyperbolic tangent is computed, in the interval [-1,+1].)\t\nDesc: Compute arc hyperbolic tangent (function)\t\nProto: double atanh (double x); float atanhf (float x);\t\nProto: long double atanhl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
atexit(void *func void)Param: (Function to be called.)\t\nDesc: Set function to be executed on exit (function)\t\nProto: int atexit (void (*func)(void));\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
atof(const char* str)Param: (C-string beginning with the representation of a floating-point number.)\t\nDesc: Convert string to double (function)\t\nProto: double atof (const char* str);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
atoi(const char * str)Param: (C-string beginning with the representation of an integral number.)\t\nDesc: Convert string to integer (function)\t\nProto: int atoi (const char * str);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
atol(const char * str)Param: (C-string containing the representation of an integral number.)\t\nDesc: Convert string to long integer (function)\t\nProto: long int atol ( const char * str );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
atoll(const char * str)Param: (C-string containing the representation of an integral number.)\t\nDesc: Convert string to long long integer (function)\t\nProto: long long int atoll ( const char * str );\t\n|[c99 cpp11]|[<cstdlib> (stdlib.h)]
auto_ptr(X)Param: (The type of the managed object, aliased as member type element_type.)\t\nDesc: Automatic Pointer [deprecated] (class template)\t\nProto: template <class X> class auto_ptr;\t\n|[cpp98 cpp11 ]|[<memory>]
auto_ptr_ref()Param: ()\t\nDesc: Reference to automatic pointer (class template)\t\nProto: template <class Y> struct auto_ptr_ref;\t\n|[cpp98 cpp11]|[<memory>]
back_insert_iterator(Container)Param: (A container class with member push_back defined (such as the standard containers vector, deque and list).)\t\nDesc: Back insert iterator (class template)\t\nProto: template <class Container> class back_insert_iterator;\t\n|[cpp98 cpp11]|[<iterator>]
back_inserter(Container& x)Param: (Container on which the iterator will insert new elements.)\t\nDesc: Construct back insert iterator (function template)\t\nProto: template <class Container>\t\nback_insert_iterator<Container> back_inserter (Container& x);\t\n|[cpp98 cpp11]|[<iterator>]
bad_alloc()Param: ()\t\nDesc: Exception thrown on failure allocating memory (class)\t\nProto: class bad_alloc;\t\n|[cpp98 cpp11]|[<new>]
bad_cast()Param: ()\t\nDesc: Exception thrown on failure to dynamic cast (class)\t\nProto: class bad_cast;\t\n|[cpp98 cpp11]|[<typeinfo>]
bad_exception()Param: ()\t\nDesc: Exception thrown by unexpected handler (class)\t\nProto: class bad_exception;\t\n|[cpp98 cpp11]|[<exception>]
bad_typeid()Param: ()\t\nDesc: Exception thrown on typeid of null pointer (class)\t\nProto: class bad_typeid;\t\n|[cpp98 cpp11]|[<typeinfo>]
basic_filebuf(charT)Param: (Character type.)\t\nDesc: File stream buffer (class template)\t\nProto: template < class charT, class traits = char_traits<charT> >\t\nclass basic_filebuf;\t\n|[cpp98 cpp11 ]|[<fstream>]
basic_filebuf(charT)Param: (Character type.)\t\nDesc: File stream buffer (class template)\t\nProto: template < class charT, class traits = char_traits<charT> >\t\nclass basic_filebuf;\t\n|[cpp98 cpp11 ]|[<fstream>]
basic_fstream(charT)Param: (Character type.)\t\nDesc: File stream (class template)\t\nProto: template < class charT, class traits = char_traits<charT> >\t\nclass basic_fstream;\t\n|[cpp98 cpp11 ]|[<fstream>]
basic_fstream(charT)Param: (Character type.)\t\nDesc: File stream (class template)\t\nProto: template < class charT, class traits = char_traits<charT> >\t\nclass basic_fstream;\t\n|[cpp98 cpp11 ]|[<fstream>]
basic_ifstream(charT)Param: (Character type.)\t\nDesc: Input file stream (class template)\t\nProto: template < class charT, class traits = char_traits<charT> >\t\nclass basic_ifstream;\t\n|[cpp98 cpp11 ]|[<fstream>]
basic_ifstream(charT)Param: (Character type.)\t\nDesc: Input file stream (class template)\t\nProto: template < class charT, class traits = char_traits<charT> >\t\nclass basic_ifstream;\t\n|[cpp98 cpp11 ]|[<fstream>]
basic_ios(charT)Param: (Character type.)\t\nDesc: Base class for streams (type-dependent components) (class template)\t\nProto: template <class charT, class traits = char_traits<charT> >\t\nclass basic_ios;\t\n|[cpp98 cpp11 ]|[<ios>]
basic_ios(charT)Param: (Character type.)\t\nDesc: Base class for streams (type-dependent components) (class template)\t\nProto: template <class charT, class traits = char_traits<charT> >\t\nclass basic_ios;\t\n|[cpp98 cpp11 ]|[<ios>]
basic_iostream(charT)Param: (Character type.)\t\nDesc: Input/output stream (class template)\t\nProto: template <class charT, class traits = char_traits<charT> > class basic_iostream;\t\n|[cpp98 cpp11 ]|[<istream>]
basic_iostream(charT)Param: (Character type.)\t\nDesc: Input/output stream (class template)\t\nProto: template <class charT, class traits = char_traits<charT> > class basic_iostream;\t\n|[cpp98 cpp11 ]|[<istream>]
basic_istream(charT)Param: (Character type.)\t\nDesc: Input stream (class template)\t\nProto: template <class charT, class traits = char_traits<charT> >\t\nclass basic_istream;\t\n|[cpp98 cpp11 ]|[<istream>]
basic_istream(charT)Param: (Character type.)\t\nDesc: Input stream (class template)\t\nProto: template <class charT, class traits = char_traits<charT> >\t\nclass basic_istream;\t\n|[cpp98 cpp11 ]|[<istream>]
basic_istringstream(charT)Param: (Character type used by both the stream and the basic_string objects it accepts or generates.)\t\nDesc: Input string stream (class template)\t\nProto: long-proto\t\n|[cpp98 cpp11 ]|[<sstream>]
basic_ofstream(charT)Param: (Character type.)\t\nDesc: Output file stream (class template)\t\nProto: template < class charT, class traits = char_traits<charT> >\t\nclass basic_ofstream;\t\n|[cpp98 cpp11 ]|[<fstream>]
basic_ofstream(charT)Param: (Character type.)\t\nDesc: Output file stream (class template)\t\nProto: template < class charT, class traits = char_traits<charT> >\t\nclass basic_ofstream;\t\n|[cpp98 cpp11 ]|[<fstream>]
basic_ostream(charT)Param: (Character type.)\t\nDesc: Output stream (class)\t\nProto: template <class charT, class traits = char_traits<charT> >\t\nclass basic_ostream;\t\n|[cpp98 cpp11 ]|[<ostream>]
basic_ostream(charT)Param: (Character type.)\t\nDesc: Output stream (class)\t\nProto: template <class charT, class traits = char_traits<charT> >\t\nclass basic_ostream;\t\n|[cpp98 cpp11 ]|[<ostream>]
basic_ostringstream(charT)Param: (Character type used by both the stream and the basic_string objects it accepts or generates.)\t\nDesc: Output string stream (class template)\t\nProto: long-proto\t\n|[cpp98 cpp11 ]|[<sstream>]
basic_streambuf(charT)Param: (Character type.)\t\nDesc: Base buffer class for streams (class template)\t\nProto: template <class charT, class traits = char_traits<charT> >\t\nclass basic_streambuf;\t\n|[cpp98 cpp11 ]|[<streambuf>]
basic_streambuf(charT)Param: (Character type.)\t\nDesc: Base buffer class for streams (class template)\t\nProto: template <class charT, class traits = char_traits<charT> >\t\nclass basic_streambuf;\t\n|[cpp98 cpp11 ]|[<streambuf>]
basic_stringbuf(charT)Param: (Character type used by both the stream buffer and the basic_string objects it accepts or generates.)\t\nDesc: String stream buffer (class template)\t\nProto: long-proto\t\n|[cpp98 cpp11 ]|[<sstream>]
basic_stringstream(charT)Param: (Character type used by both the stream and the basic_string objects it accepts or generates.)\t\nDesc: String stream (class template)\t\nProto: long-proto\t\n|[cpp98 cpp11 ]|[<sstream>]
bidirectional_iterator_tag()Param: ()\t\nDesc: Bidirectional iterator category (class)\t\nProto: struct bidirectional_iterator_tag {}\t\n|[cpp98 cpp11]|[<iterator>]
binary_function()Param: ()\t\nDesc: Binary function object base class (class template)\t\nProto: template <class Arg1, class Arg2, class Result> struct binary_function;\t\n|[cpp98 cpp11]|[<functional>]
binary_negate(Predicate)Param: (A binary function object class, with members first_argument_type and second_argument_type defined.)\t\nDesc: Negate binary function object class (class template)\t\nProto: template <class Predicate> class binary_negate;\t\n|[cpp98 cpp11]|[<functional>]
binary_search(first, last)Param: (Forward iterators to the initial and final positions of a sorted (or properly partitioned) sequence.)\t\nDesc: Test if value exists in sorted sequence (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
bind1st(const Operation& op, const T& x)Param: ()\t\nDesc: Return function object with first parameter bound (function template)\t\nProto: template <class Operation, class T>\t\nbinder1st<Operation> bind1st (const Operation& op, const T& x);\t\n|[cpp98 cpp11]|[<functional>]
bind2nd(const Operation& op, const T& x)Param: ()\t\nDesc: Return function object with second parameter bound (function template)\t\nProto: template <class Operation, class T>\t\nbinder2nd<Operation> bind2nd (const Operation& op, const T& x);\t\n|[cpp98 cpp11]|[<functional>]
binder1st()Param: ()\t\nDesc: Generate function object class with 1st parameter bound (class template)\t\nProto: template <class Operation> class binder1st;\t\n|[cpp98 cpp11]|[<functional>]
binder2nd()Param: ()\t\nDesc: Generate function object class with 2nd parameter bound (class template)\t\nProto: template <class Operation> class binder2nd;\t\n|[cpp98 cpp11]|[<functional>]
bitand @@|[c99 cpp98 cpp11]|[<ciso646>]
bitor @@|[c99 cpp98 cpp11]|[<ciso646>]
bitset(N)Param: (Size of the bitset, in terms of number of bits.)\t\nDesc: Bitset (class template)\t\nProto: template <size_t N> class bitset;\t\n|[cpp98 cpp11 ]|[<bitset>]
bool @@|[c99 cpp98 cpp11]|[<cstdbool>]
boolalpha(ios_base& str)Param: (Stream object whose format flag is affected.)\t\nDesc: Alphanumerical bool values (function)\t\nProto: ios_base& boolalpha (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
bsearch(const void* key, const void* base,  size_t num, size_t size,  int (*compar)(const void*,const void*))Param: (Pointer to the object that serves as key for the search, type-casted to a )\t\nDesc: Binary search in array (function)\t\nProto: void* bsearch (const void* key, const void* base,  size_t num, size_t size,  int (*compar)(const void*,const void*));\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
BUFSIZ()Param: ()\t\nDesc: Buffer size (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
calloc(size_t num, size_t size)Param: (Number of elements to allocate.)\t\nDesc: Allocate and zero-initialize array (function)\t\nProto: void* calloc (size_t num, size_t size);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
cbrt(double x)Param: (Value whose cubit root is computed.)\t\nDesc: Compute cubic root (function)\t\nProto: double cbrt (double x); float cbrtf (float x);\t\nProto: long double cbrtl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
ceil(double x)Param: (Value to round up.)\t\nDesc: Round up value (function)\t\nProto: double ceil (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
cerr()Param: ()\t\nDesc: Standard output stream for errors (object)\t\nProto: extern ostream cerr;\t\n|[arm cpp98 cpp11]|[<iostream>]
CHAR_BIT @@|[c99 cpp98 cpp11]|[<limits>]
CHAR_MAX @@|[c99 cpp98 cpp11]|[<limits>]
CHAR_MIN @@|[c99 cpp98 cpp11]|[<limits>]
char_traits(charT)Param: (Character type.)\t\nDesc: Character traits (class template)\t\nProto: template <class charT> struct char_traits;template <> struct char_traits<char>;template <> struct char_traits<wchar_t>;\t\n|[cpp98 cpp11 ]|[<string>]
char_traits(charT)Param: (Character type.)\t\nDesc: Character traits (class template)\t\nProto: template <class charT> struct char_traits;template <> struct char_traits<char>;template <> struct char_traits<wchar_t>;\t\n|[cpp98 cpp11 ]|[<string>]
cin()Param: ()\t\nDesc: Standard input stream (object)\t\nProto: extern istream cin;\t\n|[arm cpp98 cpp11]|[<iostream>]
clearerr( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Clear error indicators (function)\t\nProto: void clearerr ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
clock(void)Param: ()\t\nDesc: Clock program (function)\t\nProto: clock_t clock (void);\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
clock_t()Param: ()\t\nDesc: Clock type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
CLOCKS_PER_SEC()Param: ()\t\nDesc: Clock ticks per second (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
clog()Param: ()\t\nDesc: Standard output stream for logging (object)\t\nProto: extern ostream clog;\t\n|[arm cpp98 cpp11]|[<iostream>]
codecvt_base()Param: ()\t\nDesc: Base class for codecvt (class)\t\nProto: class codecvt_base;\t\n|[cpp98 cpp11]|[<locale>]
codecvt_byname()Param: ()\t\nDesc: Convert codeset facet (class template)\t\nProto: template <class internT, class externT, class stateT> class codecvt_byname;\t\n|[cpp98 cpp11]|[<locale>]
collate(charT)Param: (Character type.)\t\nDesc: Facet to compare and hash strings (class template)\t\nProto: template <class charT> class collate;\t\n|[cpp98 cpp11 ]|[<locale>]
collate_byname()Param: ()\t\nDesc: Facet to compare and hash strings (class template)\t\nProto: template <class charT> class collate_byname;\t\n|[cpp98 cpp11]|[<locale>]
compl @@|[c99 cpp98 cpp11]|[<ciso646>]
complex(T)Param: (Type of both the real and imaginary components of the complex number.)\t\nDesc: Complex number class (class template)\t\nProto: template <class T> class complex;\t\n|[cpp98 cpp11 ]|[<complex>]
conj(const complex<T>& x)Param: (Complex value.)\t\nDesc: Complex conjugate (function template)\t\nProto: template<class T> complex<T> conj (const complex<T>& x);\t\n|[cpp98 cpp11]|[<complex>]
const_mem_fun1_ref_t()Param: ()\t\nDesc: Generate function object class from single-parameter const member (reference version) (class template)\t\nProto: template <class S, class T, class A> class const_mem_fun1_ref_t;\t\n|[cpp98 cpp11]|[<functional>]
const_mem_fun1_t()Param: ()\t\nDesc: Generate function object class from single-parameter const member (pointer version) (class template)\t\nProto: template <class S, class T, class A> class const_mem_fun1_t;\t\n|[cpp98 cpp11]|[<functional>]
const_mem_fun_ref_t()Param: ()\t\nDesc: Generate function object class from const parameterless member (reference version) (class template)\t\nProto: template <class S, class T> class const_mem_fun_ref_t;\t\n|[cpp98 cpp11]|[<functional>]
const_mem_fun_t()Param: ()\t\nDesc: Generate function object class from const parameterless member (pointer version) (class template)\t\nProto: template <class S, class T> class const_mem_fun_t;\t\n|[cpp98 cpp11]|[<functional>]
copy_backward(first, last)Param: (Bidirectional iterators to the initial and final positions in a sequence to be copied.)\t\nDesc: Copy range of elements backward (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
copysign(double x)Param: (Value with the magnitude of the resulting value.)\t\nDesc: Copy sign (function)\t\nProto: double copysign (double x, double y); float copysignf (float x , float y);\t\nProto: long double copysignl (long double x, long double y);\t\n|[c99 cpp11]|[<cmath> (math.h)]
cos(double x):double #Returns the cosine of a radian angle x
cosh(double x):double #Returns the hyperbolic cosine of x
count(InputIterator first, InputIterator last, const T& val)Param: (Input iterators to the initial and final positions of the sequence of elements.)\t\nDesc: Count appearances of value in range (function template)\t\nProto: template <class InputIterator, class T>\t\ntypename iterator_traits<InputIterator>::difference_type\t\n count (InputIterator first, InputIterator last, const T& val);\t\n|[cpp98 cpp11]|[<algorithm>]
count(InputIterator first, InputIterator last, const T& val)Param: (Input iterators to the initial and final positions of the sequence of elements.)\t\nDesc: Count appearances of value in range (function template)\t\nProto: template <class InputIterator, class T>\t\ntypename iterator_traits<InputIterator>::difference_type\t\n count (InputIterator first, InputIterator last, const T& val);\t\n|[cpp98 cpp11]|[<algorithm>]
count_if(InputIterator first, InputIterator last, UnaryPredicate pred)Param: (Input iterators to the initial and final positions of the sequence of elements.)\t\nDesc: Return number of elements in range satisfying condition (function template)\t\nProto: template <class InputIterator, class UnaryPredicate>\t\ntypename iterator_traits<InputIterator>::difference_type\t\n count_if (InputIterator first, InputIterator last, UnaryPredicate pred);\t\n|[cpp98 cpp11]|[<algorithm>]
count_if(InputIterator first, InputIterator last, UnaryPredicate pred)Param: (Input iterators to the initial and final positions of the sequence of elements.)\t\nDesc: Return number of elements in range satisfying condition (function template)\t\nProto: template <class InputIterator, class UnaryPredicate>\t\ntypename iterator_traits<InputIterator>::difference_type\t\n count_if (InputIterator first, InputIterator last, UnaryPredicate pred);\t\n|[cpp98 cpp11]|[<algorithm>]
cout()Param: ()\t\nDesc: Standard output stream (object)\t\nProto: extern ostream cout;\t\n|[arm cpp98 cpp11]|[<iostream>]
ctime(const time_t *timer):char * #Returns a string representing the localtime based on the argument timer
ctype_base()Param: ()\t\nDesc: Base class for ctype (class)\t\nProto: class ctype_base;\t\n|[cpp98 cpp11]|[<locale>]
ctype_byname()Param: ()\t\nDesc: Character type facet (class template)\t\nProto: template <class charT> class ctype_byname;\t\n|[cpp98 cpp11]|[<locale>]
DBL_DIG @@|[c99 cpp98 cpp11]|[<cfloat>]
DBL_EPSILON @@|[c99 cpp98 cpp11]|[<cfloat>]
DBL_MANT_DIG @@|[c99 cpp98 cpp11]|[<cfloat>]
DBL_MAX @@|[c99 cpp98 cpp11]|[<cfloat>]
DBL_MAX_10_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
DBL_MAX_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
DBL_MIN @@|[c99 cpp98 cpp11]|[<cfloat>]
DBL_MIN_10_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
DBL_MIN_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
dec(ios_base& str)Param: (Stream object whose basefield format flag is affected.)\t\nDesc: Use decimal base (function)\t\nProto: ios_base& dec (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
DECIMAL_DIG @@|[c99 cpp98 cpp11]|[<cfloat>]
deque(T)Param: (Type of the elements.)\t\nDesc: Double ended queue (class template)\t\nProto: template < class T, class Alloc = allocator<T> > class deque;\t\n|[cpp98 cpp11 ]|[<deque>]
difftime(time_t end, time_t beginning)Param: (Higher bound of the time interval whose length is calculated.)\t\nDesc: Return difference between two times (function)\t\nProto: double difftime (time_t end, time_t beginning);\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
distance(InputIterator first, InputIterator last)Param: (Iterator pointing to the initial element.)\t\nDesc: Return distance between iterators (function template)\t\nProto: template<class InputIterator>\t\ntypename iterator_traits<InputIterator>::difference_type\t\n distance (InputIterator first, InputIterator last);\t\n|[cpp98 cpp11]|[<iterator>]
distance(InputIterator first, InputIterator last)Param: (Iterator pointing to the initial element.)\t\nDesc: Return distance between iterators (function template)\t\nProto: template<class InputIterator>\t\ntypename iterator_traits<InputIterator>::difference_type\t\n distance (InputIterator first, InputIterator last);\t\n|[cpp98 cpp11]|[<iterator>]
div(int numer, int denom)Param: (Numerator.)\t\nDesc: Integral division (function)\t\nProto: div_t div (int numer, int denom);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
div_t(quot)Param: (Represents the quotient of the integral division operation performed by div, which is the integer of lesser magnitude that is nearest to the algebraic quotient.)\t\nDesc: Structure returned by div (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
divides(T)Param: (Type of the arguments and return type of the functional call.)\t\nDesc: Division function object class (class template)\t\nProto: template <class T> struct divides;\t\n|[cpp98 cpp11]|[<functional>]
domain_error()Param: ()\t\nDesc: Domain error exception (class)\t\nProto: class domain_error;\t\n|[cpp98 cpp11]|[<stdexcept>]
double_t()Param: ()\t\nDesc: Floating-point type (type)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cmath> (math.h)]
E2BIG @@|[c99 cpp98 cpp11]|[<cerrno>]
EACCES @@|[c99 cpp98 cpp11]|[<cerrno>]
EAGAIN @@|[c99 cpp98 cpp11]|[<cerrno>]
EBADF @@|[c99 cpp98 cpp11]|[<cerrno>]
EBADMSG @@|[c99 cpp98 cpp11]|[<cerrno>]
EBUSY @@|[c99 cpp98 cpp11]|[<cerrno>]
ECANCELED @@|[c99 cpp98 cpp11]|[<cerrno>]
ECHILD @@|[c99 cpp98 cpp11]|[<cerrno>]
EDEADLK @@|[c99 cpp98 cpp11]|[<cerrno>]
EDOM @@|[c99 cpp98 cpp11]|[<cerrno>]
EEXIST @@|[c99 cpp98 cpp11]|[<cerrno>]
EFAULT @@|[c99 cpp98 cpp11]|[<cerrno>]
EFBIG @@|[c99 cpp98 cpp11]|[<cerrno>]
EILSEQ @@|[c99 cpp98 cpp11]|[<cerrno>]
EINPROGRESS @@|[c99 cpp98 cpp11]|[<cerrno>]
EINTR @@|[c99 cpp98 cpp11]|[<cerrno>]
EINVAL @@|[c99 cpp98 cpp11]|[<cerrno>]
EIO @@|[c99 cpp98 cpp11]|[<cerrno>]
EISDIR @@|[c99 cpp98 cpp11]|[<cerrno>]
EMFILE @@|[c99 cpp98 cpp11]|[<cerrno>]
EMLINK @@|[c99 cpp98 cpp11]|[<cerrno>]
EMSGSIZE @@|[c99 cpp98 cpp11]|[<cerrno>]
ENAMETOOLONG @@|[c99 cpp98 cpp11]|[<cerrno>]
endl(ostream& os)Param: (Output stream object affected.)\t\nDesc: Insert newline and flush (function)\t\nProto: for ostream\t\nostream& endl (ostream& os);basic template\t\ntemplate <class charT, class traits>\t\nbasic_ostream<charT,traits>& endl (basic_ostream<charT,traits>& os);\t\n|[arm cpp98 cpp11]|[<ostream>]
ends(ostream& os)Param: (Output stream object where character is inserted.)\t\nDesc: Insert null character (function)\t\nProto: for ostream\t\nostream& ends (ostream& os);basic template\t\ntemplate <class charT, class traits>\t\nbasic_ostream<charT,traits>& ends (basic_ostream<charT,traits>& os);\t\n|[arm cpp98 cpp11]|[<ostream>]
ENFILE @@|[c99 cpp98 cpp11]|[<cerrno>]
ENODEV @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOENT @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOEXEC @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOLCK @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOMEM @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOSPC @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOSYS @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOTDIR @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOTEMPTY @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOTSUP @@|[c99 cpp98 cpp11]|[<cerrno>]
ENOTTY @@|[c99 cpp98 cpp11]|[<cerrno>]
ENXIO @@|[c99 cpp98 cpp11]|[<cerrno>]
EOF()Param: ()\t\nDesc: End-of-File (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
EPERM @@|[c99 cpp98 cpp11]|[<cerrno>]
EPIPE @@|[c99 cpp98 cpp11]|[<cerrno>]
equal_range(first, last)Param: (Forward iterators to the initial and final positions of a sorted (or properly partitioned) sequence.)\t\nDesc: Get subrange of equal elements (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
equal_to(T)Param: (Type of the arguments to compare by the functional call.)\t\nDesc: Function object class for equality comparison (class template)\t\nProto: template <class T> struct equal_to;\t\n|[cpp98 cpp11]|[<functional>]
ERANGE @@|[c99 cpp98 cpp11]|[<cerrno>]
erf(double x)Param: (Parameter for the error function.)\t\nDesc: Compute error function (function)\t\nProto: double erf (double x); float erff (float x);\t\nProto: long double erfl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
erfc(double x)Param: (Parameter for the complementary error function.)\t\nDesc: Compute complementary error function (function)\t\nProto: double erfc (double x); float erfcf (float x);\t\nProto: long double erfcl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
EROFS @@|[c99 cpp98 cpp11]|[<cerrno>]
errno()Param: ()\t\nDesc: Last error number (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cerrno> (errno.h)]
ESPIPE @@|[c99 cpp98 cpp11]|[<cerrno>]
ESRCH @@|[c99 cpp98 cpp11]|[<cerrno>]
ETIMEDOUT @@|[c99 cpp98 cpp11]|[<cerrno>]
EXDEV @@|[c99 cpp98 cpp11]|[<cerrno>]
exit(int status):void #Causes the program to terminate normally
EXIT_FAILURE()Param: ()\t\nDesc: Failure termination code (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
EXIT_SUCCESS()Param: ()\t\nDesc: Success termination code (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
exp(double x)Param: (Value of the exponent.)\t\nDesc: Compute exponential function (function)\t\nProto: double exp (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
exp2(double x)Param: (Value of the exponent.)\t\nDesc: Compute binary exponential function (function)\t\nProto: double exp2 (double x); float exp2f (float x);\t\nProto: long double exp2l (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
expm1(double x)Param: (Value of the exponent.)\t\nDesc: Compute exponential minus one (function)\t\nProto: double expm1 (double x); float expm1f (float x);\t\nProto: long double expm1l (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
fabs(double x)Param: (Value whose absolute value is returned.)\t\nDesc: Compute absolute value (function)\t\nProto: double fabs (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
false @@|[c99 cpp98 cpp11]|[<cstdbool>]
fclose( FILE * stream )Param: (Pointer to a FILE object that specifies the stream to be closed.)\t\nDesc: Close file (function)\t\nProto: int fclose ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fdim(double x)Param: (Values whose difference is calculated.)\t\nDesc: Positive difference (function)\t\nProto: double fdim (double x, double y); float fdimf (float x , float y);\t\nProto: long double fdiml (long double x, long double y);\t\n|[c99 cpp11]|[<cmath> (math.h)]
FE_ALL_EXCEPT()Param: ()\t\nDesc: All exceptions (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_DFL_ENV()Param: ()\t\nDesc: Default environment (macro)\t\nProto: fenv_t*\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_DIVBYZERO()Param: ()\t\nDesc: Pole error exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_DOWNWARD()Param: ()\t\nDesc: Downward rounding direction mode (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_INEXACT()Param: ()\t\nDesc: Inexact result exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_INVALID()Param: ()\t\nDesc: Invalid argument exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_OVERFLOW()Param: ()\t\nDesc: Overflow range error exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_TONEAREST()Param: ()\t\nDesc: To-nearest rounding direction mode (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_TOWARDZERO()Param: ()\t\nDesc: Toward-zero rounding direction mode (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_UNDERFLOW()Param: ()\t\nDesc: Underflow range error exception (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FE_UPWARD()Param: ()\t\nDesc: Upward rounding direction mode (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
feclearexcept(int excepts)Param: (Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation.)\t\nDesc: Clear floating-point exceptions (function)\t\nProto: int feclearexcept (int excepts);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fegetenv(fenv_t* envp)Param: (Pointer to a fenv_t object where the state of the floating-point environment is stored.)\t\nDesc: Get floating-point environment (function)\t\nProto: int fegetenv (fenv_t* envp);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fegetexceptflag(fexcept_t* flagp, int excepts)Param: (Pointer to a fexcept_t object where the representation is stored.)\t\nDesc: Get floating-point exception flags (function)\t\nProto: int fegetexceptflag (fexcept_t* flagp, int excepts);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fegetround(void)Param: ()\t\nDesc: Get rounding direction mode (function)\t\nProto: int fegetround (void);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
feholdexcept(fenv_t* envp)Param: (Pointer to a fenv_t object where the state of the floating-point environment is stored.)\t\nDesc: Hold floating-point exceptions (function)\t\nProto: int feholdexcept (fenv_t* envp);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
FENV_ACCESS()Param: ()\t\nDesc: Access to Floating-point environment (pragma)\t\nProto:\t\n#pragma STDC FENV_ACCESS on\t\n#pragma STDC FENV_ACCESS off\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fenv_t()Param: ()\t\nDesc: Floating-point environment type (type)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
feof( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Check end-of-file indicator (function)\t\nProto: int feof ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
feraiseexcept(int excepts)Param: (Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation.)\t\nDesc: Raise floating-point exception (function)\t\nProto: int feraiseexcept (int excepts);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
ferror( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Check error indicator (function)\t\nProto: int ferror ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fesetenv(const fenv_t* envp)Param: (Either a pointer to a fenv_t value (filled by a previous call to fegetenv or feholdexcept), or one of the floating-point environment macro.)\t\nDesc: Set floating-point environment (function)\t\nProto: int fesetenv (const fenv_t* envp);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fesetexceptflag(const fexcept_t* flagp, int excepts)Param: (Pointer to a fexcept_t object with a representation of floating-point exceptions.)\t\nDesc: Set floating-point exception flags (function)\t\nProto: int fesetexceptflag (const fexcept_t* flagp, int excepts);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fesetround(int rdir)Param: (One of the values defined as rounding direction mode.)\t\nDesc: Set rounding direction mode (function)\t\nProto: int fesetround (int rdir);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fetestexcept(int excepts)Param: (Bitmask value: A combination (with bitwise OR) of any number of floating-point exception values supported by the implementation.)\t\nDesc: Test for floating-point exceptions (function)\t\nProto: int fetestexcept (int excepts);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
feupdateenv(const fenv_t* envp)Param: (Either a pointer to a fenv_t value (filled by a previous call to fegetenv or feholdexcept), or one of the floating-point environment macro values.)\t\nDesc: Update floating-point environment (function)\t\nProto: int feupdateenv (const fenv_t* envp);\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fexcept_t()Param: ()\t\nDesc: Floating-point exceptions type (type)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cfenv> (fenv.h)]
fflush( FILE * stream )Param: (Pointer to a FILE object that specifies a buffered stream.)\t\nDesc: Flush stream (function)\t\nProto: int fflush ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fgetc( FILE * stream )Param: (Pointer to a FILE object that identifies an input stream.)\t\nDesc: Get character from stream (function)\t\nProto: int fgetc ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fgetpos( FILE * stream, fpos_t * pos )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Get current position in stream (function)\t\nProto: int fgetpos ( FILE * stream, fpos_t * pos );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fgets( char * str, int num, FILE * stream )Param: (Pointer to an array of chars where the string read is copied.)\t\nDesc: Get string from stream (function)\t\nProto: char * fgets ( char * str, int num, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fgetwc(FILE * stream)Param: (Pointer to a FILE object that identifies an input stream.)\t\nDesc: Get wide character from stream (function)\t\nProto: wint_t fgetwc (FILE * stream);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
fgetws(wchar_t* ws, int num, FILE* stream)Param: (Pointer to an array of wchar_t where the wide string read is copied.)\t\nDesc: Get wide string from stream (function)\t\nProto: wchar_t* fgetws (wchar_t* ws, int num, FILE* stream);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
FILE()Param: ()\t\nDesc: Object containing information to control a stream (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
FILENAME_MAX()Param: ()\t\nDesc: Maximum length of file names (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fill_n(OutputIterator first, Size n, const T& val)Param: (Output iterators to the initial position in a sequence of at least n elements that support being assigned a value of type T.)\t\nDesc: Fill sequence with value (function template)\t\nProto: template <class OutputIterator, class Size, class T> void fill_n (OutputIterator first, Size n, const T& val);\t\n|[cpp98 cpp11]|[<algorithm>]
find_end(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2, ForwardIterator2 last2)Param: (Forward iterators to the initial and final positions of the searched sequence.)\t\nDesc: Find last subsequence in range (function template)\t\nProto: template <class ForwardIterator1, class ForwardIterator2> ForwardIterator1 find_end (ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2, ForwardIterator2 last2);\t\n|[cpp98 cpp11]|[<algorithm>]
find_first_of(ForwardIterator1 first1, ForwardIterator1 last1,  ForwardIterator2 first2, ForwardIterator2 last2)Param: (Forward iterators to the initial and final positions of the searched sequence.)\t\nDesc: Find element from set in range (function template)\t\nProto: template <class ForwardIterator1, class ForwardIterator2> ForwardIterator1 find_first_of (ForwardIterator1 first1, ForwardIterator1 last1,  ForwardIterator2 first2, ForwardIterator2 last2);\t\n|[cpp98 cpp11]|[<algorithm>]
find_if(InputIterator first, InputIterator last, UnaryPredicate pred)Param: (Input iterators to the initial and final positions in a sequence.)\t\nDesc: Find element in range (function template)\t\nProto: template <class InputIterator, class UnaryPredicate>\t\n InputIterator find_if (InputIterator first, InputIterator last, UnaryPredicate pred);\t\n|[cpp98 cpp11]|[<algorithm>]
fixed(ios_base& str)Param: (Stream object whose floatfield format flag is affected.)\t\nDesc: Use fixed floating-point notation (function)\t\nProto: ios_base& fixed (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
float_denorm_style()Param: ()\t\nDesc: Enum type for float denormalization style (type)\t\nProto: enum float_denorm_style;\t\n|[cpp98 cpp11]|[<limits>]
float_round_style()Param: ()\t\nDesc: Enum type for float rounding style (type)\t\nProto: enum float_round_style;\t\n|[cpp98 cpp11]|[<limits>]
float_t()Param: ()\t\nDesc: Floating-point type (type)\t\nProto: no-proto\t\n|[cpp99 cpp11]|[<cmath> (math.h)]
floor(double x)Param: (Value to round down.)\t\nDesc: Round down value (function)\t\nProto: double floor (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
FLT_DIG @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_EPSILON @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_EVAL_METHOD @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_MANT_DIG @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_MAX @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_MAX_10_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_MAX_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_MIN @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_MIN_10_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_MIN_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_RADIX @@|[c99 cpp98 cpp11]|[<cfloat>]
FLT_ROUNDS @@|[c99 cpp98 cpp11]|[<cfloat>]
fma(double x)Param: (Values to be multiplied.)\t\nDesc: Multiply-add (function)\t\nProto: double fma (double x, double y, double z); float fmaf (float x , float y , float z);\t\nProto: long double fmal (long double x, long double y, long double z);\t\n|[c99 cpp11]|[<cmath> (math.h)]
fmax(double x)Param: (Values among which the function selects a maximum.)\t\nDesc: Maximum value (function)\t\nProto: double fmax (double x, double y); float fmaxf (float x , float y);\t\nProto: long double fmaxl (long double x, long double y);\t\n|[c99 cpp11]|[<cmath> (math.h)]
fmin(double x)Param: (Values among which the function selects a minimum.)\t\nDesc: Minimum value (function)\t\nProto: double fmin (double x, double y); float fminf (float x , float y);\t\nProto: long double fminl (long double x, long double y);\t\n|[c99 cpp11]|[<cmath> (math.h)]
fmod(double numer, double denom)Param: (Value of the quotient numerator.)\t\nDesc: Compute remainder of division (function)\t\nProto: double fmod (double numer, double denom);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
fopen( const char * filename, const char * mode )Param: (C string containing the name of the file to be opened.)\t\nDesc: Open file (function)\t\nProto: FILE * fopen ( const char * filename, const char * mode );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
FOPEN_MAX()Param: ()\t\nDesc: Potential limit of simultaneous open streams (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
for_each(InputIterator first, InputIterator last, Function fn)Param: (Input iterators to the initial and final positions in a sequence.)\t\nDesc: Apply function to range (function template)\t\nProto: template <class InputIterator, class Function> Function for_each (InputIterator first, InputIterator last, Function fn);\t\n|[cpp98 cpp11]|[<algorithm>]
forward_iterator_tag()Param: ()\t\nDesc: Forward iterator category (class)\t\nProto: struct forward_iterator_tag {};\t\n|[cpp98 cpp11]|[<iterator>]
fpclassify(x)Param: ()\t\nDesc: Classify floating-point value (macro/function)\t\nProto: fpclassify(x)\t\n|[c99 cpp11]|[<cmath> (math.h)]
fpos_t @@|[c99 cpp98 cpp11]|[<cstdio>]
fpos_t()Param: ()\t\nDesc: Object containing information to specify a position within a file (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fprintf( FILE * stream, const char * format, ... )Param: (Pointer to a FILE object that identifies an output stream.)\t\nDesc: Write formatted data to stream (function)\t\nProto: int fprintf ( FILE * stream, const char * format, ... );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fputc( int character, FILE * stream )Param: (The int promotion of the character to be written.)\t\nDesc: Write character to stream (function)\t\nProto: int fputc ( int character, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fputs( const char * str, FILE * stream )Param: (C string with the content to be written to stream.)\t\nDesc: Write string to stream (function)\t\nProto: int fputs ( const char * str, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fputwc(wchar_t wc, FILE * stream)Param: (The wide character to write.)\t\nDesc: Write wide character to stream (function)\t\nProto: wint_t fputwc (wchar_t wc, FILE * stream);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
fputws(const wchar_t* ws, FILE* stream)Param: (C wide string with the content to write to the stream.)\t\nDesc: Write wide string to stream (function)\t\nProto: int fputws (const wchar_t* ws, FILE* stream);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
fread( void * ptr, size_t size, size_t count, FILE * stream )Param: (Pointer to a block of memory with a size of at least (size*count) bytes, converted to a )\t\nDesc: Read block of data from stream (function)\t\nProto: size_t fread ( void * ptr, size_t size, size_t count, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
free(void* ptr)Param: (Pointer to a memory block previously allocated with malloc, calloc or realloc.)\t\nDesc: Deallocate memory block (function)\t\nProto: void free (void* ptr);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
freopen( const char * filename, const char * mode, FILE * stream )Param: (C string containing the name of the file to be opened.)\t\nDesc: Reopen stream with different file or mode (function)\t\nProto: FILE * freopen ( const char * filename, const char * mode, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
frexp(double x)Param: (Value to be decomposed.)\t\nDesc: Get significand and exponent (function)\t\nProto: double frexp (double x, int* exp);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
front_insert_iterator(Container)Param: (A container class with member push_front defined (such as the standard containers deque and list).)\t\nDesc: Front insert iterator (class template)\t\nProto: template <class Container> class front_insert_iterator;\t\n|[cpp98 cpp11]|[<iterator>]
front_inserter(Container& x)Param: (Container on which the iterator will insert new elements.)\t\nDesc: Constructs front insert iterator (function template)\t\nProto: template <class Container>\t\nfront_insert_iterator<Container> front_inserter (Container& x);\t\n|[cpp98 cpp11]|[<iterator>]
fscanf( FILE * stream, const char * format, ... )Param: (Pointer to a FILE object that identifies the input stream to read data from.)\t\nDesc: Read formatted data from stream (function)\t\nProto: int fscanf ( FILE * stream, const char * format, ... );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fseek( FILE * stream, long int offset, int origin )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Reposition stream position indicator (function)\t\nProto: int fseek ( FILE * stream, long int offset, int origin );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fsetpos( FILE * stream, const fpos_t * pos )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Set position indicator of stream (function)\t\nProto: int fsetpos ( FILE * stream, const fpos_t * pos );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
ftell( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Get current position in stream (function)\t\nProto: long int ftell ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fwide(FILE* stream, int mode)Param: (Pointer to a FILE object that identifies a stream.)\t\nDesc: Stream orientation (function)\t\nProto: int fwide (FILE* stream, int mode);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
fwprintf(FILE* stream, const wchar_t* format, ...)Param: (Pointer to a FILE object that identifies an output stream.)\t\nDesc: Write formatted data to stream (function)\t\nProto: int fwprintf (FILE* stream, const wchar_t* format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
fwrite( const void * ptr, size_t size, size_t count, FILE * stream )Param: (Pointer to the array of elements to be written, converted to a const )\t\nDesc: Write block of data to stream (function)\t\nProto: size_t fwrite ( const void * ptr, size_t size, size_t count, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
fwscanf(FILE* stream, const wchar_t* format, ...)Param: (Pointer to a FILE object that identifies the input stream to read data from.)\t\nDesc: Read formatted data from stream (function)\t\nProto: int fwscanf (FILE* stream, const wchar_t* format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
generate(ForwardIterator first, ForwardIterator last, Generator gen)Param: (Forward iterators to the initial and final positions in a sequence.)\t\nDesc: Generate values for range with function (function template)\t\nProto: template <class ForwardIterator, class Generator>\t\nvoid generate (ForwardIterator first, ForwardIterator last, Generator gen);\t\n|[cpp98 cpp11]|[<algorithm>]
generate_n(OutputIterator first, Size n, Generator gen)Param: (Output iterators to the initial positions in a sequence of at least n elements that support being assigned a value of the type returned by gen.)\t\nDesc: Generate values for sequence with function (function template)\t\nProto: template <class OutputIterator, class Size, class Generator> void generate_n (OutputIterator first, Size n, Generator gen);\t\n|[cpp98 cpp11]|[<algorithm>]
get_temporary_buffer( ptrdiff_t n )Param: (Number of elements of type T for which temporary memory is requested.)\t\nDesc: Get block of temporary memory (function template)\t\nProto: template <class T> pair <T*,ptrdiff_t> get_temporary_buffer ( ptrdiff_t n );\t\n|[cpp98 cpp11]|[<memory>]
getc(FILE *stream):int #Gets the next character (an unsigned char) from the specified stream and advances the position indicator for the stream
getchar( void )Param: ()\t\nDesc: Get character from stdin (function)\t\nProto: int getchar ( void );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
getenv(const char *name):char * #Searches for the environment string pointed to by name and returns the associated value to the string
gets(char *str):char * #Reads a line from stdin and stores it into the string pointed to by str
getwchar(void)Param: ()\t\nDesc: Get wide character from stdin (function)\t\nProto: wint_t getwchar (void);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
gmtime(const time_t * timer)Param: (Pointer to an object of type time_t that contains a time value.)\t\nDesc: Convert time_t to tm as UTC time (function)\t\nProto: struct tm * gmtime (const time_t * timer);\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
greater_equal(T)Param: (Type of the arguments to compare by the functional call.)\t\nDesc: Function object class for greater-than-or-equal-to comparison (class template)\t\nProto: template <class T> struct greater_equal;\t\n|[cpp98 cpp11]|[<functional>]
gslice()Param: ()\t\nDesc: Valarray generalized slice selector (class)\t\nProto: class gslice;\t\n|[cpp98 cpp11 ]|[<valarray>]
gslice_array()Param: ()\t\nDesc: Valarray gslice selection (class template)\t\nProto: template <class T> gslice_array;\t\n|[cpp98 cpp11]|[<valarray>]
has_facet(const locale& loc)Param: (locale object.)\t\nDesc: Check if locale has facet (function template)\t\nProto: template <class Facet> bool has_facet (const locale& loc) throw();\t\n|[cpp98 cpp11]|[<locale>]
hex(ios_base& str)Param: (Stream object whose basefield format flag is affected.)\t\nDesc: Use hexadecimal base (function)\t\nProto: ios_base& hex (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
HUGE_VAL()Param: ()\t\nDesc: Huge value (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
HUGE_VALF()Param: ()\t\nDesc: Huge float value\t\nProto: no-proto\t\n|[c99 cpp11]|[<cmath> (math.h)]
HUGE_VALL()Param: ()\t\nDesc: Huge long double value (constant)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cmath> (math.h)]
hypot(double x)Param: (Floating point values corresponding to the legs of a right-angled triangle for which the hypotenuse is computed.)\t\nDesc: Compute hypotenuse (function)\t\nProto: double hypot (double x, double y); float hypotf (float x , float y);\t\nProto: long double hypotl (long double x, long double y);\t\n|[c99 cpp11]|[<cmath> (math.h)]
ilogb(double x)Param: (Value whose ilogb is returned.)\t\nDesc: Integer binary logarithm (function)\t\nProto: int ilogb (double x);\t\nProto: int ilogbf (float x);\t\nProto: int ilogbl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
imag(const complex<T>& x)Param: (Complex value.)\t\nDesc: Imaginary part of complex (function template)\t\nProto: template<class T> T imag (const complex<T>& x);\t\n|[cpp98 cpp11]|[<complex>]
includes(first1, last1)Param: (Input iterators to the initial and final positions of the first sorted sequence (which is tested on whether it contains the second sequence).)\t\nDesc: Test whether sorted range includes another sorted range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
indirect_array()Param: ()\t\nDesc: Valarray indirect selection (class template)\t\nProto: template <class T> indirect_array;\t\n|[cpp98 cpp11]|[<valarray>]
INFINITY()Param: ()\t\nDesc: Infinity (constant)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cmath> (math.h)]
inner_product(first1, last1)Param: (Input iterators to the initial and final positions in the first sequence.)\t\nDesc: Compute cumulative inner product of range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<numeric>]
inplace_merge(first)Param: (Bidirectional iterator to the initial position in the first sorted sequence to merge.)\t\nDesc: Merge consecutive sorted ranges (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
input_iterator_tag()Param: ()\t\nDesc: Input iterator category (class)\t\nProto: struct input_iterator_tag {};\t\n|[cpp98 cpp11]|[<iterator>]
INT16_C @@|[c99 cpp98 cpp11]|[<cstdint>]
INT16_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT16_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int16_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT32_C @@|[c99 cpp98 cpp11]|[<cstdint>]
INT32_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT32_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int32_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT64_C @@|[c99 cpp98 cpp11]|[<cstdint>]
INT64_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT64_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int64_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT8_C @@|[c99 cpp98 cpp11]|[<cstdint>]
INT8_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT8_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int8_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_FAST16_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_FAST16_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int_fast16_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_FAST32_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_FAST32_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int_fast32_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_FAST64_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_FAST64_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int_fast64_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_FAST8_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_FAST8_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int_fast8_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_LEAST16_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_LEAST16_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int_least16_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_LEAST32_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_LEAST32_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int_least32_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_LEAST64_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_LEAST64_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int_least64_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_LEAST8_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_LEAST8_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
int_least8_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INT_MAX @@|[c99 cpp98 cpp11]|[<limits>]
INT_MIN @@|[c99 cpp98 cpp11]|[<limits>]
internal(ios_base& str)Param: (Stream object whose adjustfield format flag is affected.)\t\nDesc: Adjust field by inserting characters at an internal position (function)\t\nProto: ios_base& internal (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
INTMAX_C @@|[c99 cpp98 cpp11]|[<cstdint>]
INTMAX_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INTMAX_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
intmax_t @@|[c99 cpp98 cpp11]|[<cstdint>]
INTPTR_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
INTPTR_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
intptr_t @@|[c99 cpp98 cpp11]|[<cstdint>]
invalid_argument()Param: ()\t\nDesc: Invalid argument exception (class)\t\nProto: class invalid_argument;\t\n|[cpp98 cpp11]|[<stdexcept>]
ios_base()Param: ()\t\nDesc: Base class for streams (class)\t\nProto: class ios_base;\t\n|[arm cpp98 cpp11 ]|[<ios>]
isalnum( int c )Param: (Character to be checked, casted as an int, or EOF.)\t\nDesc: Check if character is alphanumeric (function)\t\nProto: int isalnum ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
isalpha( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is alphabetic (function)\t\nProto: int isalpha ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
isblank( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is blank (function)\t\nProto: int isblank ( int c );\t\n|[c99 cpp11]|[<cctype> (ctype.h)]
iscntrl( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is a control character (function)\t\nProto: int iscntrl ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
isdigit( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is decimal digit (function)\t\nProto: int isdigit ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
isfinite(x)Param: (A floating-point value.)\t\nDesc: Is finite value (macro)\t\nProto: isfinite(x)\t\n|[c99 cpp11]|[<cmath> (math.h)]
isgraph( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character has graphical representation (function)\t\nProto: int isgraph ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
isgreater(x, y)Param: (Values to be compared.)\t\nDesc: Is greater (macro)\t\nProto: isgreater(x,y)\t\n|[c99 cpp11]|[<cmath> (math.h)]
isgreaterequal(x, y)Param: (Values to be compared.)\t\nDesc: Is greater or equal (macro)\t\nProto: isgreaterequal(x,y)\t\n|[c99 cpp11]|[<cmath> (math.h)]
isinf(x)Param: (A floating-point value.)\t\nDesc: Is infinity (macro/function)\t\nProto: isinf(x)\t\n|[c99 cpp11]|[<cmath> (math.h)]
isless(x, y)Param: (Values to be compared.)\t\nDesc: Is less (macro)\t\nProto: isless(x,y)\t\n|[c99 cpp11]|[<cmath> (math.h)]
islessequal(x, y)Param: (Values to be compared.)\t\nDesc: Is less or equal (macro)\t\nProto: islessequal(x,y)\t\n|[c99 cpp11]|[<cmath> (math.h)]
islessgreater(x, y)Param: (Values to be compared.)\t\nDesc: Is less or greater (macro)\t\nProto: islessgreater(x,y)\t\n|[c99 cpp11]|[<cmath> (math.h)]
islower( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is lowercase letter (function)\t\nProto: int islower ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
isnan(x)Param: (A floating-point value.)\t\nDesc: Is Not-A-Number (macro/function)\t\nProto: isnan(x)\t\n|[c99 cpp11]|[<cmath> (math.h)]
isnormal(x)Param: (A floating-point value.)\t\nDesc: Is normal (macro/function)\t\nProto: isnormal(x)\t\n|[c99 cpp11]|[<cmath> (math.h)]
isprint( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is printable (function)\t\nProto: int isprint ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
ispunct( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is a punctuation character (function)\t\nProto: int ispunct ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
isspace( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is a white-space (function)\t\nProto: int isspace ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
istream_iterator(T)Param: (Element type for the iterator: The type of elements extracted from the stream.)\t\nDesc: Istream iterator (class template)\t\nProto: template <class T, class charT=char, class traits=char_traits<charT>, \t\n class Distance = ptrdiff_t>\t\nclass istream_iterator;\t\n|[cpp98 cpp11 ]|[<iterator>]
istreambuf_iterator(charT)Param: (Character type.)\t\nDesc: Input stream buffer iterator (class template)\t\nProto: template <class charT, class traits=char_traits<charT> > class istreambuf_iterator;\t\n|[cpp98 cpp11]|[<iterator>]
isunordered(x, y)Param: (Values to check whether they are unordered.)\t\nDesc: Is unordered (macro)\t\nProto: isunordered(x,y)\t\n|[c99 cpp11]|[<cmath> (math.h)]
isupper( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is uppercase letter (function)\t\nProto: int isupper ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
iswalnum(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is alphanumeric (function)\t\nProto: int iswalnum (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswalpha(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is alphabetic (function)\t\nProto: int iswalpha (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswblank(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is blank (function)\t\nProto: int iswblank (wint_t c);\t\n|[c99 cpp11]|[<cwctype> (wctype.h)]
iswcntrl(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is a control character (function)\t\nProto: int iswcntrl (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswctype(wint_t c, wctype_t desc)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character has property (function)\t\nProto: int iswctype(wint_t c, wctype_t desc);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswdigit(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is decimal digit (function)\t\nProto: int iswdigit (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswgraph(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character has graphical representation (function)\t\nProto: int iswgraph (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswlower(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is lowercase letter (function)\t\nProto: int iswlower (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswprint(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is printable (function)\t\nProto: int iswprint (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswpunct(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is punctuation character (function)\t\nProto: int iswpunct (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswspace(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is a white-space (function)\t\nProto: int iswspace (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswupper(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is uppercase letter (function)\t\nProto: int iswupper (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
iswxdigit(wint_t c)Param: (Wide character to be checked, casted to a wint_t, or WEOF.)\t\nDesc: Check if wide character is hexadecimal digit (function)\t\nProto: int iswxdigit (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
isxdigit( int c )Param: (Character to be checked, casted to an int, or EOF.)\t\nDesc: Check if character is hexadecimal digit (function)\t\nProto: int isxdigit ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
iter_swap(ForwardIterator1 a, ForwardIterator2 b)Param: (Forward iterators to the objects to swap.)\t\nDesc: Exchange values of objects pointed to by two iterators (function template)\t\nProto: template <class ForwardIterator1, class ForwardIterator2>\t\nvoid iter_swap (ForwardIterator1 a, ForwardIterator2 b);\t\n|[cpp98 cpp11]|[<algorithm>]
iterator(Category)Param: (Category to which the iterator belongs to.)\t\nDesc: Iterator base class (class template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<iterator>]
iterator_traits()Param: ()\t\nDesc: Iterator traits (class template)\t\nProto: template <class Iterator> class iterator_traits;template <class T> class iterator_traits<T*>;template <class T> class iterator_traits<const T*>;\t\n|[cpp98 cpp11]|[<iterator>]
itoa( int value, char * str, int base )Param: (Value to be converted to a string.)\t\nDesc: no-Description (other)\t\nProto: char * itoa ( int value, char * str, int base );\t\n|[arm]|[<cstdlib> (stdlib.h)]
jmp_buf()Param: ()\t\nDesc: Type to hold information to restore calling environment (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<csetjmp> (setjmp.h)]
L_tmpnam()Param: ()\t\nDesc: Minimum length for temporary file name (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
labs(long int n)Param: (Integral value.)\t\nDesc: Absolute value (function)\t\nProto: long int labs (long int n);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
LC_ALL @@|[c99 cpp98 cpp11]|[<clocale>]
LC_COLLATE @@|[c99 cpp98 cpp11]|[<clocale>]
LC_CTYPE @@|[c99 cpp98 cpp11]|[<clocale>]
LC_MESSAGES @@|[c99 cpp98 cpp11]|[<clocale>]
LC_MONETARY @@|[c99 cpp98 cpp11]|[<clocale>]
LC_NUMERC @@|[c99 cpp98 cpp11]|[<clocale>]
LC_TIME @@|[c99 cpp98 cpp11]|[<clocale>
LDBL_DIG @@|[c99 cpp98 cpp11]|[<cfloat>]
LDBL_EPSILON @@|[c99 cpp98 cpp11]|[<cfloat>]
LDBL_MANT_DIG @@|[c99 cpp98 cpp11]|[<cfloat>]
LDBL_MAX @@|[c99 cpp98 cpp11]|[<cfloat>]
LDBL_MAX_10_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
LDBL_MAX_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
LDBL_MIN @@|[c99 cpp98 cpp11]|[<cfloat>]
LDBL_MIN_10_EXP @@|[c99 cpp98 cpp11]|[<cfloat>]
LDBL_MIN_EXP @@|[c99 cpp98 cpp11]|[<cfloat>
ldexp(double x)Param: (Floating point value representing the significand.)\t\nDesc: Generate value from significand and exponent (function)\t\nProto: double ldexp (double x, int exp);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
ldiv(long int numer, long int denom)Param: (Numerator.)\t\nDesc: Integral division (function)\t\nProto: ldiv_t ldiv (long int numer, long int denom);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
ldiv_t(quot)Param: (Represents the quotient of the integral division operation performed by ldiv, which is the integer of lesser magnitude that is nearest to the algebraic quotient.)\t\nDesc: Structure returned by ldiv (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
left(ios_base& str)Param: (Stream object whose adjustfield format flag is affected.)\t\nDesc: Adjust output to the left (function)\t\nProto: ios_base& left (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
length_error()Param: ()\t\nDesc: Length error exception (class)\t\nProto: class length_error;\t\n|[cpp98 cpp11]|[<stdexcept>]
less_equal(T)Param: (Type of the arguments to compare by the functional call.)\t\nDesc: Function object class for less-than-or-equal-to comparison (class template)\t\nProto: template <class T> struct less_equal;\t\n|[cpp98 cpp11]|[<functional>]
lexicographical_compare(first1, last1)Param: (Input iterators to the initial and final positions of the first sequence.)\t\nDesc: Lexicographical less-than comparison (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
lgamma(double x)Param: (Parameter for the log-gamma function.)\t\nDesc: Compute log-gamma function (function)\t\nProto: double lgamma (double x); float lgammaf (float x);\t\nProto: long double lgammal (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
llabs(long long int n)Param: (Integral value.)\t\nDesc: Absolute value (function)\t\nProto: long long int llabs (long long int n);\t\n|[c99 cpp11]|[<cstdlib> (stdlib.h)]
lldiv(long long int numer, long long int denom)Param: (Numerator.)\t\nDesc: Integral division (function)\t\nProto: lldiv_t lldiv (long long int numer, long long int denom);\t\n|[c99 cpp11]|[<cstdlib> (stdlib.h)]
lldiv_t(quot)Param: (Represents the quotient of the integral division operation performed by lldiv, which is the integer of lesser magnitude that is nearest to the algebraic quotient.)\t\nDesc: Structure returned by lldiv (type)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cstdlib> (stdlib.h)]
LLONG_MAX @@|[c99 cpp98 cpp11]|[<limits>]
LLONG_MIN @@|[c99 cpp98 cpp11]|[<limits>]
llrint(double x)Param: (Value to round.)\t\nDesc: Round and cast to long long integer (function)\t\nProto: long long int llrint (double x);\t\nProto: long long int llrintf (float x);\t\nProto: long long int llrintl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
llround(double x)Param: (Value to round.)\t\nDesc: Round to nearest and cast to long long integer (function)\t\nProto: long long int llround (double x);\t\nProto: long long int llroundf (float x);\t\nProto: long long int llroundl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
localeconv(void)Param: ()\t\nDesc: Get locale formatting parameters for quantities (function)\t\nProto: struct lconv* localeconv (void);\t\n|[c90 c99 arm cpp98 cpp11]|[<clocale> (locale.h)]
localtime(const time_t * timer)Param: (Pointer to an object of type time_t that contains a time value.)\t\nDesc: Convert time_t to tm as local time (function)\t\nProto: struct tm * localtime (const time_t * timer);\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
log(double x):double #Returns the natural logarithm (base-e logarithm) of x
log10(double x)Param: (Value whose logarithm is calculated.)\t\nDesc: Compute common logarithm (function)\t\nProto: double log10 (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
log1p(double x)Param: (Value whose logarithm is calculated.)\t\nDesc: Compute logarithm plus one (function)\t\nProto: double log1p (double x); float log1pf (float x);\t\nProto: long double log1pl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
log2(double x)Param: (Value whose logarithm is calculated.)\t\nDesc: Compute binary logarithm (function)\t\nProto: double log2 (double x); float log2f (float x);\t\nProto: long double log2l (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
logic_error()Param: ()\t\nDesc: Logic error exception (class)\t\nProto: class logic_error;\t\n|[cpp98 cpp11]|[<stdexcept>]
logical_and(T)Param: (Type of the arguments passed to the functional call.)\t\nDesc: Logical AND function object class (class template)\t\nProto: template <class T> struct logical_and;\t\n|[cpp98 cpp11]|[<functional>]
logical_not(T)Param: (Type of the argument passed to the functional call.)\t\nDesc: Logical NOT function object class (class template)\t\nProto: template <class T> struct logical_not;\t\n|[cpp98 cpp11]|[<functional>]
logical_or(T)Param: (Type of the arguments passed to the functional call.)\t\nDesc: Logical OR function object class (class template)\t\nProto: template <class T> struct logical_or;\t\n|[).]|[class template]
LONG_MAX @@|[c99 cpp98 cpp11]|[<limits>]
LONG_MIN @@|[c99 cpp98 cpp11]|[<limits>]
longjmp(jmp_buf env, int val)Param: (Object of type jmp_buf filled by a previous call to setjmp that contains information to restore the environment to that point.)\t\nDesc: Long jump (function)\t\nProto: void longjmp (jmp_buf env, int val);\t\n|[c90 c99 arm cpp98 cpp11]|[<csetjmp> (setjmp.h)]
lower_bound(first, last)Param: (Forward iterators to the initial and final positions of a sorted (or properly partitioned) sequence.)\t\nDesc: Return iterator to lower bound (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
lrint(double x)Param: (Value to round.)\t\nDesc: Round and cast to long integer (function)\t\nProto: long int llrint (double x);\t\nProto: long int llrintf (float x);\t\nProto: long int llrintl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
lround(double x)Param: (Value to round.)\t\nDesc: Round to nearest and cast to long integer (function)\t\nProto: long int lround (double x);\t\nProto: long int lroundf (float x);\t\nProto: long int lroundl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
make_heap(first, last)Param: (Random-access iterators to the initial and final positions of the sequence to be transformed into a heap.)\t\nDesc: Make heap from range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
make_pair(T1 x, T2 y)Param: (Values for the members first and second, respectively, of the pair object being constructed.)\t\nDesc: Construct pair object (function template)\t\nProto: template <class T1, class T2> pair<T1,T2> make_pair (T1 x, T2 y);\t\n|[cpp98 cpp11]|[<utility>]
malloc(size_t size)Param: (Size of the memory block, in bytes.)\t\nDesc: Allocate memory block (function)\t\nProto: void* malloc (size_t size);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
map(Key)Param: (Type of the keys.)\t\nDesc: Map (class template)\t\nProto: long-proto\t\n|[cpp98 cpp11 ]|[<map>]
mask_array()Param: ()\t\nDesc: Valarray mask selection (class template)\t\nProto: template <class T> mask_array;\t\n|[cpp98 cpp11]|[<valarray>]
math_errhandling()Param: ()\t\nDesc: Error handling (macro)\t\nProto: no-proto\t\n|[c99 cpp11]|[<cmath> (math.h)]
max_element(first, last)Param: (Input iterators to the initial and final positions of the sequence to compare.)\t\nDesc: Return largest element in range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
MB_CUR_MAX()Param: ()\t\nDesc: Maximum size of multibyte characters (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
MB_LEN_MAX @@|[c99 cpp98 cpp11]|[<limits>]
mblen(const char* pmb, size_t max)Param: (Pointer to the first byte of a multibyte character.)\t\nDesc: Get length of multibyte character (function)\t\nProto: int mblen (const char* pmb, size_t max);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
mbrlen(const char* pmb, size_t max, mbstate_t* ps)Param: (Pointer to the first byte of a multibyte character.)\t\nDesc: Get length of multibyte character (function)\t\nProto: size_t mbrlen (const char* pmb, size_t max, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
mbrtowc(wchar_t* pwc, const char* pmb, size_t max, mbstate_t* ps)Param: (Pointer to an object of type wchar_t.)\t\nDesc: Convert multibyte sequence to wide character (function)\t\nProto: size_t mbrtowc (wchar_t* pwc, const char* pmb, size_t max, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
mbsinit(const mbstate_t* ps)Param: (Pointer to an mbstate_t object.)\t\nDesc: Check if initial conversion state (function)\t\nProto: int mbsinit (const mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
mbsrtowcs(wchar_t* dest, const char** src, size_t max, mbstate_t* ps)Param: (Pointer to an array of wchar_t elements long enough to store a string of max wide characters.)\t\nDesc: Convert multibyte string to wide-character string (function)\t\nProto: size_t mbsrtowcs (wchar_t* dest, const char** src, size_t max, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
mbstate_t @@|[c99 cpp98 cpp11]|[<cwchar>]
mbstate_t()Param: ()\t\nDesc: Multibyte conversion state (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
mbstowcs(wchar_t* dest, const char* src, size_t max)Param: (Pointer to an array of wchar_t elements long enough to contain the resulting sequence (at most, max wide characters).)\t\nDesc: Convert multibyte string to wide-character string (function)\t\nProto: size_t mbstowcs (wchar_t* dest, const char* src, size_t max);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
mbtowc(wchar_t* pwc, const char* pmb, size_t max)Param: (Pointer to an object of type wchar_t.)\t\nDesc: Convert multibyte sequence to wide character (function)\t\nProto: int mbtowc (wchar_t* pwc, const char* pmb, size_t max);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
memchr( const void * ptr, int value, size_t num )Param: (Pointer to the block of memory where the search is performed.)\t\nDesc: Locate character in block of memory (function)\t\nProto: const void * memchr ( const void * ptr, int value, size_t num );void * memchr ( void * ptr, int value, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
memcmp( const void * ptr1, const void * ptr2, size_t num )Param: (Pointer to block of memory.)\t\nDesc: Compare two blocks of memory (function)\t\nProto: int memcmp ( const void * ptr1, const void * ptr2, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
memcpy( void * destination, const void * source, size_t num )Param: (Pointer to the destination array where the content is to be copied, type-casted to a pointer of type )\t\nDesc: Copy block of memory (function)\t\nProto: void * memcpy ( void * destination, const void * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
memmove( void * destination, const void * source, size_t num )Param: (Pointer to the destination array where the content is to be copied, type-casted to a pointer of type )\t\nDesc: Move block of memory (function)\t\nProto: void * memmove ( void * destination, const void * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
memset( void * ptr, int value, size_t num )Param: (Pointer to the block of memory to fill.)\t\nDesc: Fill block of memory (function)\t\nProto: void * memset ( void * ptr, int value, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
messages(charT)Param: (Character type.)\t\nDesc: Facet to access message catalogs (class template)\t\nProto: template <class charT> class messages;\t\n|[cpp98 cpp11 ]|[<locale>]
messages_base()Param: ()\t\nDesc: no-Description (other)\t\nProto: class messages_base;\t\n|[cpp98 cpp11]|[<locale>]
messages_byname()Param: ()\t\nDesc: Facet to access message catalogs (class template)\t\nProto: template <class charT> class messages_byname;\t\n|[cpp98 cpp11]|[<locale>]
min_element(first, last)Param: (Input iterators to the initial and final positions of the sequence to compare.)\t\nDesc: Return smallest element in range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
minus(T)Param: (Type of the arguments and return type of the functional call.)\t\nDesc: Subtraction function object class (class template)\t\nProto: template <class T> struct minus;\t\n|[cpp98 cpp11]|[<functional>]
mismatch(first1, last1)Param: (Input iterators to the initial and final positions of the first sequence.)\t\nDesc: Return first position where two ranges differ (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
mktime(struct tm * timeptr)Param: (Pointer to a tm structure that contains a calendar time broken down into its components (see struct tm).)\t\nDesc: Convert tm structure to time_t (function)\t\nProto: time_t mktime (struct tm * timeptr);\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
modf(double x)Param: (Floating point value to break into parts.)\t\nDesc: Break into fractional and integral parts (function)\t\nProto: double modf (double x, double* intpart);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
modulus(T)Param: (Type of the arguments and return type of the functional call.)\t\nDesc: Modulus function object class (class template)\t\nProto: template <class T> struct modulus;\t\n|[cpp98 cpp11]|[<functional>]
money_base()Param: ()\t\nDesc: Base class for moneypunct (class)\t\nProto: class money_base;\t\n|[cpp98 cpp11]|[<locale>]
money_get(charT)Param: (Character type: the type of the characters in the sequence to interpret.)\t\nDesc: Facet to parse monetary expressions (class template)\t\nProto: template <class charT, class InputIterator = istreambuf_iterator<charT> >\t\nclass money_get;\t\n|[cpp98 cpp11 ]|[<locale>]
money_put(charT)Param: (Character type: the type of the characters in the sequence to write.)\t\nDesc: Facet to format monetary expressions (class template)\t\nProto: template <class charT, class OutputIterator = ostreambuf_iterator<charT> > class money_put;\t\n|[cpp98 cpp11 ]|[<locale>]
moneypunct(charT)Param: (Character type.)\t\nDesc: Monetary punctuation facet (class template)\t\nProto: template <class charT, bool International = false> class moneypunct;\t\n|[cpp98 cpp11 ]|[<locale>]
moneypunct_byname()Param: ()\t\nDesc: Monetary punctuation facet (class template)\t\nProto: template <class charT, bool International = false> class numpunct_byname;\t\n|[cpp98 cpp11]|[<locale>]
multimap(Key)Param: (Type of the keys.)\t\nDesc: Multiple-key map (class template)\t\nProto: long-proto\t\n|[cpp98 cpp11 ]|[<map>]
multiplies(T)Param: (Type of the arguments and return type of the functional call.)\t\nDesc: Multiplication function object class (class template)\t\nProto: template <class T> struct multiplies;\t\n|[cpp98 cpp11]|[<functional>]
multiset(T)Param: (Type of the elements.)\t\nDesc: Multiple-key set (class template)\t\nProto: long-proto\t\n|[cpp98 cpp11 ]|[<set>]
NAN()Param: ()\t\nDesc: Not-A-Number (constant)\t\nProto: float\t\n|[cpp99 cpp11]|[<cmath> (math.h)]
nanf(const char* tagp)Param: (An implementation-specific C-string.)\t\nDesc: no-Description (other)\t\nProto: float nanf (const char* tagp);\t\n|[c99 cpp11]|[<cmath> (math.h)]
nanl(const char* tagp)Param: (An implementation-specific C-string.)\t\nDesc: no-Description (other)\t\nProto: float nanl (const char* tagp);\t\n|[c99 cpp11]|[<cmath> (math.h)]
nearbyint(double x)Param: (Value to round.)\t\nDesc: Round to nearby integral value (function)\t\nProto: double nearbyint (double x); float nearbyintf (float x);\t\nProto: long double nearbyintl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
next_permutation(first, last)Param: (Bidirectional iterators to the initial and final positions of the sequence.)\t\nDesc: Transform range to next permutation (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
nextafter(double x)Param: (Base value.)\t\nDesc: Next representable value (function)\t\nProto: double nextafter (double x, double y); float nextafterf (float x , float y);\t\nProto: long double nextafterl (long double x, long double y);\t\n|[c99 cpp11]|[<cmath> (math.h)]
nexttoward(double x)Param: (Base value.)\t\nDesc: Next representable value toward precise value (function)\t\nProto: double nexttoward (double x, long double y); float nexttowardf (float x , long double y);\t\nProto: long double nexttowardl (long double x, long double y);\t\n|[c99 cpp11]|[<cmath> (math.h)]
noboolalpha(ios_base& str)Param: (Stream object whose format flag is affected.)\t\nDesc: No alphanumerical bool values (function)\t\nProto: ios_base& noboolalpha (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
noshowbase(ios_base& str)Param: (Stream object whose format flag is affected.)\t\nDesc: Do not show numerical base prefixes (function)\t\nProto: ios_base& noshowbase (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
noshowpoint(ios_base& str)Param: (Stream object whose format flag is affected.)\t\nDesc: Do not show decimal point (function)\t\nProto: ios_base& noshowpoint (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
noshowpos(ios_base& str)Param: (Stream object whose format flag is affected.)\t\nDesc: Do not show positive signs (function)\t\nProto: ios_base& noshowpos (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
noskipws(ios_base& str)Param: (Stream object whose format flag is affected.)\t\nDesc: Do not skip whitespaces (function)\t\nProto: ios_base& noskipws (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
not @@|[c99 cpp98 cpp11]|[<ciso646>]
not1(const Predicate& pred)Param: (Unary function object of a class type with member argument_type defined.)\t\nDesc: Return negation of unary function object (function template)\t\nProto: template <class Predicate>\t\nunary_negate<Predicate> not1 (const Predicate& pred);\t\n|[cpp98 cpp11]|[<functional>]
not2(const Predicate& pred)Param: (Binary function object derived from binary_function.)\t\nDesc: Return negation of binary function object (function template)\t\nProto: template <class Predicate>\t\nbinary_negate<Predicate> not2 (const Predicate& pred);\t\n|[cpp98 cpp11]|[<functional>]
not_eq @@|[c99 cpp98 cpp11]|[<ciso646>]
not_equal_to(T)Param: (Type of the arguments to compare by the functional call.)\t\nDesc: Function object class for non-equality comparison (class template)\t\nProto: template <class T> struct not_equal_to;\t\n|[cpp98 cpp11]|[<functional>]
nothrow()Param: ()\t\nDesc:	Nothrow constant (constant)\t\nProto:\t\n|[cpp98 cpp11]|[<new>]
nothrow_t()Param: ()\t\nDesc: Nothrow type (type)\t\nProto: struct nothrow_t {};\t\n|[cpp98 cpp11]|[<new>]
nounitbuf(ios_base& str)Param: (Stream object whose format flag is affected.)\t\nDesc: Do not force flushes after insertions (function)\t\nProto: ios_base& nounitbuf (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
nouppercase(ios_base& str)Param: (Stream object whose format flag is affected.)\t\nDesc: Do not generate upper case letters (function)\t\nProto: ios_base& nouppercase (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
nth_element(RandomAccessIterator first, RandomAccessIterator nth,RandomAccessIterator last)Param: (Random-access iterators to the initial and final positions of the sequence to be used.)\t\nDesc: Sort element in range (function template)\t\nProto: template <class RandomAccessIterator> void nth_element (RandomAccessIterator first, RandomAccessIterator nth,RandomAccessIterator last);\t\n|[cpp98 cpp11]|[<algorithm>]
NULL @@|[c99 cpp98 cpp11]|[<cstdio>]
NULL()Param: ()\t\nDesc: no-Description (other)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<clocale> (locale.h)]
num_get(charT)Param: (Character type: the type of the characters in the sequence to interpret.)\t\nDesc: Facet to parse numeric values (class template)\t\nProto: template <class charT, class InputIterator = istreambuf_iterator<charT> > class num_get;\t\n|[cpp98 cpp11 ]|[<locale>]
num_put(charT)Param: (Character type: the type of the characters in the sequence to write.)\t\nDesc: Facet to format numeric values (class template)\t\nProto: template <class charT, class OutputIterator = ostreambuf_iterator<charT> > class num_put;\t\n|[cpp98 cpp11 ]|[<locale>]
numeric_limits(T)Param: (A type.)\t\nDesc: Numeric limits type (class template)\t\nProto: template <class T> numeric_limits;\t\n|[cpp98 cpp11]|[<limits>]
numpunct(charT)Param: (Character type.)\t\nDesc: Numeric punctuation facet (class template)\t\nProto: template <class charT> class numpunct;\t\n|[cpp98 cpp11 ]|[<locale>]
numpunct_byname()Param: ()\t\nDesc: Numeric puntuation facet (class template)\t\nProto: template <class charT> class numpunct_byname;\t\n|[cpp98 cpp11]|[<locale>]
oct(ios_base& str)Param: (Stream object whose basefield format flag is affected.)\t\nDesc: Use octal base (function)\t\nProto: ios_base& oct (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
offsetof(type,member)Param: (A type in which member is a valid member designator.)\t\nDesc: Return member offset (macro)\t\nProto: offsetof (type,member)\t\n|[c90 c99 arm cpp98 cpp11]|[<cstddef> (stddef.h)]
operatordelete(void* ptr)Param: (A pointer to the memory block to be released, type-casted to a )\t\nDesc: Deallocate storage space (function)\t\nProto: void operator delete (void* ptr) throw();\t\n|[cpp98 cpp11]|[<new>]
operatordelete[](void* ptr)Param: (A pointer to the memory block to be released, type-casted to a )\t\nDesc: Deallocate storage space of array (function)\t\nProto: void operator delete[] (void* ptr) throw();\t\n|[cpp98 cpp11]|[<new>]
operatornew(std::size_t size) throw (std::bad_alloc)Param: (Size in bytes of the requested memory block.)\t\nDesc: Allocate storage space (function)\t\nProto: void* operator new (std::size_t size) throw (std::bad_alloc);\t\n|[cpp98 cpp11]|[<new>]
operatornew[](std::size_t size) throw (std::bad_alloc)Param: (Size in bytes of the requested memory block.)\t\nDesc: Allocate storage space for array (function)\t\nProto: void* operator new[] (std::size_t size) throw (std::bad_alloc);\t\n|[cpp98 cpp11]|[<new>]
or @@|[c99 cpp98 cpp11]|[<ciso646>]
or_eq @@|[c99 cpp98 cpp11]|[<ciso646>]
ostream_iterator(T)Param: ()\t\nDesc: Ostream iterator (class template)\t\nProto: template <class T, class charT=char, class traits=char_traits<charT> >\t\nclass ostream_iterator;\t\n|[cpp98 cpp11 ]|[<iterator>]
ostreambuf_iterator(charT)Param: (Character type.)\t\nDesc: Output stream buffer iterator (class template)\t\nProto: template <class charT, class traits=char_traits<charT> >\t\nclass ostreambuf_iterator;\t\n|[cpp98 cpp11]|[<iterator>]
out_of_range()Param: ()\t\nDesc: Out-of-range exception (class)\t\nProto: class out_of_range;\t\n|[cpp98 cpp11]|[<stdexcept>]
output_iterator_tag()Param: ()\t\nDesc: Output iterator category (class)\t\nProto: struct output_iterator_tag {};\t\n|[cpp98 cpp11]|[<iterator>]
overflow_error()Param: ()\t\nDesc: Overflow error exception (class)\t\nProto: class overflow_error;\t\n|[cpp98 cpp11]|[<stdexcept>]
pair(T1)Param: (Type of member first, aliased as first_type.)\t\nDesc: Pair of values (class template)\t\nProto: template <class T1, class T2> struct pair;\t\n|[cpp98 cpp11 ]|[<utility>]
partial_sort(first, last)Param: (Random-access iterators to the initial and final positions of the sequence to be partially sorted.)\t\nDesc: Partially sort elements in range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
partial_sort_copy(first, last)Param: (Input iterators to the initial and final positions of the sequence to copy from.)\t\nDesc: Copy and partially sort range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
partial_sum(first, last)Param: (Input iterators to the initial and final positions in a sequence.)\t\nDesc: Compute partial sums of range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<numeric>]
partition()Param:\t\Desc: Partially sort elements in range)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
partition_copy()Param:\t\Desc: Copy and partially sort range)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
perror( const char * str )Param: (C string containing a custom message to be printed before the error message itself.)\t\nDesc: Print error message (function)\t\nProto: void perror ( const char * str );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
plus(T)Param: (Type of the arguments and return type of the functional call.)\t\nDesc: Addition function object class (class template)\t\nProto: template <class T> struct plus;\t\n|[cpp98 cpp11]|[<functional>]
pointer_to_binary_function()Param: ()\t\nDesc: Generate binary function object class from pointer (class template)\t\nProto: template <class Arg1, class Arg2, class Result> class pointer_to_binary_function;\t\n|[cpp98 cpp11]|[<functional>]
pointer_to_unary_function()Param: ()\t\nDesc: Generate unary function object class from pointer (class template)\t\nProto: template <class Arg, class Result> class pointer_to_unary_function;\t\n|[cpp98 cpp11]|[<functional>]
polar(const T& rho, const T& theta = 0)Param: (Magnitude (modulus) of the complex number.)\t\nDesc: Complex from polar components (function template)\t\nProto: template<class T> complex<T> polar (const T& rho, const T& theta = 0);\t\n|[cpp98 cpp11]|[<complex>]
pop_heap(first, last)Param: (Random-access iterators to the initial and final positions of the heap to be shrank by one.)\t\nDesc: Pop element from heap range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
pow(double base, double exponent)Param: (Base value.)\t\nDesc: Raise to power (function)\t\nProto: double pow (double base, double exponent);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
prev_permutation(first, last)Param: (Bidirectional iterators to the initial and final positions of the sequence.)\t\nDesc: Transform range to previous permutation (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
PRId16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRId32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRId64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRId8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIdPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIi16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIi32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIi64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIi8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIiPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
printf(const char *format, ...):int #Sends formatted output to stdout
PRIo16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIo32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIo64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIo8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIoPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
priority_queue(T)Param: (Type of the elements.)\t\nDesc: Priority queue (class template)\t\nProto: template <class T, class Container = vector<T>, class Compare = less<typename Container::value_type> > class priority_queue;\t\n|[cpp98 cpp11 ]|[<queue>]
PRIu16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIu32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIu64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIu8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIuPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIx16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIX16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIX32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIx32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIX64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIx64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIx8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIX8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIxPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
PRIXPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
ptr_fun()Param: ()\t\nDesc: Convert function pointer to function object (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<functional>]
PTRDIFF_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
PTRDIFF_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
ptrdiff_t()Param: ()\t\nDesc: Result of pointer subtraction (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstddef> (stddef.h)]
push_heap(first, last)Param: (Random-access iterators to the initial and final positions of the new heap range, including the pushed element.)\t\nDesc: Push element into heap range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
putc(int char, FILE *stream):int #Writes an unsigned char specified by the argument char to the specified stream and advances the position indicator for the stream
putchar( int character )Param: (The int promotion of the character to be written.)\t\nDesc: Write character to stdout (function)\t\nProto: int putchar ( int character );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
puts(const char *str):int #Writes a string to stdout up to but not including the null character
putwchar(wchar_t wc)Param: (The wide character to be written.)\t\nDesc: Write wide character to stdout (function)\t\nProto: wint_t putwchar (wchar_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
qsort(void* base, size_t num, size_t size, int (*compar)(const void*,const void*))Param: (Pointer to the first object of the array to be sorted, converted to a )\t\nDesc: Sort elements of array (function)\t\nProto: void qsort (void* base, size_t num, size_t size, int (*compar)(const void*,const void*));\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
raise(int sig):int #Causes signal sig to be generated
rand(void)Param: ()\t\nDesc: Generate random number (function)\t\nProto: int rand (void);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
RAND_MAX()Param: ()\t\nDesc: Maximum value returned by rand (macro)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
random_access_iterator_tag()Param: ()\t\nDesc: Random-access iterator category (class)\t\nProto: struct random_access_iterator_tag {};\t\n|[cpp98 cpp11]|[<iterator>]
random_shuffle(RandomAccessIterator first, RandomAccessIterator last)Param: (Random-access iterators to the initial and final positions of the sequence to be shuffled.)\t\nDesc: Randomly rearrange elements in range (function template)\t\nProto: template <class RandomAccessIterator> void random_shuffle (RandomAccessIterator first, RandomAccessIterator last);\t\n|[cpp98 cpp11]|[<algorithm>]
range_error()Param: ()\t\nDesc: Range error exception (class)\t\nProto: class range_error;\t\n|[cpp98 cpp11]|[<stdexcept>]
raw_storage_iterator(OutputIterator)Param: (Underlying iterator type.)\t\nDesc: Raw storage iterator (class template)\t\nProto: template <class OutputIterator, class T>\t\nclass raw_storage_iterator;\t\n|[cpp98 cpp11]|[<memory>]
realloc(void* ptr, size_t size)Param: (Pointer to a memory block previously allocated with malloc, calloc or realloc.)\t\nDesc: Reallocate memory block (function)\t\nProto: void* realloc (void* ptr, size_t size);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
rel_ops(T)Param: (For operator!=, the type shall be EqualityComparable.)\t\nDesc: Relational Operators (namespace)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<utility>]
remainder(double numer, double denom)Param: (Value of the quotient numerator.)\t\nDesc: Compute remainder (IEC 60559) (function)\t\nProto: double remainder (double numer, double denom); float remainderf (float numer , float denom);\t\nProto: long double remainderl (long double numer, long double denom);\t\n|[c99 cpp11]|[<cmath> (math.h)]
remove( const char * filename )Param: (C string containing the name of the file to be deleted.)\t\nDesc: Remove file (function)\t\nProto: int remove ( const char * filename );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
remove_copy(InputIterator first, InputIterator last,  OutputIterator result, const T& val)Param: (Forward iterators to the initial and final positions in a sequence of elements supporting being compared to a value of type T.)\t\nDesc: Copy range removing value (function template)\t\nProto: template <class InputIterator, class OutputIterator, class T>\t\nOutputIterator remove_copy (InputIterator first, InputIterator last,  OutputIterator result, const T& val);\t\n|[cpp98 cpp11]|[<algorithm>]
remove_copy_if(InputIterator first, InputIterator last, OutputIterator result, UnaryPredicate pred)Param: (Forward iterators to the initial and final positions in a sequence.)\t\nDesc: Copy range removing values (function template)\t\nProto: template <class InputIterator, class OutputIterator, class UnaryPredicate>\t\nOutputIterator remove_copy_if (InputIterator first, InputIterator last, OutputIterator result, UnaryPredicate pred);\t\n|[cpp98 cpp11]|[<algorithm>]
remove_if(ForwardIterator first, ForwardIterator last,UnaryPredicate pred)Param: (Forward iterators to the initial and final positions in a sequence of move-assignable elements.)\t\nDesc: Remove elements from range (function template)\t\nProto: template <class ForwardIterator, class UnaryPredicate> ForwardIterator remove_if (ForwardIterator first, ForwardIterator last,UnaryPredicate pred);\t\n|[cpp98 cpp11]|[<algorithm>]
remquo(double numer, double denom, int* quot)Param: (Floating point value with the quotient numerator.)\t\nDesc: Compute remainder and quotient (function)\t\nProto: double remquo (double numer, double denom, int* quot); float remquof (float numer , float denom , int* quot);\t\nProto: long double remquol (long double numer, long double denom, int* quot);\t\n|[c99 cpp11]|[<cmath> (math.h)]
rename( const char * oldname, const char * newname )Param: (C string containing the name of an existing file to be renamed and/or moved.)\t\nDesc: Rename file (function)\t\nProto: int rename ( const char * oldname, const char * newname );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
replace(ForwardIterator first, ForwardIterator last, const T& old_value, const T& new_value)Param: (Forward iterators to the initial and final positions in a sequence of elements that support being compared and assigned a value of type T.)\t\nDesc: Replace value in range (function template)\t\nProto: template <class ForwardIterator, class T>\t\nvoid replace (ForwardIterator first, ForwardIterator last,  const T& old_value, const T& new_value);\t\n|[cpp98 cpp11]|[<algorithm>]
replace_copy(first, last)Param: (Input iterators to the initial and final positions in a sequence.)\t\nDesc: Copy range replacing value (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
replace_copy_if(first, last)Param: (Input iterators to the initial and final positions in a sequence.)\t\nDesc: Copy range replacing value (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
replace_if(ForwardIterator first, ForwardIterator last, UnaryPredicate pred, const T& new_value )Param: (Forward iterators to the initial and final positions in a sequence of elements that support being assigned a value of type T.)\t\nDesc: Replace values in range (function template)\t\nProto: template <class ForwardIterator, class UnaryPredicate, class T>\t\nvoid replace_if (ForwardIterator first, ForwardIterator last, UnaryPredicate pred, const T& new_value );\t\n|[cpp98 cpp11]|[<algorithm>]
resetiosflags(ios_base::fmtflags mask)Param: (Mask representing the flags to be reset.)\t\nDesc: Reset format flags (function)\t\nProto: /*unspecified*/ resetiosflags (ios_base::fmtflags mask);\t\n|[arm cpp98 cpp11]|[<iomanip>]
return(ret): #Returns some useful Data
return_temporary_buffer(T* p)Param: (Pointer to a block of temporary memory returned by a previous call to get_temporary_buffer.)\t\nDesc: Return block of temporary memory (function template)\t\nProto: template <class T> void return_temporary_buffer (T* p);\t\n|[cpp98 cpp11]|[<memory>]
reverse(first, last)Param: (Bidirectional iterators to the initial and final positions of the sequence to be reversed.)\t\nDesc: Reverse range (function template)\t\nProto: template <class BidirectionalIterator>\t\nvoid reverse (BidirectionalIterator first, BidirectionalIterator last);\t\n|[cpp98 cpp11]|[<algorithm>]
reverse_copy(first, last)Param: (Bidirectional iterators to the initial and final positions of the sequence to be copied.)\t\nDesc: Copy range reversed (function template)\t\nProto: template <class BidirectionalIterator, class OutputIterator>\t\nOutputIterator reverse_copy (BidirectionalIterator first,  BidirectionalIterator last, OutputIterator result);\t\n|[cpp98 cpp11]|[<algorithm>]
reverse_iterator(Iterator)Param: (A bidirectional iterator type.)\t\nDesc: Reverse iterator (class template)\t\nProto: template <class Iterator> class reverse_iterator;\t\n|[cpp98 cpp11 ]|[<iterator>]
rewind( FILE * stream )Param: (Pointer to a FILE object that identifies the stream.)\t\nDesc: Set position of stream to the beginning (function)\t\nProto: void rewind ( FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
right(ios_base& str)Param: (Stream object whose adjustfield format flag is affected.)\t\nDesc: Adjust output to the right (function)\t\nProto: ios_base& right (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
rotate(ForwardIterator first, ForwardIterator middle, ForwardIterator last)Param: (Forward iterators to the initial and final positions of the sequence to be rotated left.)\t\nDesc: Rotate left the elements in range (function template)\t\nProto: template <class ForwardIterator> void rotate (ForwardIterator first, ForwardIterator middle, ForwardIterator last);\t\n|[cpp98 cpp11]|[<algorithm>]
rotate_copy(ForwardIterator first, ForwardIterator middle,ForwardIterator last, OutputIterator result)Param: (Forward iterators to the initial and final positions of the range to be copy-rotated.)\t\nDesc: Copy range rotated left (function template)\t\nProto: template <class ForwardIterator, class OutputIterator>\t\nOutputIterator rotate_copy (ForwardIterator first, ForwardIterator middle,ForwardIterator last, OutputIterator result);\t\n|[cpp98 cpp11]|[<algorithm>]
runtime_error()Param: ()\t\nDesc: Runtime error exception (class)\t\nProto: class runtime_error;\t\n|[cpp98 cpp11]|[<stdexcept>]
scalbln(double x)Param: (significand.)\t\nDesc: Scale significand using floating-point base exponent (long) (function)\t\nProto: double scalbln (double x, long int n); float scalblnf (float x , long int n);\t\nProto: long double scalblnl (long double x, long int n);\t\n|[c99 cpp11]|[<cmath> (math.h)]
scalbn(double x)Param: (Value representing the significand.)\t\nDesc: Scale significand using floating-point base exponent (function)\t\nProto: double scalbn (double x, int n); float scalbnf (float x , int n);\t\nProto: long double scalbnl (long double x, int n);\t\n|[c99 cpp11]|[<cmath> (math.h)]
scanf(const char *format, ...):int #Read formatted input
SCHAR_MAX @@|[c99 cpp98 cpp11]|[<limits>]
SCHAR_MIN @@|[c99 cpp98 cpp11]|[<limits>]
scientific(ios_base& str)Param: (Stream object whose floatfield format flag is affected.)\t\nDesc: Use scientific floating-point notation (function)\t\nProto: ios_base& scientific (ios_base& str);\t\n|[arm cpp98 cpp11]|[<ios>]
SCNd16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNd32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNd64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNd8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNdPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNi16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNi32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNi64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNi8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNiPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNo16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNo32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNo64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNo8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNoPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNu16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNu32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNu64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNu8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNuPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNX16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNx16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNX32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNx32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNx64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNX64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNX8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNx8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxFAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxFAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxFAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxFAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXLEAST16 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxLEAST32 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxLEAST64 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXLEAST8 @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxMAX @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNXPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
SCNxPTR @@|[c99 cpp98 cpp11]|[<cinttypes>]
search_n(first, last)Param: (Forward iterators to the initial and final positions of the searched sequence.)\t\nDesc: Search range for elements (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
SEEK_CUR @@|[c99 cpp98 cpp11]|[<cstdio>]
SEEK_END @@|[c99 cpp98 cpp11]|[<cstdio>]
SEEK_SET @@|[c99 cpp98 cpp11]|[<cstdio>]
set_difference(first1, last1)Param: (Input iterators to the initial and final positions of the first sorted sequence.)\t\nDesc: Difference of two sorted ranges (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
set_intersection(first1, last1)Param: (Input iterators to the initial and final positions of the first sorted sequence.)\t\nDesc: Intersection of two sorted ranges (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
set_new_handler(new_handler new_p)Param: (Function that takes no arguments and returns no value ()\t\nDesc: Set new handler function (function)\t\nProto: new_handler set_new_handler (new_handler new_p) throw();\t\n|[cpp98 cpp11]|[<new>]
set_symmetric_difference(first1, last1)Param: (Input iterators to the initial and final positions of the first sorted sequence.)\t\nDesc: Symmetric difference of two sorted ranges (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
set_terminate(terminate_handler f)Param: (Function that takes no parameters and returns no value ()\t\nDesc: Set terminate handler function (function)\t\nProto: terminate_handler set_terminate (terminate_handler f) throw();\t\n|[cpp98 cpp11]|[<exception>]
set_unexpected(unexpected_handler f)Param: (Function that takes no parameters and returns no value ()\t\nDesc: Set unexpected handler function (function)\t\nProto: unexpected_handler set_unexpected (unexpected_handler f) throw();\t\n|[cpp98 cpp11]|[<exception>]
set_union(first1, last1)Param: (Input iterators to the initial and final positions of the first sorted sequence.)\t\nDesc: Union of two sorted ranges (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
setbase(int base)Param: (Numerical radix to be used:\t\n\t\nbase argument\t\n\t\nsame as inserting.)\t\nDesc: Set basefield flag (function)\t\nProto: /*unspecified*/ setbase (int base);\t\n|[arm cpp98 cpp11]|[<iomanip>]
setbuf( FILE * stream, char * buffer )Param: (Pointer to a FILE object that identifies an open stream.)\t\nDesc: Set stream buffer (function)\t\nProto: void setbuf ( FILE * stream, char * buffer );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
setfill(char_type c)Param: (The new fill character for the stream.)\t\nDesc: Set fill character (function)\t\nProto: /*unspecified*/ setfill (char_type c);\t\n|[arm cpp98 cpp11]|[<iomanip>]
setjmp(jmp_buf env)Param: (Object of type jmp_buf where the environment information is stored.)\t\nDesc: Save calling environment for long jump (macro)\t\nProto: int setjmp (jmp_buf env);\t\n|[c90 c99 arm cpp98 cpp11]|[<csetjmp> (setjmp.h)]
setlocale(int category, const char* locale)Param: (Portion of the locale affected.)\t\nDesc: Set or retrieve locale (function)\t\nProto: char* setlocale (int category, const char* locale);\t\n|[c90 c99 arm cpp98 cpp11]|[<clocale> (locale.h)]
setprecision(int n)Param: (New value for the decimal precision.)\t\nDesc: Set decimal precision (function)\t\nProto: /*unspecified*/ setprecision (int n);\t\n|[arm cpp98 cpp11]|[<iomanip>]
setvbuf( FILE * stream, char * buffer, int mode, size_t size )Param: (Pointer to a FILE object that identifies an open stream.)\t\nDesc: Change stream buffering (function)\t\nProto: int setvbuf ( FILE * stream, char * buffer, int mode, size_t size );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
setw(int n)Param: (Number of characters to be used as field width.)\t\nDesc: Set field width (function)\t\nProto: /*undefined*/ setw (int n);\t\n|[arm cpp98 cpp11]|[<iomanip>]
SHRT_MAX @@|[c99 cpp98 cpp11]|[<limits>]
SHRT_MIN @@|[c99 cpp98 cpp11]|[<limits>]
SIG_ATOMIC_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
SIG_ATOMIC_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
SIG_DFL @@|[c99 cpp98 cpp11]|[<csignal>]
SIG_ERR @@|[c99 cpp98 cpp11]|[<csignal>]
SIG_IGN @@|[c99 cpp98 cpp11]|[<csignal>]
SIGABRT @@|[c99 cpp98 cpp11]|[<csignal>]
SIGFPE @@|[c99 cpp98 cpp11]|[<csignal>]
SIGILL @@|[c99 cpp98 cpp11]|[<csignal>]
SIGINT @@|[c99 cpp98 cpp11]|[<csignal>]
signal( void * ptr, size_t size, size_t count, FILE * stream )Param: (The signal value to which a handling function is set.)\t\nDesc: Set function to handle signal (function)\t\nProto: void (*signal(int sig, void (*func)(int)))(int);\t\n|[c90 c99 arm cpp98 cpp11]|[<csignal> (signal.h)]
signbit(x)Param: (A floating-point value.)\t\nDesc: Sign bit (macro/function)\t\nProto: signbit(x)\t\n|[c99 cpp11]|[<cmath> (math.h)]
SIGSEGV @@|[c99 cpp98 cpp11]|[<csignal>]
SIGTERM @@|[c99 cpp98 cpp11]|[<csignal>]
sin(double x):double #Returns the sine of a radian angle x
sinh(double x):double #Returns the hyperbolic sine of x
SIZE_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
size_t @@|[c99 cpp98 cpp11]|[<cstdio>]
size_t()Param: ()\t\nDesc: Unsigned integral type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstddef> (stddef.h)]
sizeof(type)Desc:Returns size in bytes of the object representation of type. [c89 c99 c11]
snprintf( char * s, size_t n, const char * format, ... )Param: (Pointer to a buffer where the resulting C-string is stored.)\t\nDesc: Write formatted output to sized buffer (function)\t\nProto: int snprintf ( char * s, size_t n, const char * format, ... );\t\n|[c99 cpp11]|[<cstdio> (stdio.h)]
sort_heap(first, last)Param: (Random-access iterators to the initial and final positions of the heap range to be sorted.)\t\nDesc: Sort elements of heap (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
sprintf( char * str, const char * format, ... )Param: (Pointer to a buffer where the resulting C-string is stored.)\t\nDesc: Write formatted data to string (function)\t\nProto: int sprintf ( char * str, const char * format, ... );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
sqrt(double x)Param: (Value whose square root is computed.)\t\nDesc: Compute square root (function)\t\nProto: double sqrt (double x);\t\n|[c90 c99 arm cpp98 cpp11]|[<cmath> (math.h)]
srand(unsigned int seed)Param: (An integer value to be used as seed by the pseudo-random number generator algorithm.)\t\nDesc: Initialize random number generator (function)\t\nProto: void srand (unsigned int seed);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
sscanf( const char * s, const char * format, ...)Param: (C string that the function processes as its source to retrieve the data.)\t\nDesc: Read formatted data from string (function)\t\nProto: int sscanf ( const char * s, const char * format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
stable_partition(first, last)Param: (Bidirectional iterators to the initial and final positions of the sequence to partition.)\t\nDesc: Partition range in two - stable ordering (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
stable_sort(first, last)Param: (Random-access iterators to the initial and final positions of the sequence to be sorted.)\t\nDesc: Sort elements preserving order of equivalents (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
stack(T)Param: (Type of the elements.)\t\nDesc: LIFO stack (class template)\t\nProto: template <class T, class Container = deque<T> > class stack;\t\n|[cpp98 cpp11 ]|[<stack>]
stderr @@|[c99 cpp98 cpp11]|[<cstdio>]
stderr()Param: ()\t\nDesc: no-Description (other)\t\nProto: FILE * stderr;\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
stdin @@|[c99 cpp98 cpp11]|[<cstdio>]
stdin()Param: ()\t\nDesc: no-Description (other)\t\nProto: FILE * stdin;\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
stdout @@|[c99 cpp98 cpp11]|[<cstdio>]
stdout()Param: ()\t\nDesc: no-Description (other)\t\nProto: FILE * stdout;\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
strcat( char * destination, const char * source )Param: (Pointer to the destination array, which should contain a C string, and be large enough to contain the concatenated resulting string.)\t\nDesc: Concatenate strings (function)\t\nProto: char * strcat ( char * destination, const char * source );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strchr( const char * str, int character )Param: (C string.)\t\nDesc: Locate first occurrence of character in string (function)\t\nProto: const char * strchr ( const char * str, int character );\t\nProto: char * strchr ( char * str, int character );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strcmp( const char * str1, const char * str2 )Param: (C string to be compared.)\t\nDesc: Compare two strings (function)\t\nProto: int strcmp ( const char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strcoll( const char * str1, const char * str2 )Param: (C string to be compared.)\t\nDesc: Compare two strings using locale (function)\t\nProto: int strcoll ( const char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strcpy( char * destination, const char * source )Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy string (function)\t\nProto: char * strcpy ( char * destination, const char * source );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strcspn( const char * str1, const char * str2 )Param: (C string to be scanned.)\t\nDesc: Get span until character in string (function)\t\nProto: size_t strcspn ( const char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
streamoff()Param: ()\t\nDesc: Stream offset type (type)\t\nProto: no-proto\t\n|[arm cpp98 cpp11]|[<ios>]
streampos()Param: ()\t\nDesc: Stream position type (type)\t\nProto: typedef fpos<mbstate_t> streampos;\t\n|[arm cpp98 cpp11]|[<ios>]
streamsize()Param: ()\t\nDesc: Stream size type (type)\t\nProto: no-proto\t\n|[arm cpp98 cpp11]|[<ios>]
strerror( int errnum )Param: (Error number.)\t\nDesc: Get pointer to error message string (function)\t\nProto: char * strerror ( int errnum );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strftime(char* ptr, size_t maxsize, const char* format,const struct tm* timeptr )Param: (Pointer to the destination array where the resulting C string is copied.)\t\nDesc: Format time as string (function)\t\nProto: size_t strftime (char* ptr, size_t maxsize, const char* format,const struct tm* timeptr );\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
strlen( const char * str )Param: (C string.)\t\nDesc: Get string length (function)\t\nProto: size_t strlen ( const char * str );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strncat( char * destination, const char * source, size_t num )Param: (Pointer to the destination array, which should contain a C string, and be large enough to contain the concatenated resulting string, including the additional null-character.)\t\nDesc: Append characters from string (function)\t\nProto: char * strncat ( char * destination, const char * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strncmp( const char * str1, const char * str2, size_t num )Param: (C string to be compared.)\t\nDesc: Compare characters of two strings (function)\t\nProto: int strncmp ( const char * str1, const char * str2, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strncpy( char * destination, const char * source, size_t num )Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy characters from string (function)\t\nProto: char * strncpy ( char * destination, const char * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strpbrk( const char * str1, const char * str2 )Param: (C string to be scanned.)\t\nDesc: Locate characters in string (function)\t\nProto: const char * strpbrk ( const char * str1, const char * str2 );\t\nProto: char * strpbrk ( char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strrchr( const char * str, int character )Param: (C string.)\t\nDesc: Locate last occurrence of character in string (function)\t\nProto: const char * strrchr ( const char * str, int character );\t\nProto: char * strrchr ( char * str, int character );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strspn( const char * str1, const char * str2 )Param: (C string to be scanned.)\t\nDesc: Get span of character set in string (function)\t\nProto: size_t strspn ( const char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strstr( const char * str1, const char * str2 )Param: (C string to be scanned.)\t\nDesc: Locate substring (function)\t\nProto: const char * strstr ( const char * str1, const char * str2 );\t\nProto: char * strstr ( char * str1, const char * str2 );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strtod(const char* str, char** endptr)Param: (C-string beginning with the representation of a floating-point number.)\t\nDesc: Convert string to double (function)\t\nProto: double strtod (const char* str, char** endptr);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
strtof(const char* str, char** endptr)Param: (C-string beginning with the representation of a floating-point number.)\t\nDesc: Convert string to float (function)\t\nProto: float strtof (const char* str, char** endptr);\t\n|[c99 cpp11]|[<cstdlib> (stdlib.h)]
strtok( char * str, const char * delimiters )Param: (C string to truncate.)\t\nDesc: Split string into tokens (function)\t\nProto: char * strtok ( char * str, const char * delimiters );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
strtol(const char* str, char** endptr, int base)Param: (C-string beginning with the representation of an integral number.)\t\nDesc: Convert string to long integer (function)\t\nProto: long int strtol (const char* str, char** endptr, int base);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
strtold(const char* str, char** endptr)Param: (C string beginning with the representation of a floating-point number.)\t\nDesc: Convert string to long double (function)\t\nProto: long double strtold (const char* str, char** endptr);\t\n|[c99 cpp11]|[<cstdlib> (stdlib.h)]
strtoll(const char* str, char** endptr, int base)Param: (C-string beginning with the representation of an integral number.)\t\nDesc: Convert string to long long integer (function)\t\nProto: long long int strtoll (const char* str, char** endptr, int base);\t\n|[c99 cpp11]|[<cstdlib> (stdlib.h)]
strtoul(const char* str, char** endptr, int base)Param: (C-string containing the representation of an integral number.)\t\nDesc: Convert string to unsigned long integer (function)\t\nProto: unsigned long int strtoul (const char* str, char** endptr, int base);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
strtoull(const char* str, char** endptr, int base)Param: (C-string beginning with the representation of an integral number.)\t\nDesc: Convert string to unsigned long long integer (function)\t\nProto: unsigned long long int strtoull (const char* str, char** endptr, int base);\t\n|[c99 cpp11]|[<cstdlib> (stdlib.h)]
struct lconv()Param: ()\t\nDesc: Formatting info for numeric values (type)\t\nProto: struct lconv;\t\n|[c90 c99 arm cpp98 cpp11]|[<clocale> (locale.h)]
struct tm()Param: ()\t\nDesc: Time structure (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
strxfrm( char * destination, const char * source, size_t num )Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Transform string using locale (function)\t\nProto: size_t strxfrm ( char * destination, const char * source, size_t num );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstring> (string.h)]
swap_ranges(ForwardIterator1 first1, ForwardIterator1 last1,ForwardIterator2 first2)Param: (Forward iterators to the initial and final positions in one of the sequences to be swapped.)\t\nDesc: Exchange values of two ranges (function template)\t\nProto: template <class ForwardIterator1, class ForwardIterator2>\t\nForwardIterator2 swap_ranges (ForwardIterator1 first1, ForwardIterator1 last1,ForwardIterator2 first2);\t\n|[cpp98 cpp11]|[<algorithm>]
swprintf(wchar_t* ws, size_t len, const wchar_t* format, ...)Param: (Pointer to a buffer where the resulting C wide string is stored.)\t\nDesc: Write formatted data to wide string (function)\t\nProto: int swprintf (wchar_t* ws, size_t len, const wchar_t* format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
swscanf(const wchar_t* ws, const wchar_t* format, ...)Param: (C wide string that the function processes as its source to retrieve the data.)\t\nDesc: Read formatted data from string (function)\t\nProto: int swscanf (const wchar_t* ws, const wchar_t* format, ...);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
system(const char* command)Param: (C-string containing the system command to be executed.)\t\nDesc: Execute system command (function)\t\nProto: int system (const char* command);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
tan(double x):double #Returns the tangent of a radian angle x
tanh(double x):double #Returns the hyperbolic tangent of x
terminate_handler( void * ptr, size_t size, size_t count, FILE * stream )Param: ()\t\nDesc: Type of terminate handler function (type)\t\nProto: typedef void (*terminate_handler)();\t\n|[cpp98 cpp11]|[<exception>]
tgamma(double x)Param: (Parameter for the gamma function.)\t\nDesc: Compute gamma function (function)\t\nProto: double tgamma (double x); float tgammaf ( float x);\t\nProto: long double tgammal (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
time(time_t *timer):time_t #Calculates the current calender time and encodes it into time_t format
time_base()Param: ()\t\nDesc: Base class for time_get (class)\t\nProto: class time_base;\t\n|[cpp98 cpp11]|[<locale>]
time_get(charT)Param: (Character type: the type of the characters in the sequence to interpret.)\t\nDesc: Facet to parse dates and times (class template)\t\nProto: template <class charT, class InputIterator = istreambuf_iterator<charT> >\t\nclass time_get;\t\n|[cpp98 cpp11 ]|[<locale>]
time_get_byname()Param: ()\t\nDesc: Facet to parse dates and times (class template)\t\nProto: template <class charT, class InputIterator = istreambuf_iterator<charT> > class time_get_byname;\t\n|[cpp98 cpp11]|[<locale>]
time_put(charT)Param: (Character type: the type of the characters in the sequence to write.)\t\nDesc: Facet to format dates and times (class template)\t\nProto: template <class charT, class OutputIterator = ostreambuf_iterator<charT> >\t\nclass time_put;\t\n|[cpp98 cpp11 ]|[<locale>]
time_put_byname()Param: ()\t\nDesc: Facet to format dates and times (class template)\t\nProto: template <class charT, class OutputIterator = ostreambuf_iterator<charT> > class time_put_byname;\t\n|[cpp98 cpp11]|[<locale>]
time_t()Param: ()\t\nDesc: Time type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<ctime> (time.h)]
TMP_MAX()Param: ()\t\nDesc: Number of temporary files (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
tmpfile( void )Param: ()\t\nDesc: Open a temporary file (function)\t\nProto: FILE * tmpfile ( void );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
tmpnam( char * str )Param: (Pointer to an array of characters where the proposed temporary name will be stored as a C string.)\t\nDesc: Generate temporary filename (function)\t\nProto: char * tmpnam ( char * str );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
tolower( int c )Param: (Character to be converted, casted to an int, or EOF.)\t\nDesc: Convert uppercase letter to lowercase (function)\t\nProto: int tolower ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
toupper( int c )Param: (Character to be converted, casted to an int, or EOF.)\t\nDesc: Convert lowercase letter to uppercase (function)\t\nProto: int toupper ( int c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cctype> (ctype.h)]
towctrans(wint_t c, wctrans_t desc)Param: (Wide character to be transformed, casted to a wint_t value, or WEOF.)\t\nDesc: Convert using transformation (function)\t\nProto: wint_t towctrans(wint_t c, wctrans_t desc);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
towlower( void * ptr, size_t size, size_t count, FILE * stream )Param: (Wide character to be converted, casted to a wint_t value, or WEOF.)\t\nDesc: Convert uppercase wide character to lowercase (function)\t\nProto: wint_t towlower ( wint_t c );\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
towupper(wint_t c)Param: (Wide character to be converted, casted to a wint_t value, or WEOF.)\t\nDesc: Convert lowercase wide character to uppercase (function)\t\nProto: wint_t towupper (wint_t c);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
transform(first1, last1)Param: (Input iterators to the initial and final positions of the first sequence.)\t\nDesc: Transform range (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
true @@|[c99 cpp98 cpp11]|[<cstdbool>]
trunc(double x)Param: (Value to truncate.)\t\nDesc: Truncate value (function)\t\nProto: double trunc (double x); float truncf ( float x);\t\nProto: long double truncl (long double x);\t\n|[c99 cpp11]|[<cmath> (math.h)]
type_info()Param: ()\t\nDesc: Type information type (class)\t\nProto: class type_info;\t\n|[cpp98 cpp11 ]|[<typeinfo>]
UCHAR_MAX @@|[c99 cpp98 cpp11]|[<limits>]
UINT16_C @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT16_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint16_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT32_C @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT32_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint32_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT64_C @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT64_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint64_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT8_C @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT8_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint8_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_FAST16_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint_fast16_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_FAST32_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint_fast32_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_FAST64_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint_fast64_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_FAST8_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint_fast8_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_LEAST16_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint_least16_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_LEAST32_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint_least32_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_LEAST64_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint_least64_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_LEAST8_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uint_least8_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINT_MAX @@|[c99 cpp98 cpp11]|[<limits>]
UINTMAX_C @@|[c99 cpp98 cpp11]|[<cstdint>]
UINTMAX_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uintmax_t @@|[c99 cpp98 cpp11]|[<cstdint>]
UINTPTR_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
uintptr_t @@|[c99 cpp98 cpp11]|[<cstdint>]
ULLONG_MAX @@|[c99 cpp98 cpp11]|[<limits>]
ULONG_MAX @@|[c99 cpp98 cpp11]|[<limits>]
unary_negate(Predicate)Param: (A unary function object class, with member argument_type defined.)\t\nDesc: Negate unary function object class (class template)\t\nProto: template <class Predicate> class unary_negate;\t\n|[cpp98 cpp11]|[<functional>]
uncaught_exception( void * ptr, size_t size, size_t count, FILE * stream )Param: ()\t\nDesc: Return exception status (function)\t\nProto: bool uncaught_exception() throw();\t\n|[cpp98 cpp11]|[<exception>]
underflow_error()Param: ()\t\nDesc: Underflow error exception (class)\t\nProto: class underflow_error;\t\n|[cpp98 cpp11]|[<stdexcept>]
unexpected_handler( void * ptr, size_t size, size_t count, FILE * stream )Param: ()\t\nDesc: Type of unexpected handler function (type)\t\nProto: typedef void (*unexpected_handler)();\t\n|[cpp98 cpp11]|[<exception>]
ungetc( int character, FILE * stream )Param: (The int promotion of the character to be put back.)\t\nDesc: Unget character from stream (function)\t\nProto: int ungetc ( int character, FILE * stream );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
ungetwc(wint_t wc, FILE* stream)Param: (The wint_t promotion of the wide character to be put back.)\t\nDesc: Unget wide character from stream (function)\t\nProto: wint_t ungetwc (wint_t wc, FILE* stream);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
uninitialized_copy( InputIterator first, InputIterator last, ForwardIterator result )Param: (Input iterators to the initial and final positions in a sequence to be copied.)\t\nDesc: Copy block of memory (function template)\t\nProto: template <class InputIterator, class ForwardIterator>\t\nForwardIterator uninitialized_copy ( InputIterator first, InputIterator last,  ForwardIterator result );\t\n|[cpp98 cpp11]|[<memory>]
uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x)Param: (Forward iterators to the initial and final positions in an uninitialized sequence.)\t\nDesc: Fill block of memory (function template)\t\nProto: template <class ForwardIterator, class T>\t\nvoid uninitialized_fill (ForwardIterator first, ForwardIterator last, const T& x);\t\n|[cpp98 cpp11]|[<memory>]
uninitialized_fill_n(ForwardIterator first, Size n, const T& x)Param: (Forward iterator to the initial position in an uninitialized sequence of at least n elements.)\t\nDesc: Fill block of memory (function template)\t\nProto: template <class ForwardIterator, class Size, class T> void uninitialized_fill_n (ForwardIterator first, Size n, const T& x);\t\n|[cpp98 cpp11]|[<memory>]
unique_copy(first, last)Param: (Forward iterators to the initial and final positions in a sequence.)\t\nDesc: Copy range removing duplicates (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
upper_bound(first, last)Param: (Forward iterators to the initial and final positions of a sorted (or properly partitioned) sequence.)\t\nDesc: Return iterator to upper bound (function template)\t\nProto: long-proto\t\n|[cpp98 cpp11]|[<algorithm>]
use_facet(const locale& loc)Param: (locale object.)\t\nDesc: Access facet of locale (function template)\t\nProto: template <class Facet> const Facet& use_facet (const locale& loc);\t\n|[cpp98 cpp11]|[<locale>]
USHRT_MAX @@|[c99 cpp98 cpp11]|[<limits>]
va_arg(va_list ap, type)Param: (Object of type va_list carrying information about the current retrieval state of a variable argument list.)\t\nDesc: Retrieve next argument (macro)\t\nProto: type va_arg (va_list ap, type)\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdarg> (stdarg.h)]
va_copy(va_list dest, va_list src)Param: (Uninitialized object of type va_list.)\t\nDesc: Copy variable argument list (macro)\t\nProto: void va_copy (va_list dest, va_list src);\t\n|[c99 cpp11]|[<cstdarg> (stdarg.h)]
va_end(va_list ap)Param: (va_list object previously initialized by va_start or va_copy.)\t\nDesc: End using variable argument list (macro)\t\nProto: void va_end (va_list ap);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdarg> (stdarg.h)]
va_list()Param: ()\t\nDesc: Type to hold information about variable arguments (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdarg> (stdarg.h)]
va_start(va_list ap, paramN)Param: (Uninitialized object of type va_list.)\t\nDesc: Initialize a variable argument list (macro)\t\nProto: void va_start (va_list ap, paramN);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdarg> (stdarg.h)]
valarray(T)Param: (Type of the elements contained in the valarray.)\t\nDesc: Valarray class (class template)\t\nProto: template <class T> class valarray;\t\n|[cpp98 cpp11 ]|[<valarray>]
vector(T)Param: (Type of the elements.)\t\nDesc: Vector (class template)\t\nProto: template < class T, class Alloc = allocator<T> > class vector;\t\n|[cpp98 cpp11 ]|[<vector>]
vfprintf( FILE * stream, const char * format, va_list arg )Param: (Pointer to a FILE object that identifies an output stream.)\t\nDesc: Write formatted data from variable argument list to stream (function)\t\nProto: int vfprintf ( FILE * stream, const char * format, va_list arg );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
vfscanf( FILE * stream, const char * format, va_list arg )Param: (Pointer to a FILE object that identifies an input stream.)\t\nDesc: Read formatted data from stream into variable argument list (function)\t\nProto: int vfscanf ( FILE * stream, const char * format, va_list arg );\t\n|[c99 cpp11]|[<cstdio> (stdio.h)]
vfwprintf(FILE* stream, const wchar_t* format, va_list arg)Param: (Pointer to a FILE object that identifies an output stream.)\t\nDesc: Write formatted data from variable argument list to stream (function)\t\nProto: int vfwprintf (FILE* stream, const wchar_t* format, va_list arg);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
vfwscanf(FILE* stream, const wchar_t* format, va_list arg)Param: (Pointer to a FILE object that identifies an input stream.)\t\nDesc: Read formatted data from stream into variable argument list (function)\t\nProto: int vfwscanf (FILE* stream, const wchar_t* format, va_list arg);\t\n|[c99 cpp11]|[<cwchar> (wchar.h)]
vprintf( const char * format, va_list arg )Param: (C string that contains a format string that follows the same specifications as format in printf (see printf for details).)\t\nDesc: Print formatted data from variable argument list to stdout (function)\t\nProto: int vprintf ( const char * format, va_list arg );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
vscanf( const char * format, va_list arg )Param: (C string that contains a format string that follows the same specifications as format in scanf (see scanf for details).)\t\nDesc: Read formatted data into variable argument list (function)\t\nProto: int vscanf ( const char * format, va_list arg );\t\n|[c99 cpp11]|[<cstdio> (stdio.h)]
vsnprintf(char * s, size_t n, const char * format, va_list arg )Param: (Pointer to a buffer where the resulting C-string is stored.)\t\nDesc: Write formatted data from variable argument list to sized buffer (function)\t\nProto: int vsnprintf (char * s, size_t n, const char * format, va_list arg );\t\n|[c99 cpp11]|[<cstdio> (stdio.h)]
vsprintf(char * s, const char * format, va_list arg )Param: (Pointer to a buffer where the resulting C-string is stored.)\t\nDesc: Write formatted data from variable argument list to string (function)\t\nProto: int vsprintf (char * s, const char * format, va_list arg );\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdio> (stdio.h)]
vsscanf( const char * s, const char * format, va_list arg )Param: (C string that the function processes as its source to retrieve the data.)\t\nDesc: Read formatted data from string into variable argument list (function)\t\nProto: int vsscanf ( const char * s, const char * format, va_list arg );\t\n|[c99 cpp11]|[<cstdio> (stdio.h)]
vswprintf(wchar_t * ws, size_t len, const wchar_t * format, va_list arg )Param: (Pointer to a buffer where the resulting C wide string is stored.)\t\nDesc: Write formatted data from variable argument list to sized buffer (function)\t\nProto: int vswprintf (wchar_t * ws, size_t len, const wchar_t * format, va_list arg );\t\n|[c99 cpp11]|[<cwchar> (wchar.h)]
vswscanf(const wchar_t* ws, const wchar_t* format, va_list arg)Param: (C wide string that the function processes as its source to retrieve the data.)\t\nDesc: Read formatted data from wide string into variable argument list (function)\t\nProto: int vswscanf (const wchar_t* ws, const wchar_t* format, va_list arg);\t\n|[c99 cpp11]|[<cwchar> (wchar.h)]
vwprintf(const wchar_t* format, va_list arg)Param: (C wide string that contains a format string that follows the same specifications as format in printf (see printf for details).)\t\nDesc: Print formatted data from variable argument list to stdout (function)\t\nProto: int vwprintf (const wchar_t* format, va_list arg);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
vwscanf( const wchar_t * format, va_list arg )Param: (C wide string that contains a format string that follows the same specifications as format in scanf (see scanf for details).)\t\nDesc: Read formatted data into variable argument list (function)\t\nProto: int vwscanf ( const wchar_t * format, va_list arg );\t\n|[c99 cpp11]|[<cwchar> (wchar.h)]
wcerr()Param: ()\t\nDesc: Standard output stream for errors (wide-oriented) (object)\t\nProto: extern basic_ostream<wchar_t> wcerr;\t\n|[cpp98 cpp11]|[<iostream>]
WCHAR_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
WCHAR_MAX()Param: ()\t\nDesc: Maximum value of wchar_t (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
WCHAR_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
WCHAR_MIN()Param: ()\t\nDesc: Minimum value of wchar_t (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wchar_t @@|[c99 cpp98 cpp11]|[<cwchar>]
wchar_t()Param: ()\t\nDesc: Wide character (type)\t\nProto: no-proto\t\n|[c99]|[<cwchar> (wchar.h)]
wcin()Param: ()\t\nDesc: Standard input stream (wide) (object)\t\nProto: extern basic_istream<wchar_t> wcin;\t\n|[cpp98 cpp11]|[<iostream>]
wclog()Param: ()\t\nDesc: Standard output stream for logging (wide) (object)\t\nProto: extern basic_ostream<wchar_t> wclog;\t\n|[cpp98 cpp11]|[<iostream>]
wcout()Param: ()\t\nDesc: Standard output stream (wide) (object)\t\nProto: extern basic_ostream<wchar_t> wcout;\t\n|[cpp98 cpp11]|[<iostream>]
wcrtomb(char* pmb, wchar_t wc, mbstate_t* ps)Param: (Pointer to an array large enough to hold a multibyte sequence.)\t\nDesc: Convert wide character to multibyte sequence (function)\t\nProto: size_t wcrtomb (char* pmb, wchar_t wc, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcscat(wchar_t* destination, const wchar_t* source)Param: (Pointer to the destination array, which should contain a C wide string, and be large enough to contain the concatenated resulting string.)\t\nDesc: Concatenate wide strings (function)\t\nProto: wchar_t* wcscat (wchar_t* destination, const wchar_t* source);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcschr(const wchar_t* ws, wchar_t wc)Param: (C wide string.)\t\nDesc: Locate first occurrence of character in wide string (function)\t\nProto: const wchar_t* wcschr (const wchar_t* ws, wchar_t wc);\t\nProto: wchar_t* wcschr (wchar_t* ws, wchar_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcscmp(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be compared.)\t\nDesc: Compare two strings (function)\t\nProto: int wcscmp (const wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcscoll(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be compared.)\t\nDesc: Compare two wide strings using locale (function)\t\nProto: int wcscoll (const wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcscpy(wchar_t* destination, const wchar_t* source)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy wide string (function)\t\nProto: wchar_t* wcscpy (wchar_t* destination, const wchar_t* source);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcscspn(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be scanned.)\t\nDesc: Get span until character in wide string (function)\t\nProto: size_t wcscspn (const wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcsftime(wchar_t* ptr, size_t maxsize, const wchar_t* format,const struct tm* timeptr)Param: (Pointer to the destination array where the resulting C wide string is copied.)\t\nDesc: Format time as wide string (function)\t\nProto: size_t wcsftime (wchar_t* ptr, size_t maxsize, const wchar_t* format,const struct tm* timeptr);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcslen(const wchar_t* wcs)Param: (C wide string.)\t\nDesc: Get wide string length (function)\t\nProto: size_t wcslen (const wchar_t* wcs);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcsncat(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array, which should contain a C wide string, and be large enough to contain the concatenated resulting string, including the additional null wide character.)\t\nDesc: Append characters from wide string (function)\t\nProto: wchar_t* wcsncat (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcsncmp(const wchar_t* wcs1, const wchar_t* wcs2, size_t num)Param: (C wide string to be compared.)\t\nDesc: Compare characters of two wide strings (function)\t\nProto: int wcsncmp (const wchar_t* wcs1, const wchar_t* wcs2, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcsncpy(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy characters from wide string (function)\t\nProto: wchar_t* wcsncpy (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcspbrk(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be scanned.)\t\nDesc: Locate characters in wide string (function)\t\nProto: const wchar_t* wcspbrk (const wchar_t* wcs1, const wchar_t* wcs2);\t\nProto: wchar_t* wcspbrk (wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcsrchr(const wchar_t* ws, wchar_t wc)Param: (C wide string.)\t\nDesc: Locate last occurrence of character in wide string (function)\t\nProto: const wchar_t* wcsrchr (const wchar_t* ws, wchar_t wc);\t\nProto: wchar_t* wcsrchr (wchar_t* ws, wchar_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcsrtombs(char* dest, const wchar_t** src, size_t max, mbstate_t* ps)Param: (Pointer to an array of char elements long enough to store a C string of max bytes.)\t\nDesc: Convert wide-character string to multibyte string (function)\t\nProto: size_t wcsrtombs (char* dest, const wchar_t** src, size_t max, mbstate_t* ps);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcsspn(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be scanned.)\t\nDesc: Get span of character set in wide string (function)\t\nProto: size_t wcsspn (const wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcsstr(const wchar_t* wcs1, const wchar_t* wcs2)Param: (C wide string to be scanned.)\t\nDesc: Locate substring of wide string (function)\t\nProto: const wchar_t* wcsstr (const wchar_t* wcs1, const wchar_t* wcs2);\t\nProto: wchar_t* wcsstr (wchar_t* wcs1, const wchar_t* wcs2);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcstod(const wchar_t* str, wchar_t** endptr)Param: (C wide string beginning with the representation of a floating-point number.)\t\nDesc: Convert wide string to double (function)\t\nProto: double wcstod (const wchar_t* str, wchar_t** endptr);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcstof(const wchar_t* str, wchar_t** endptr)Param: (C wide string beginning with the representation of a floating-point number.)\t\nDesc: Convert wide string to float (function)\t\nProto: float wcstof (const wchar_t* str, wchar_t** endptr);\t\n|[c99 cpp11]|[<cwchar> (wchar.h)]
wcstok(wchar_t* wcs, const wchar_t* delimiters)Param: (C wide string to truncate.)\t\nDesc: Split wide string into tokens (function)\t\nProto: wchar_t* wcstok (wchar_t* wcs, const wchar_t* delimiters);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcstol(const wchar_t* str, wchar_t** endptr, int base)Param: (C wide string beginning with the representation of an integral number.)\t\nDesc: Convert wide string to long integer (function)\t\nProto: long int wcstol (const wchar_t* str, wchar_t** endptr, int base);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcstold(const wchar_t* str, wchar_t** endptr)Param: (C wide string beginning with the representation of a floating-point number.)\t\nDesc: Convert wide string to long double (function)\t\nProto: long double wcstold (const wchar_t* str, wchar_t** endptr);\t\n|[c99 cpp11]|[<cwchar> (wchar.h)]
wcstoll(const wchar_t* str, wchar_t** endptr, int base)Param: (C wide string beginning with the representation of an integral number.)\t\nDesc: Convert wide string to long long integer (function)\t\nProto: long long int strtoll (const wchar_t* str, wchar_t** endptr, int base);\t\n|[c99 cpp11]|[<cwchar> (wchar.h)]
wcstombs(char* dest, const wchar_t* src, size_t max)Param: (Pointer to an array of char elements long enough to contain the resulting sequence (at most, max bytes).)\t\nDesc: Convert wide-character string to multibyte string (function)\t\nProto: size_t wcstombs (char* dest, const wchar_t* src, size_t max);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
wcstoul(const wchar_t* str, wchar_t** endptr, int base)Param: (C wide string containing the representation of an integral number.)\t\nDesc: Convert wide string to unsigned long integer (function)\t\nProto: unsigned long int wcstoul (const wchar_t* str, wchar_t** endptr, int base);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wcstoull(const wchar_t* str, wchar_t** endptr, int base)Param: (C wide string beginning with the representation of an integral number.)\t\nDesc: Convert wide string to unsigned long long integer (function)\t\nProto: unsigned long long int wcstoull (const wchar_t* str, wchar_t** endptr, int base);\t\n|[c99 cpp11]|[<cwchar> (wchar.h)]
wcsxfrm(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Transform wide string using locale (function)\t\nProto: size_t wcsxfrm (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wctob(wint_t wc)Param: (The wint_t promotion of a wide character.)\t\nDesc: Convert wide character to single byte (function)\t\nProto: int wctob (wint_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wctomb(char* pmb, wchar_t wc)Param: ()\t\nDesc: Convert wide character to multibyte sequence (function)\t\nProto: int wctomb (char* pmb, wchar_t wc);\t\n|[c90 c99 arm cpp98 cpp11]|[<cstdlib> (stdlib.h)]
wctrans_t @@|[c99 cpp98 cpp11]|[<cwchar>]
wctrans_t()Param: ()\t\nDesc: Wide character transformation (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
wctype_t @@|[c99 cpp98 cpp11]|[<cwchar>]
wctype_t()Param: ()\t\nDesc: Wide character type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cwctype> (wctype.h)]
WEOF()Param: ()\t\nDesc: Wide end-of-file (constant)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wfilebuf()Param: ()\t\nDesc: File stream buffer (wide) (class)\t\nProto: typedef basic_filebuf<wchar_t> wfilebuf;\t\n|[cpp98 cpp11]|[<fstream>]
wfstream()Param: ()\t\nDesc: File stream (wide) (class)\t\nProto: typedef basic_fstream<wchar_t> wfstream;\t\n|[cpp98 cpp11]|[<fstream>]
wifstream()Param: ()\t\nDesc: Input file stream (wide) (class)\t\nProto: typedef basic_ifstream<wchar_t> wifstream;\t\n|[cpp98 cpp11]|[<fstream>]
WINT_MAX @@|[c99 cpp98 cpp11]|[<cstdint>]
WINT_MIN @@|[c99 cpp98 cpp11]|[<cstdint>]
wint_t @@|[c99 cpp98 cpp11]|[<cwchar>]
wint_t()Param: ()\t\nDesc: Wide int type (type)\t\nProto: no-proto\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wios()Param: ()\t\nDesc: Base class for wide character streams (class)\t\nProto: typedef basic_ios<wchar_t> ios;\t\n|[cpp98 cpp11]|[<ios>]
wiostream()Param: ()\t\nDesc: Input/output stream (wide) (class)\t\nProto: typedef basic_iostream<wchar_t> wiostream;\t\n|[arm cpp98 cpp11]|[<istream>]
wistream()Param: ()\t\nDesc: Input stream (wide) (class)\t\nProto: typedef basic_istream<wchar_t> wistream;\t\n|[cpp98 cpp11]|[<istream>]
wistringstream()Param: ()\t\nDesc: Input string stream (wide) (class)\t\nProto: typedef basic_istringstream<wchar_t> wistringstream;\t\n|[cpp98 cpp11]|[<sstream>]
wmemchr(const wchar_t* ptr, wchar_t wc, size_t num)wchar_t* wmemchr (wchar_t* ptr, wchar_t wc, size_t num)Param: (Pointer to the array of wchar_t elements to be searched.)\t\nDesc: Locate character in block of wide characters (function)\t\nProto: const wchar_t* wmemchr (const wchar_t* ptr, wchar_t wc, size_t num);\t\nProto: wchar_t* wmemchr (wchar_t* ptr, wchar_t wc, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wmemcmp(const wchar_t* ptr1, const wchar_t* ptr2, size_t num)Param: (Pointer to block of elements of type wchar_t.)\t\nDesc: Compare two blocks of wide characters (function)\t\nProto: int wmemcmp (const wchar_t* ptr1, const wchar_t* ptr2, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wmemcpy(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Copy block of wide characters (function)\t\nProto: wchar_t* wmemcpy (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wmemmove(wchar_t* destination, const wchar_t* source, size_t num)Param: (Pointer to the destination array where the content is to be copied.)\t\nDesc: Move block of wide characters (function)\t\nProto: wchar_t* wmemmove (wchar_t* destination, const wchar_t* source, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wmemset(wchar_t* ptr, wchar_t wc, size_t num)Param: (Pointer to the array to fill.)\t\nDesc: Fill array of wide characters (function)\t\nProto: wchar_t* wmemset (wchar_t* ptr, wchar_t wc, size_t num);\t\n|[c90 c99 arm cpp98 cpp11]|[<cwchar> (wchar.h)]
wofstream()Param: ()\t\nDesc: Output file stream (wide) (class)\t\nProto: typedef basic_ofstream<wchar_t> wofstream;\t\n|[cpp98 cpp11]|[<fstream>]
wostream()Param: ()\t\nDesc: Output stream (wide) (class)\t\nProto: typedef basic_ostream<wchar_t> wostream;\t\n|[arm cpp98 cpp11]|[<ostream>]
wostringstream()Param: ()\t\nDesc: Output string stream (wide) (class)\t\nProto: typedef basic_ostringstream<wchar_t> wostringstream;\t\n|[cpp98 cpp11]|[<sstream>]
wstreambuf()Param: ()\t\nDesc: Base buffer class for streams (wide) (class)\t\nProto: typedef basic_streambuf<wchar_t> wstreambuf;\t\n|[cpp98 cpp11]|[<streambuf>]
wstreampos()Param: ()\t\nDesc: Wide stream position type (type)\t\nProto: typedef fpos<mbstate_t> wstreampos;\t\n|[cpp98 cpp11]|[<ios>]
wstringbuf()Param: ()\t\nDesc: String stream buffer (wide) (class)\t\nProto: typedef basic_stringbuf<wchar_t> wstringbuf;\t\n|[cpp98 cpp11]|[<sstream>]
wstringstream()Param: ()\t\nDesc: Input/output string stream (wide) (class)\t\nProto: typedef basic_stringstream<wchar_t> wstringstream;\t\n|[cpp98 cpp11]|[<sstream>]
xor @@|[c99 cpp98 cpp11]|[<ciso646>]
xor_eq @@|[c99 cpp98 cpp11]|[<ciso646>]

# test for class member calltips. Here <basic_string>
get_allocator()<basic_string> Desc:
.assign() <basic_string> Desc:
.at()<basic_string> Desc:
.front()<basic_string> Desc:
.back()<basic_string> Desc:
.data()<basic_string> Desc:
.c_str()<basic_string> Desc:
.begin()<basic_string> Desc:
.end()<basic_string> Desc:
.rbegin()<basic_string> Desc:
.rend()<basic_string> Desc:
.empty()<basic_string> Desc:
.size()<basic_string> Desc:
.length()<basic_string> Desc:
.max_size()<basic_string> Desc:
.reserve capacity()<basic_string> Desc:
.shrink_to_fit()<basic_string> Desc:
.clear()<basic_string> Desc:
.insert()<basic_string> Desc:
.erase()<basic_string> Desc:
.push_back()<basic_string> Desc:
.pop_back()<basic_string> Desc:
.append()<basic_string> Desc:
.compare()<basic_string> Desc:
.replace()<basic_string> Desc:
.substr()<basic_string> Desc:
.copy()<basic_string> Desc:
.resize()<basic_string> Desc:
.swap()<basic_string> Desc:
.find()<basic_string> Desc:
.rfind()<basic_string> Desc:
.find_first_of()<basic_string> Desc:
.find_first_not_of()<basic_string> Desc:
.find_last_of()<basic_string> Desc:
.find_last_not_of()<basic_string> Desc:
.npos()<basic_string> Desc:

[ Types and Type Macros ]
 
PRId8
PRId16
PRId32
PRId64
PRIdFAST8
PRIdFAST16
PRIdFAST32
PRIdFAST64
PRIdLEAST8
PRIdLEAST16
PRIdLEAST32
PRIdLEAST64
PRIdMAX
PRIdPTR
PRIi8
PRIi16
PRIi32
PRIi64
PRIiFAST8
PRIiFAST16
PRIiFAST32
PRIiFAST64
PRIiLEAST8
PRIiLEAST16
PRIiLEAST32
PRIiLEAST64
PRIiMAX
PRIiPTR
PRIo8
PRIo16
PRIo32
PRIo64
PRIoFAST8
PRIoFAST16
PRIoFAST32
PRIoFAST64
PRIoLEAST8
PRIoLEAST16
PRIoLEAST32
PRIoLEAST64
PRIoMAX
PRIoPTR
PRIu8
PRIu16
PRIu32
PRIu64
PRIuFAST8
PRIuFAST16
PRIuFAST32
PRIuFAST64
PRIuLEAST8
PRIuLEAST16
PRIuLEAST32
PRIuLEAST64
PRIuPTR
PRIx8
PRIx16
PRIx32
PRIx64
PRIxFAST8
PRIxFAST16
PRIxFAST32
PRIxFAST64
PRIxLEAST8
PRIxLEAST16
PRIxLEAST32
PRIxLEAST64
PRIxMAX
PRIxPTR
PRIX8
PRIX16
PRIX32
PRIX64
PRIXFAST8
PRIXFAST16
PRIXFAST32
PRIXFAST64
PRIXLEAST8
PRIXLEAST16
PRIXLEAST32
PRIXLEAST64
PRIXMAX
PRIXPTR
SCNd8
SCNd16
SCNd32
SCNd64
SCNdFAST8
SCNdFAST16
SCNdFAST32
SCNdFAST64
SCNdLEAST8
SCNdLEAST16
SCNdLEAST32
SCNdLEAST64
SCNdMAX
SCNdPTR
SCNi8
SCNi16
SCNi32
SCNi64
SCNiFAST8
SCNiFAST16
SCNiFAST32
SCNiFAST64
SCNiLEAST8
SCNiLEAST16
SCNiLEAST32
SCNiLEAST64
SCNiMAX
SCNiPTR
SCNo8
SCNo16
SCNo32
SCNo64
SCNoFAST8
SCNoFAST16
SCNoFAST32
SCNoFAST64
SCNoLEAST8
SCNoLEAST16
SCNoLEAST32
SCNoLEAST64
SCNoMAX
SCNoPTR
SCNu8
SCNu16
SCNu32
SCNu64
SCNuFAST8
SCNuFAST16
SCNuFAST32
SCNuFAST64
SCNuLEAST8
SCNuLEAST16
SCNuLEAST32
SCNuLEAST64
SCNuMAX
SCNuPTR
SCNx8
SCNx16
SCNx32
SCNx64
SCNxFAST8
SCNxFAST16
SCNxFAST32
SCNxFAST64
SCNxLEAST8
SCNxLEAST16
SCNxLEAST32
SCNxLEAST64
SCNxMAX
SCNxPTR
SCNX8
SCNX16
SCNX32
SCNX64
SCNXFAST8
SCNXFAST16
SCNXFAST32
SCNXFAST64
SCNXLEAST8
SCNXLEAST16
SCNXLEAST32
SCNXLEAST64
SCNXMAX
SCNXPTR
FLT_RADIX
FLT_ROUNDS
FLT_EVAL_METHOD
DECIMAL_DIG
DBL_DIG
DBL_EPSILON
DBL_MANT_DIG
DBL_MAX
DBL_MAX_10_EXP
DBL_MAX_EXP
DBL_MIN
DBL_MIN_10_EXP
DBL_MIN_EXP
FLT_DIG
FLT_EPSILON
FLT_MANT_DIG
FLT_MAX
FLT_MAX_10_EXP
FLT_MAX_EXP
FLT_MIN
FLT_MIN_10_EXP
FLT_MIN_EXP
LDBL_DIG
LDBL_EPSILON
LDBL_MANT_DIG
LDBL_MAX
LDBL_MAX_10_EXP
LDBL_MAX_EXP
LDBL_MIN
LDBL_MIN_10_EXP
LDBL_MIN_EXP
bool
true
false
CHAR_BIT
signed
unsigned 
short
void
bool
float
char
double
int
long 
short
signed
wint_t
wctrans_t
wctype_t 
mbstate_t
wchar_t
char16_t
char32_t
int8_t
int16_t
int32_t
int64_t
int_fast8_t
int_fast16_t
int_fast32_t
int_fast64_t
int_least8_t
int_least16_t
int_least32_t
int_least64_t
uint8_t
uint16_t
uint32_t
uint64_t
uint_fast8_t
uint_fast16_t
uint_fast32_t
uint_fast64_t
uint_least8_t
uint_least16_t
uint_least32_t
uint_least64_t
intmax_t
intptr_t
uintmax_t
uintptr_t
INT8_C
INT16_C
INT32_C
INT64_C
INT8_MAX
INT16_MAX
INT32_MAX
INT64_MAX
INT8_MIN
INT16_MIN
INT32_MIN
INT64_MIN
INT_FAST8_MAX
INT_FAST16_MAX
INT_FAST32_MAX
INT_FAST64_MAX
INT_FAST8_MIN
INT_FAST16_MIN
INT_FAST32_MIN
INT_FAST64_MIN
INT_LEAST8_MAX
INT_LEAST16_MAX
INT_LEAST32_MAX
INT_LEAST64_MAX
INT_LEAST8_MIN
INT_LEAST16_MIN
INT_LEAST32_MIN
INT_LEAST64_MIN
UINT8_C
UINT16_C
UINT32_C
UINT64_C
UINT_PTR
